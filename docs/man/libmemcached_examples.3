.TH "LIBMEMCACHED_EXAMPLES" "3" "April 08, 2011" "0.47" "libmemcached"
.SH NAME
libmemcached_examples \- libmemcached Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructeredText.
.
.sp
Examples for libmemcached
.SH DESCRIPTION
.sp
For full examples, test cases are found in tests/*.c in the main
distribution. These are always up to date, and are used for each test run of
the library.
.SH CREATING AND FREEING STRUCTURE
.sp
.nf
.ft C
memcached_st *memc;
memcached_return_t rc;

memc= memcached_create(NULL);
\&...do stuff...
memcached_free(memc);
.ft P
.fi
.sp
The above code would create a connection and then free the connection when
finished.
.SH CONNECTING TO SERVERS
.sp
.nf
.ft C
memcached_server_st *servers;
memcached_st *memc= memcached_create(NULL);
char servername[]= "0.example.com";

servers= memcached_server_list_append(NULL, servername, 400, &rc);

for (x= 0; x < 20; x++)
{
  char buffer[SMALL_STRING_LEN];

  snprintf(buffer, SMALL_STRING_LEN, "%u.example.com", 400+x);
  servers= memcached_server_list_append(servers, buffer, 401, &rc);
}
rc= memcached_server_push(memc, servers);
memcached_server_free(servers);
memcached_free(memc);
.ft P
.fi
.sp
In the above code you create a \fBmemcached_st\fP object that you then feed in a
single host into. In the for loop you build a \fBmemcached_server_st\fPpointer that you then later feed via memcached_server_push() into the
\fBmemcached_st\fP structure.
.sp
You can reuse the \fBmemcached_server_st\fP object with multile \fBmemcached_st\fPstructures.
.SH ADDING A VALUE TO THE SERVER
.sp
.nf
.ft C
char *key= "foo";
char *value;
size_t value_length= 8191;
unsigned int x;

value = (char*)malloc(value_length);
assert(value);

for (x= 0; x < value_length; x++)
value[x] = (char) (x % 127);

for (x= 0; x < 1; x++)
{
  rc= memcached_set(memc, key, strlen(key),
  value, value_length,
  (time_t)0, (uint32_t)0);
  assert(rc == MEMCACHED_SUCCESS);
}

free(value);
.ft P
.fi
.sp
It is best practice to always look at the return value of any operation.
.SH FETCHING MULTIPLE VALUES
.sp
.nf
.ft C
memcached_return_t rc;
char *keys[]= {"fudge", "son", "food"};
size_t key_length[]= {5, 3, 4};
unsigned int x;
uint32_t flags;

char return_key[MEMCACHED_MAX_KEY];
size_t return_key_length;
char *return_value;
size_t return_value_length;

rc= memcached_mget(memc, keys, key_length, 3);

x= 0;
while ((return_value= memcached_fetch(memc, return_key, &return_key_length,
                                      &return_value_length, &flags, &rc)))
{
  free(return_value);
  x++;
}
.ft P
.fi
.sp
Notice that you freed values returned from memcached_fetch(). The define
\fBMEMCACHED_MAX_KEY\fP is provided for usage.
.SH HOME
.sp
To find out more information please check:
\fI\%https://launchpad.net/libmemcached\fP
.SH SEE ALSO
.sp
\fImemcached(1)\fP
.SH AUTHOR
Brian Aker
.SH COPYRIGHT
2011, Brian Aker DataDifferential, http://datadifferential.com/
.\" Generated by docutils manpage writer.
.\" 
.
