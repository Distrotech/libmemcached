#line 2 "libmemcached/options/scanner.cc"
#line 22 "libmemcached/options/scanner.l"

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-fpermissive"

#include <libmemcached/options/context.h>
#include <libmemcached/options/parser.h>
#include <libmemcached/options/string.h>
#include <libmemcached/options/symbol.h>

#define YY_EXTRA_TYPE Context*




#line 19 "libmemcached/options/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[823] =
    {   0,
        0,    0,  101,   99,    3,    3,    1,   99,   99,    2,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   99,    0,   98,   80,    0,    2,   97,    0,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,    0,    4,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,    0,    0,    0,    2,   93,
        0,   97,   85,   97,   76,   97,   97,   97,   97,   97,
       97,   84,   97,   97,   97,   97,   97,   97,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   94,   94,    0,    0,    0,    2,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       78,   80,   80,   80,   80,   80,   80,   80,   80,    0,
        0,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,    0,    0,   97,
       74,   77,   79,   97,    0,   90,   97,   97,   97,   97,
       97,   73,   97,   80,   80,   80,   80,   80,   80,   21,
       80,   80,    0,    0,    0,    0,    0,    0,   80,   80,
       80,   80,   80,   80,    0,    0,   80,   80,    0,    0,

       80,   80,   80,    0,    0,    0,   80,    0,   80,    0,
        0,   97,    0,    0,    0,   97,   97,   82,   91,   83,
       97,    0,    0,   80,   80,   80,   80,   80,   80,    0,
       23,    0,    0,    0,    0,    0,    0,    0,   80,   80,
       80,    0,    0,   80,   80,    0,    0,   80,   80,    0,
        0,   80,    0,    0,   80,    0,    0,    0,    0,    0,
        0,    0,    0,   80,   96,    0,   97,    0,    0,   88,
       86,   72,   92,   75,    0,    0,   80,   80,    0,    0,
       80,   80,   80,    0,    0,    0,    0,    0,    0,    0,
        0,   32,   80,   80,    0,    0,   80,   80,    0,    0,

        0,    0,   80,    0,    0,   80,    0,    0,   80,    0,
        0,    0,    0,    0,    0,    0,    0,   80,   96,   95,
       97,   89,   87,    0,    0,    0,    0,    0,    0,    0,
        0,   80,   80,   80,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   37,    0,    0,    0,    0,    0,
        0,   80,    0,    0,    0,    0,    0,    5,   80,    0,
        0,    0,    0,    0,    0,    0,   80,    0,    0,    0,
        0,   69,    0,    0,   68,    0,    0,   96,   97,    0,
        0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
       80,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   80,
        0,    0,    0,    0,    0,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   81,    0,    0,    0,    0,
        0,    0,    0,    0,   80,    0,    0,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   80,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   67,
       66,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   80,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   57,   56,
        0,    0,    0,    0,    0,    0,    0,    0,    8,    7,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   80,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   70,
       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   59,   58,    0,    0,   61,

        0,    0,   60,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   80,    0,    0,    0,    0,
        0,    0,    0,    0,   34,    0,   33,    0,    0,    0,
        0,    0,    0,    0,   45,   44,    0,    0,    0,    0,
       51,   50,    0,    0,    0,    0,    0,   65,    0,   64,
        0,    0,    0,    0,    0,    0,   16,   15,    0,    0,
        0,    0,   22,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   41,   40,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   63,   62,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   47,   46,    0,    0,    0,    0,    0,
        0,    0,    0,   12,   11,   14,   13,   18,   17,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   10,    9,   20,   19,    0,    0,    0,   29,    0,
        0,   28,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   31,    0,   30,    0,
        0,    0,    0,    0,    0,   53,   55,   52,   54,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   27,   26,   39,   38,    0,    0,    0,    0,   25,
       24,    0,    0,    0,    0,    0,    0,   49,   48,   43,
       42,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   10,   10,   10,   17,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[829] =
    {   0,
        0,  977,  969, 2211, 2211, 2211, 2211,  961,  922,   63,
       71,   79,   73,   65,   81,   66,   72,  114,  112,  130,
      123,  119,  917,  905,  904,  184,  247,  255,  121,  263,
      129,  263,  264,  269,  265,  271,  273,  275,  320,  322,
      327,  331,  332,  333,  340,  371,  380,  381,  901, 2211,
      429,   77,  379,  382,  131,  141,  169,  260,  345,  258,
      441,  447,  272,  276,  329,  489,  505,  513,  522, 2211,
      530,  530,  421,  532,  536,  537,  541,  570,  585,  590,
      595,  376,  605,  596,  640,  644,  646,  652,  324,  343,
      386,  398,  516,  388,  389,  414,  517,  520,  526,  529,

      538,  530,  524,  571,  574,  593,  645,  582,  585,  602,
      624,  707,  715,  724,  732,  740,  749,  749,  750,  751,
      755,  761,  799,  757,  809,  810,  805,  814,  820,  843,
      858,  631,  651,  648,  648,  749,  649,  645,  658,  858,
      861,  752,  754,  772,  771,  806,  812,  463,  819,  844,
      464,  857,  850,  861,  465,  888,  871,  925,  933,  890,
      895,  935,  939,  940,   94,  944,  945,  957,  946,  979,
      993,  994, 1001,  466,  866,  909,  937,  937,  947,    0,
      950, 1013,  958,  991,  982,  979, 1000,  988, 1001,  999,
     1012,  572, 1009, 1005, 1002, 1005, 1001, 1022, 1009, 1010,

     1032,  856, 1033, 1044, 1048, 1029, 1061, 1039, 1057, 1074,
     1100, 1084,  105,  888,  885, 1101, 1102, 1109, 1110, 1119,
     1123, 1071, 1073, 1055, 1066, 1083, 1105, 1110, 1114, 1107,
     2211, 1109, 1115, 1111, 1138, 1129, 1128, 1149, 1157, 1148,
     1148, 1147, 1150, 1147, 1160, 1165, 1166, 1187, 1160, 1170,
     1172, 1162, 1176, 1178, 1170, 1184, 1175, 1186, 1177, 1191,
     1192, 1195, 1199, 1179, 1241, 1250, 1250,  885,  840, 2211,
     2211, 1251, 1252, 1257, 1215, 1217, 1230, 1231, 1241, 1247,
     1239, 1241, 1260, 1254, 1255, 1266,  843,  841, 1268,  803,
      794, 1284, 1251, 1287, 1269, 1270, 1291, 1274, 1272, 1288,

     1284, 1287, 1319, 1295, 1300, 1294, 1300, 1301, 1297, 1315,
     1318, 1318, 1320, 1309, 1325, 1326, 1313, 1340, 1377, 2211,
     1346, 2211, 2211, 1327, 1331, 1323, 1339, 1339, 1340, 1347,
     1362, 1360, 1389, 1359, 1361, 1363, 1367, 1374, 1369, 1374,
     1378, 1372, 1388, 1389,    0, 1383, 1384, 1387, 1388, 1391,
     1392, 1380, 1404, 1409, 1406, 1409, 1425, 2211,  815, 1426,
     1429, 1430, 1425, 1428, 1418, 1421, 1458, 1433, 1445, 1435,
     1447, 2211, 1433, 1434, 2211, 1444, 1445, 1495, 1485, 1465,
     1466, 1454, 1457, 1492, 1493, 1486, 1489, 1501, 1487, 1488,
     1489, 1502, 1503,  821, 1494, 1512,  754, 1496, 1514, 1515,

     1512, 1517, 1514, 1514, 1515, 1517, 1518, 1521, 1524, 1546,
     1537, 1539, 1542, 1544, 1557, 2211, 1558, 1545, 1546, 1557,
     1558, 1559, 1560, 1546, 1547, 1565, 1566, 1571, 1558, 1574,
     1559, 1572, 1573, 1571, 1572, 1606, 1586, 1588, 1594, 1596,
     1595, 1596, 1603, 1604, 1626, 1608, 1609, 1610,  787,  744,
     1597, 1617, 1603, 1602, 1622, 1608, 1610, 1621, 1612, 1623,
      771,  725, 1619, 1622, 1618, 1635, 1636, 1641, 1644, 1661,
     1662, 1659, 1660, 1650, 1651, 1670, 1660, 1672, 1662, 1658,
     1659, 1678, 1679, 1669, 1678, 1682, 1672, 1681, 1685, 2211,
     2211, 1663, 1665,  724,  669, 1671, 1677, 1693, 1695, 1698,

     1699, 1715, 1716, 1710, 1712, 1711, 1711, 1712, 1728, 1724,
     1726, 1731, 1727, 1729, 1727, 1729, 1729, 1731, 1721, 1722,
     1721, 1723,  680,  678, 1727, 1733, 1748, 1750, 1758, 1759,
     1763, 1764, 1757, 1759, 1758, 1777, 1760, 1779, 2211, 2211,
     1765, 1766, 1777, 1775, 1763, 1780, 1778, 1766, 2211, 2211,
     1784, 1785, 1779, 1781, 1793, 1794, 1789, 1806, 1815, 1818,
     1823, 1824, 1816, 1813, 1815, 1814, 1830, 1818, 1817, 1833,
     1821,  677, 1832,  674, 1833, 1837, 1838, 1824, 1825, 2211,
     2211, 1841, 1842,  672,  631, 1827, 1829, 1831, 1832,  622,
      621,  626,  606,  566,  540, 2211, 2211, 1837, 1871, 2211,

     1856, 1876, 2211, 1867, 1868, 1881, 1882, 1868, 1869, 1870,
     1871, 1879, 1880, 1878, 1879,  558, 1890, 1891, 1892, 1878,
     1886, 1895, 1881, 1889, 2211, 1884, 2211, 1886, 1891, 1897,
      542,  533, 1914, 1916, 2211, 2211, 1915, 1916, 1919, 1920,
     2211, 2211, 1920, 1922, 1923, 1924, 1939, 2211, 1940, 2211,
     1927, 1928, 1933, 1934, 1930, 1931, 2211, 2211, 1947, 1948,
     1933, 1934, 2211, 1950, 1952, 1942, 1958, 1966, 1966, 1983,
     1988, 1985, 1986, 1980, 1981, 2211, 2211, 1983, 1984,  532,
      494, 1992, 1993, 1990, 1991, 1992, 1993, 2211, 2211, 1983,
     1984, 1993, 1994, 1988, 1989,  414,  412, 1989, 1990, 2003,

     2005, 2002, 2013, 2020, 2027, 2035, 2026, 2041, 2042, 2038,
     2040, 2041, 2042, 2211, 2211,  421,  382, 2026, 2027, 2028,
     2029, 2037, 2038, 2211, 2211, 2211, 2211, 2211, 2211,  406,
      405, 2034, 2035, 2059,  403, 2050, 2061,  359, 2052, 2211,
     2211, 2061, 2063, 2065, 2066, 2063, 2080, 2089, 2092, 2093,
     2094, 2211, 2211, 2211, 2211,  326,  316, 2082, 2211,  333,
     2083, 2211,  327, 2102, 2103, 2104, 2105, 2098, 2099,  323,
      301,  299,  266, 2098, 2099, 2100, 2211, 2101, 2211, 2094,
     2095,  193,  146, 2102, 2103, 2211, 2211, 2211, 2211, 2112,
     2113,  170,  153,  152,  151, 2102, 2104, 2114, 2120, 2121,

     2123, 2211, 2211, 2211, 2211, 2146, 2147, 2133, 2134, 2211,
     2211, 2154, 2156,  150,  149, 2154, 2155, 2211, 2211, 2211,
     2211, 2211, 2204,  119, 2207,  117,  116,  108
    } ;

static yyconst flex_int16_t yy_def[829] =
    {   0,
      822,    1,  822,  822,  822,  822,  822,  823,  822,  824,
      824,  824,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,  825,  823,  823,  822,  826,  824,   12,  826,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,  825,  822,
       26,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  827,  828,  827,  824,  822,
      828,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  828,  827,  828,  828,  828,  824,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   51,   51,   51,   51,   51,   51,   51,   51,  822,
      822,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,  828,  828,   12,
       12,   12,   12,   12,  822,   12,   12,   12,   12,   12,
       12,   12,   12,   51,   51,   51,   51,   51,   51,   51,
       51,   51,  822,  822,  822,  822,  822,  822,   51,   51,
       51,   51,   51,   51,  822,  822,   51,   51,  822,  822,

       51,   51,   51,  822,  822,  822,   51,  822,   51,  828,
      828,   12,  822,  822,  822,   12,   12,   12,   12,   12,
       12,  822,  822,   51,   51,   51,   51,   51,   51,  822,
      822,  822,  822,  822,  822,  822,  822,  822,   51,   51,
       51,  822,  822,   51,   51,  822,  822,   51,   51,  822,
      822,   51,  822,  822,   51,  822,  822,  822,  822,  822,
      822,  822,  822,   51,  828,  828,   12,  822,  822,  822,
      822,   12,   12,   12,  822,  822,   51,   51,  822,  822,
       51,   51,   51,  822,  822,  822,  822,  822,  822,  822,
      822,   51,   51,   51,  822,  822,   51,   51,  822,  822,

      822,  822,   51,  822,  822,   51,  822,  822,   51,  822,
      822,  822,  822,  822,  822,  822,  822,   51,  828,  822,
       12,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,   51,   51,   51,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,   51,  822,  822,  822,  822,  822,
      822,   51,  822,  822,  822,  822,  822,  822,   51,  822,
      822,  822,  822,  822,  822,  822,   51,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  828,   12,  822,
      822,  822,  822,  822,  822,  822,  822,   51,  822,  822,
       51,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,   51,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,   12,  822,  822,  822,  822,
      822,  822,  822,  822,   51,  822,  822,   51,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,   51,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,   51,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,   51,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,   51,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,    0,  822,  822,  822,  822,  822,  822
    } ;

static yyconst flex_int16_t yy_nxt[2283] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       10,   10,   10,   10,   10,   10,    4,    7,   11,   11,
       12,   13,   14,   15,   11,   16,   17,   18,   11,   11,
       19,   11,   11,   11,   11,   20,   21,   22,   11,   11,
       11,   11,   11,   11,    4,   11,   11,   12,   13,   14,
       15,   11,   16,   17,   18,   11,   11,   19,   11,   11,
       11,   11,   20,   21,   22,   11,   11,   11,   11,   11,
       11,   27,   28,   28,   28,   28,   28,   28,   28,   30,
       31,   31,   31,   31,   31,   31,   31,   30,   31,   31,
       31,   31,   31,   31,   31,   34,   35,   29,   29,   37,

       36,   29,   39,   40,   29,   29,  214,   29,   29,  215,
      116,   32,   38,   29,   33,   89,   29,  268,  113,   68,
      269,   29,   34,   35,   29,   29,   37,   36,   29,   39,
       40,   29,   29,   42,   29,   29,   41,   70,   32,   38,
       29,   33,   89,   29,   43,   47,   29,   29,   45,   29,
       44,   29,   46,   29,   48,   29,   29,   94,   29,   95,
       42,   29,   29,   41,   29,   29,  819,  818,  805,  804,
      803,   43,   47,   29,   29,   45,   29,   44,   29,   46,
       29,   48,   29,   29,   94,   29,   95,  802,   29,   29,
      797,   29,   29,   51,   51,   51,   51,   51,   51,   51,

      796,   96,   52,   53,   54,   55,   51,   51,   51,   56,
       57,   51,   58,   51,   51,   59,   51,   60,   51,   61,
       62,   63,   64,   65,   51,   51,   51,   51,   96,   52,
       53,   54,   55,   51,   51,   51,   56,   57,   51,   58,
       51,   51,   59,   51,   60,   51,   61,   62,   63,   64,
       65,   51,   51,   51,   51,   66,   67,   67,   67,   67,
       67,   67,   67,   27,   69,   69,   69,   69,   69,   69,
       69,   66,   71,   71,   71,   71,   71,   71,   71,   70,
       70,   70,   97,  789,   73,   70,   75,   70,   74,   70,
      100,   70,  109,  101,   72,   29,   29,   29,   29,   29,

       29,   29,   77,   29,   29,   29,   76,   29,   29,   97,
       29,   73,  110,   75,   78,   74,  788,  100,  787,  109,
      101,   72,   29,   29,   29,   29,   29,   29,   29,   77,
       29,   29,   29,   76,   29,   29,   70,   29,   70,  110,
      786,   78,   80,   70,  779,   82,   79,   70,   70,   70,
      777,  111,   29,   83,   29,   29,   70,   29,   81,   29,
      775,  132,   29,   29,   29,   29,   29,   29,   84,   80,
      774,   85,   29,   79,  133,   29,  762,   98,  111,   29,
       83,   29,   29,   99,   29,   81,   29,   70,  132,   29,
       29,   29,   29,   29,   29,   84,   70,   70,   85,   29,

       92,  133,   29,   29,   98,   90,   29,   86,   29,  134,
       99,   29,   29,   29,   93,   87,   29,   91,  135,   88,
      759,  140,  755,  754,  138,  139,  747,   92,  746,  729,
       29,  728,   90,   29,   86,   29,  134,   70,   29,   29,
       29,   93,   87,   29,   91,  135,   88,   51,   51,   51,
       51,  138,  139,   29,   51,   51,   29,   51,  141,  102,
       51,  103,   51,  104,   51,   51,   51,   51,   51,  105,
      195,  199,  204,  222,   51,   51,   51,   51,  106,  107,
       29,   51,   51,   29,   51,  108,  102,   51,  103,   51,
      104,   51,   51,   51,   51,   51,  105,   66,  112,  112,

      112,  112,  112,  112,  112,  106,  107,  196,  200,  205,
      223,  715,  108,  114,  115,  115,  115,  115,  115,  115,
      115,   66,  112,  112,  112,  112,  112,  112,  112,   70,
       27,  117,  117,  117,  117,  117,  117,  117,   71,   71,
       71,   71,   71,   71,   71,   71,   70,  136,   70,  714,
      677,  137,   70,   70,  142,  143,  144,   70,  145,  676,
      146,  147,   29,  148,   29,   29,  118,   29,   29,  120,
      119,   29,   29,   29,  136,  663,   29,  121,  137,  242,
      122,  142,  143,  144,  646,  145,   70,  146,  147,   29,
      148,   29,   29,  118,   29,   29,  120,  119,   29,   29,

       29,   70,   29,   29,  121,   29,   70,  123,  149,  150,
      645,   70,   70,  644,  151,  154,  243,   29,  155,  124,
       29,   70,   29,  125,  156,   29,  127,   29,   29,   29,
       29,   29,   29,  643,  123,  149,  150,   29,  642,  641,
       29,  151,  154,  126,   29,  155,  124,   29,  636,   29,
      125,  156,   29,  127,   29,   29,   70,   29,   29,  157,
       70,  128,   70,  174,   29,  152,  129,   29,   70,  175,
      126,  176,   29,  177,  131,   29,   29,  180,   29,   29,
      153,   29,  181,  182,   29,  130,  157,   29,  128,  635,
      174,  627,  152,  129,  625,  581,  175,  580,  176,   29,

      177,  131,   29,   29,  180,   29,   29,  153,   29,  181,
      182,   29,  130,  552,   29,   71,   71,   71,   71,   71,
       71,   71,   71,   66,  112,  112,  112,  112,  112,  112,
      112,   70,   71,  158,  158,  158,  158,  158,  158,  158,
      114,  159,  159,  159,  159,  159,  159,  159,   71,   71,
       71,   71,   71,   71,   71,   71,   70,   30,  117,  117,
      117,  117,  117,  117,  117,   70,   70,   70,  551,  520,
      189,   70,  178,   70,  161,  160,  190,  163,  519,  164,
      179,   29,   29,   29,   29,   29,  162,   29,  508,   29,
       29,  191,   29,   29,  507,  167,   29,  189,  454,  178,

      192,  161,  160,  190,  163,  165,  164,  179,   29,   29,
       29,   29,   29,  162,   29,   70,   29,   29,  191,   29,
       29,   70,  167,   29,  166,   70,   70,  192,  451,  193,
       70,   29,  416,  194,   29,  168,   70,   29,  342,  169,
       29,   29,   29,  170,   29,   29,  171,  341,  339,   29,
      338,  166,   29,  323,  197,   29,  193,  172,   29,   70,
      194,   29,  168,  253,   29,  173,  169,   29,   29,   29,
      170,   29,   29,  171,   70,   29,   29,  183,   29,   29,
      186,  197,   29,  198,  172,  201,  184,  202,  185,  187,
       29,  188,  173,   29,  203,  206,  322,  209,  271,  270,

      254,  224,   29,   50,  183,   29,   70,  186,   25,   25,
      198,   70,  201,  184,  202,  185,  187,   29,  188,   50,
       29,  203,   29,  207,  209,   29,  212,   29,  224,   26,
       29,  225,  208,  210,  211,  211,  211,  211,  211,  211,
      211,  114,   71,   71,   71,   71,   71,   71,   71,   29,
      207,   70,   29,  212,   29,   70,   70,   29,  225,  226,
       70,   70,   70,  227,  218,   25,  216,   29,  822,  228,
       29,   29,   29,   70,   29,   29,   29,   29,   29,   29,
       29,   29,   23,  822,  213,  229,  226,  822,  217,   29,
      227,  218,   29,  216,   29,   70,  228,   29,   29,   29,

      233,   29,   29,   29,   29,   29,   29,   29,   29,   70,
       70,   29,  229,  234,  219,  217,   29,   70,  235,   29,
      230,  236,  237,  220,  238,   29,   29,  233,   29,   29,
      231,  239,  240,   29,  241,  244,  221,  245,   29,  246,
      234,  219,  247,  248,  249,  235,  250,  251,  236,  237,
      220,  238,   29,   29,  252,   29,   29,  232,  239,  240,
       29,  241,  244,  221,  245,  255,  246,  260,  261,  247,
      248,  249,  256,  250,  251,  257,  258,  263,  822,  259,
      264,  252,   71,  265,  265,  265,  265,  265,  265,  265,
      279,  822,  255,  275,  260,  276,  822,  277,  822,  256,

       70,  278,  257,  258,  263,  262,  259,  264,  210,  266,
      266,  266,  266,  266,  266,  266,   29,   70,   70,   29,
      275,  267,  276,  272,  277,   70,   70,  280,  278,  281,
      282,  822,  822,   29,   29,   70,   29,   29,  273,   70,
      283,   29,   29,   29,   29,   29,   29,  284,  267,  285,
      272,   29,  286,  287,   29,   29,  281,  282,   29,  274,
       29,   29,  288,   29,   29,  273,  289,  283,   29,   29,
      290,   29,   29,  291,  284,  292,  285,  293,   29,  286,
      287,   29,   29,  294,  295,   29,  274,  296,  297,  288,
      298,  299,  300,  289,  301,  303,  304,  290,  305,  306,

      291,  307,  292,  308,  293,  309,  310,  311,  312,  313,
      294,  295,  314,  315,  296,  297,  316,  298,  299,  300,
      317,  318,  303,  304,  822,  305,  306,  822,  307,  822,
      308,  302,  309,  310,  311,  312,  313,  326,  328,  314,
      315,  822,  324,  316,  325,  822,  822,  317,  318,   71,
      319,  319,  319,  319,  319,  319,  319,  320,  210,   71,
       71,   71,   71,   71,   71,   71,   70,   70,   70,  324,
      330,  325,  321,   70,  327,  329,  331,  332,  333,  334,
      335,  336,   29,   29,   29,   29,   29,   29,  337,   29,
      340,  343,   29,  345,  346,  348,  349,  330,  350,  321,

      352,  363,  353,  331,  332,  333,  334,  335,  336,   29,
       29,   29,   29,   29,   29,  337,   29,  340,  354,   29,
      345,  355,  348,  349,  356,  361,  357,  352,  344,  353,
      362,  347,  365,  366,  367,  351,  358,  368,  364,  369,
      370,  371,  372,  373,  374,  354,  375,  376,  355,  380,
      822,  356,  361,  381,  822,  359,  382,  362,  822,  365,
      366,  367,   70,  360,  368,  822,  369,  370,  371,  372,
      373,  374,  383,  375,  384,  385,  380,  379,   29,  386,
      381,   29,  359,  382,  377,   71,  378,  378,  378,  378,
      378,  378,  378,  320,  387,  388,  389,  391,  392,  383,

      393,  384,  385,  394,  379,   29,  386,  395,   29,  396,
      397,  398,  399,  400,  402,  404,  405,  406,  407,  408,
      409,  387,  388,  410,  391,  392,  411,  393,  401,  403,
      394,  412,  413,  390,  395,  414,  396,  397,  398,  399,
      400,  402,  404,  405,  406,  407,  408,  409,  415,  417,
      410,  418,  419,  411,  424,  401,  403,  425,  412,  413,
      420,  421,  414,  422,  423,  426,  428,  429,  430,  431,
      432,  433,  434,  435,  822,  415,  417,  822,  418,  419,
      822,  424,  822,  822,  425,  437,  438,  420,  421,  439,
      422,  423,  440,  428,  429,  430,  431,  432,  433,  434,

      435,   70,  427,   71,   71,   71,   71,   71,   71,   71,
       71,  320,  437,  438,  441,  442,  439,   29,  443,  440,
       29,  444,  436,  445,  446,  447,  448,  449,  450,  452,
      453,  455,  456,  457,  458,  459,  460,  461,  462,  463,
      464,  441,  442,  465,   29,  443,  466,   29,  444,  436,
      445,  446,  447,  448,  449,  450,  452,  453,  455,  456,
      457,  458,  459,  460,  461,  462,  463,  464,  467,  468,
      465,  469,  470,  466,  471,  472,  473,  474,  475,  476,
      477,  478,  479,  480,  481,  482,  483,  486,  489,  484,
      490,  491,  487,  492,  493,  467,  468,  485,  469,  470,

      488,  471,  472,  473,  474,  475,  476,  477,  478,  479,
      480,  481,  482,  483,  486,  489,  484,  490,  491,  487,
      492,  493,   70,  494,  485,  495,  496,  488,  497,  498,
      499,  500,  501,  502,  504,  505,  506,  509,   29,  510,
      511,   29,  512,  525,  513,  514,  515,  516,  517,  518,
      494,  521,  495,  496,  522,  497,  498,  499,  500,  501,
      523,  504,  505,  506,  509,   29,  510,  511,   29,  512,
      503,  513,  514,  515,  516,  517,  518,  524,  521,  527,
      526,  522,  528,  529,  530,  531,  532,  523,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,

      545,  546,  547,  548,  524,  549,  527,  550,  553,  528,
      529,  530,  531,  532,  554,  533,  534,  535,  536,  537,
      538,  539,  540,  541,  542,  543,  544,  545,  546,  547,
      548,  555,  549,  556,  550,  553,  557,  558,  559,  560,
      561,  554,  562,  563,  564,  565,  566,  567,  568,  569,
      570,  571,  572,  573,  574,  575,  576,  577,  555,  578,
      556,  579,  582,  557,  558,  559,  560,  561,  583,  562,
      563,  564,  565,  566,  567,  568,  569,  570,  571,  572,
      573,  574,  575,  576,  577,  584,  578,  585,  579,  582,
      586,  587,  588,  589,  590,  583,  591,  592,  593,  594,

      595,  596,  597,  598,  599,  600,  601,  602,  603,  604,
      605,  606,  584,  607,  585,  608,  609,  586,  587,  588,
      589,  590,  610,  591,  592,  593,  594,  595,  596,  597,
      598,  599,  600,  601,  602,  603,  604,  605,  606,  611,
      607,  612,  608,  609,  613,  614,  615,  616,  617,  610,
      618,  619,  620,  621,  622,  623,  624,  626,  628,  629,
      630,  631,  632,  633,  634,  637,  611,  638,  612,  639,
      640,  613,  614,  615,  616,  617,  647,  618,  619,  620,
      621,  622,  623,  624,  626,  628,  629,  630,  631,  632,
      633,  634,  637,  648,  638,  649,  639,  640,  650,  651,

      652,  653,  654,  647,  655,  656,  657,  658,  659,  660,
      661,  662,  664,  665,  666,  667,  668,  669,  670,  671,
      648,  672,  649,  673,  674,  650,  651,  652,  653,  654,
      675,  655,  656,  657,  658,  659,  660,  661,  662,  664,
      665,  666,  667,  668,  669,  670,  671,  678,  672,  679,
      673,  674,  680,  681,  682,  683,  684,  675,  685,  686,
      687,  688,  689,  690,  691,  692,  693,  694,  695,  696,
      697,  698,  699,  700,  678,  701,  679,  702,  703,  680,
      681,  682,  683,  684,  704,  685,  686,  687,  688,  689,
      690,  691,  692,  693,  694,  695,  696,  697,  698,  699,

      700,  705,  701,  706,  702,  703,  707,  708,  709,  710,
      711,  704,  712,  713,  716,  717,  718,  719,  720,  721,
      722,  723,  724,  725,  726,  727,  730,  731,  705,  732,
      706,  733,  734,  707,  708,  709,  710,  711,  735,  712,
      713,  716,  717,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  730,  731,  736,  732,  737,  733,  734,
      738,  739,  740,  741,  742,  735,  743,  744,  745,  748,
      749,  750,  751,  752,  753,  756,  757,  758,  760,  761,
      763,  764,  736,  765,  737,  766,  767,  738,  739,  740,
      741,  742,  768,  743,  744,  745,  748,  749,  750,  751,

      752,  753,  756,  757,  758,  760,  761,  763,  764,  769,
      765,  770,  766,  767,  771,  772,  773,  776,  778,  768,
      780,  781,  782,  783,  784,  785,  790,  791,  792,  793,
      794,  795,  798,  799,  800,  801,  769,  806,  770,  807,
      808,  771,  772,  773,  776,  778,  809,  780,  781,  782,
      783,  784,  785,  790,  791,  792,  793,  794,  795,  798,
      799,  800,  801,  810,  806,  811,  807,  808,  812,  813,
      814,  815,  816,  809,  817,  820,  821,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      810,  822,  811,  822,  822,  812,  813,  814,  815,  816,

      822,  817,  820,  821,   24,  822,   24,   49,   49,   49,
        3,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822
    } ;

static yyconst flex_int16_t yy_chk[2283] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   14,   14,   16,   15,

       14,   16,   16,   17,   17,   13,  165,   17,   13,  165,
      828,   12,   15,   15,   12,   52,   15,  213,  827,  826,
      213,  824,   13,   14,   14,   16,   15,   14,   16,   16,
       17,   17,   13,   19,   17,   13,   18,   29,   12,   15,
       15,   12,   52,   15,   19,   21,   18,   19,   20,   18,
       19,   22,   20,   29,   22,   21,   29,   55,   21,   56,
       19,   31,   20,   18,   31,   20,  815,  814,  795,  794,
      793,   19,   21,   18,   19,   20,   18,   19,   22,   20,
       29,   22,   21,   29,   55,   21,   56,  792,   31,   20,
      783,   31,   20,   26,   26,   26,   26,   26,   26,   26,

      782,   57,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   57,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   27,   27,   27,   27,   27,
       27,   27,   27,   28,   28,   28,   28,   28,   28,   28,
       28,   30,   30,   30,   30,   30,   30,   30,   30,   32,
       33,   35,   58,  773,   33,   34,   35,   36,   34,   37,
       60,   38,   63,   60,   32,   32,   33,   35,   32,   33,

       35,   34,   37,   36,   34,   37,   36,   38,   37,   58,
       38,   33,   64,   35,   38,   34,  772,   60,  771,   63,
       60,   32,   32,   33,   35,   32,   33,   35,   34,   37,
       36,   34,   37,   36,   38,   37,   39,   38,   40,   64,
      770,   38,   40,   41,  763,   42,   39,   42,   43,   44,
      760,   65,   39,   43,   40,   39,   45,   40,   41,   41,
      757,   89,   41,   42,   43,   44,   42,   43,   44,   40,
      756,   45,   45,   39,   90,   45,  738,   59,   65,   39,
       43,   40,   39,   59,   40,   41,   41,   46,   89,   41,
       42,   43,   44,   42,   43,   44,   47,   48,   45,   45,

       54,   90,   45,   46,   59,   53,   46,   46,   82,   91,
       59,   82,   47,   48,   54,   47,   48,   53,   92,   48,
      735,   96,  731,  730,   94,   95,  717,   54,  716,  697,
       46,  696,   53,   46,   46,   82,   91,   73,   82,   47,
       48,   54,   47,   48,   53,   92,   48,   51,   51,   51,
       51,   94,   95,   73,   51,   51,   73,   51,   96,   61,
       51,   61,   51,   61,   51,   51,   51,   51,   51,   62,
      148,  151,  155,  174,   51,   51,   51,   51,   62,   62,
       73,   51,   51,   73,   51,   62,   61,   51,   61,   51,
       61,   51,   51,   51,   51,   51,   62,   66,   66,   66,

       66,   66,   66,   66,   66,   62,   62,  148,  151,  155,
      174,  681,   62,   67,   67,   67,   67,   67,   67,   67,
       67,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       69,   69,   69,   69,   69,   69,   69,   69,   71,   71,
       71,   71,   71,   71,   71,   71,   72,   93,   74,  680,
      632,   93,   75,   76,   97,   98,   99,   77,  100,  631,
      101,  102,   72,  103,   74,   72,   72,   74,   75,   76,
       74,   75,   76,   77,   93,  616,   77,   77,   93,  192,
       78,   97,   98,   99,  595,  100,   78,  101,  102,   72,
      103,   74,   72,   72,   74,   75,   76,   74,   75,   76,

       77,   79,   78,   77,   77,   78,   80,   79,  104,  105,
      594,   81,   84,  593,  106,  108,  192,   79,  109,   80,
       79,   83,   80,   81,  110,   80,   84,   81,   84,   78,
       81,   84,   78,  592,   79,  104,  105,   83,  591,  590,
       83,  106,  108,   83,   79,  109,   80,   79,  585,   80,
       81,  110,   80,   84,   81,   84,   85,   81,   84,  111,
       86,   85,   87,  132,   83,  107,   86,   83,   88,  133,
       83,  134,   85,  135,   88,   85,   86,  137,   87,   86,
      107,   87,  138,  139,   88,   87,  111,   88,   85,  584,
      132,  574,  107,   86,  572,  524,  133,  523,  134,   85,

      135,   88,   85,   86,  137,   87,   86,  107,   87,  138,
      139,   88,   87,  495,   88,  112,  112,  112,  112,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  114,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  115,  115,  115,  115,  115,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  117,  117,  117,
      117,  117,  117,  117,  117,  118,  119,  120,  494,  462,
      142,  121,  136,  124,  119,  118,  143,  121,  461,  122,
      136,  118,  119,  120,  118,  119,  120,  121,  450,  124,
      121,  144,  124,  122,  449,  124,  122,  142,  397,  136,

      145,  119,  118,  143,  121,  122,  122,  136,  118,  119,
      120,  118,  119,  120,  121,  123,  124,  121,  144,  124,
      122,  127,  124,  122,  123,  125,  126,  145,  394,  146,
      128,  123,  359,  147,  123,  125,  129,  127,  291,  126,
      127,  125,  126,  127,  125,  126,  128,  290,  288,  128,
      287,  123,  129,  269,  149,  129,  146,  129,  123,  130,
      147,  123,  125,  202,  127,  130,  126,  127,  125,  126,
      127,  125,  126,  128,  131,  130,  128,  140,  130,  129,
      141,  149,  129,  150,  129,  152,  140,  153,  140,  141,
      131,  141,  130,  131,  154,  156,  268,  157,  215,  214,

      202,  175,  130,   49,  140,  130,  160,  141,   25,   24,
      150,  161,  152,  140,  153,  140,  141,  131,  141,   23,
      131,  154,  160,  156,  157,  160,  160,  161,  175,    9,
      161,  176,  156,  158,  158,  158,  158,  158,  158,  158,
      158,  159,  159,  159,  159,  159,  159,  159,  159,  160,
      156,  162,  160,  160,  161,  163,  164,  161,  176,  177,
      166,  167,  169,  178,  169,    8,  167,  162,    3,  179,
      162,  163,  164,  168,  163,  164,  166,  167,  169,  166,
      167,  169,    2,    0,  164,  181,  177,    0,  168,  168,
      178,  169,  168,  167,  162,  170,  179,  162,  163,  164,

      183,  163,  164,  166,  167,  169,  166,  167,  169,  171,
      172,  170,  181,  184,  170,  168,  168,  173,  185,  168,
      182,  186,  187,  171,  188,  171,  172,  183,  171,  172,
      182,  189,  190,  173,  191,  193,  173,  194,  170,  195,
      184,  170,  196,  197,  198,  185,  199,  200,  186,  187,
      171,  188,  171,  172,  201,  171,  172,  182,  189,  190,
      173,  191,  193,  173,  194,  203,  195,  206,  207,  196,
      197,  198,  204,  199,  200,  204,  205,  208,    0,  205,
      209,  201,  210,  210,  210,  210,  210,  210,  210,  210,
      226,    0,  203,  222,  206,  223,    0,  224,    0,  204,

      212,  225,  204,  205,  208,  207,  205,  209,  211,  211,
      211,  211,  211,  211,  211,  211,  212,  216,  217,  212,
      222,  212,  223,  216,  224,  218,  219,  226,  225,  227,
      228,    0,    0,  216,  217,  220,  216,  217,  217,  221,
      229,  218,  219,  212,  218,  219,  212,  230,  212,  232,
      216,  220,  233,  234,  220,  221,  227,  228,  221,  221,
      216,  217,  235,  216,  217,  217,  236,  229,  218,  219,
      237,  218,  219,  238,  230,  239,  232,  240,  220,  233,
      234,  220,  221,  241,  242,  221,  221,  243,  244,  235,
      245,  246,  247,  236,  248,  249,  250,  237,  251,  252,

      238,  253,  239,  254,  240,  255,  256,  257,  258,  259,
      241,  242,  260,  261,  243,  244,  262,  245,  246,  247,
      263,  264,  249,  250,    0,  251,  252,    0,  253,    0,
      254,  248,  255,  256,  257,  258,  259,  277,  278,  260,
      261,    0,  275,  262,  276,    0,    0,  263,  264,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  266,  266,
      266,  266,  266,  266,  266,  266,  267,  272,  273,  275,
      279,  276,  267,  274,  277,  278,  280,  281,  282,  283,
      284,  285,  267,  272,  273,  267,  272,  273,  286,  274,
      289,  292,  274,  293,  294,  295,  296,  279,  297,  267,

      298,  306,  299,  280,  281,  282,  283,  284,  285,  267,
      272,  273,  267,  272,  273,  286,  274,  289,  300,  274,
      293,  301,  295,  296,  302,  304,  303,  298,  292,  299,
      305,  294,  307,  308,  309,  297,  303,  310,  306,  311,
      312,  313,  314,  315,  316,  300,  317,  318,  301,  324,
        0,  302,  304,  325,    0,  303,  326,  305,    0,  307,
      308,  309,  321,  303,  310,    0,  311,  312,  313,  314,
      315,  316,  327,  317,  328,  329,  324,  321,  321,  330,
      325,  321,  303,  326,  318,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  331,  332,  333,  334,  335,  327,

      336,  328,  329,  337,  321,  321,  330,  338,  321,  339,
      340,  341,  342,  343,  344,  346,  347,  348,  349,  350,
      351,  331,  332,  352,  334,  335,  353,  336,  343,  344,
      337,  354,  355,  333,  338,  356,  339,  340,  341,  342,
      343,  344,  346,  347,  348,  349,  350,  351,  357,  360,
      352,  361,  362,  353,  365,  343,  344,  366,  354,  355,
      363,  363,  356,  364,  364,  367,  368,  369,  370,  371,
      373,  374,  376,  377,    0,  357,  360,    0,  361,  362,
        0,  365,    0,    0,  366,  380,  381,  363,  363,  382,
      364,  364,  383,  368,  369,  370,  371,  373,  374,  376,

      377,  379,  367,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  380,  381,  384,  385,  382,  379,  386,  383,
      379,  387,  379,  388,  389,  390,  391,  392,  393,  395,
      396,  398,  399,  400,  401,  402,  403,  404,  405,  406,
      407,  384,  385,  408,  379,  386,  409,  379,  387,  379,
      388,  389,  390,  391,  392,  393,  395,  396,  398,  399,
      400,  401,  402,  403,  404,  405,  406,  407,  410,  411,
      408,  412,  413,  409,  414,  415,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  429,  431,  428,
      432,  433,  430,  434,  435,  410,  411,  428,  412,  413,

      430,  414,  415,  417,  418,  419,  420,  421,  422,  423,
      424,  425,  426,  427,  429,  431,  428,  432,  433,  430,
      434,  435,  436,  437,  428,  438,  439,  430,  440,  441,
      442,  443,  444,  445,  446,  447,  448,  451,  436,  452,
      453,  436,  454,  467,  455,  456,  457,  458,  459,  460,
      437,  463,  438,  439,  464,  440,  441,  442,  443,  444,
      465,  446,  447,  448,  451,  436,  452,  453,  436,  454,
      445,  455,  456,  457,  458,  459,  460,  466,  463,  468,
      467,  464,  469,  470,  471,  472,  473,  465,  474,  475,
      476,  477,  478,  479,  480,  481,  482,  483,  484,  485,

      486,  487,  488,  489,  466,  492,  468,  493,  496,  469,
      470,  471,  472,  473,  497,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      489,  498,  492,  499,  493,  496,  500,  501,  502,  503,
      504,  497,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  514,  515,  516,  517,  518,  519,  520,  498,  521,
      499,  522,  525,  500,  501,  502,  503,  504,  526,  505,
      506,  507,  508,  509,  510,  511,  512,  513,  514,  515,
      516,  517,  518,  519,  520,  527,  521,  528,  522,  525,
      529,  530,  531,  532,  533,  526,  534,  535,  536,  537,

      538,  541,  542,  543,  544,  545,  546,  547,  548,  551,
      552,  553,  527,  554,  528,  555,  556,  529,  530,  531,
      532,  533,  557,  534,  535,  536,  537,  538,  541,  542,
      543,  544,  545,  546,  547,  548,  551,  552,  553,  558,
      554,  559,  555,  556,  560,  561,  562,  563,  564,  557,
      565,  566,  567,  568,  569,  570,  571,  573,  575,  576,
      577,  578,  579,  582,  583,  586,  558,  587,  559,  588,
      589,  560,  561,  562,  563,  564,  598,  565,  566,  567,
      568,  569,  570,  571,  573,  575,  576,  577,  578,  579,
      582,  583,  586,  599,  587,  601,  588,  589,  602,  604,

      605,  606,  607,  598,  608,  609,  610,  611,  612,  613,
      614,  615,  617,  618,  619,  620,  621,  622,  623,  624,
      599,  626,  601,  628,  629,  602,  604,  605,  606,  607,
      630,  608,  609,  610,  611,  612,  613,  614,  615,  617,
      618,  619,  620,  621,  622,  623,  624,  633,  626,  634,
      628,  629,  637,  638,  639,  640,  643,  630,  644,  645,
      646,  647,  649,  651,  652,  653,  654,  655,  656,  659,
      660,  661,  662,  664,  633,  665,  634,  666,  667,  637,
      638,  639,  640,  643,  668,  644,  645,  646,  647,  649,
      651,  652,  653,  654,  655,  656,  659,  660,  661,  662,

      664,  669,  665,  670,  666,  667,  671,  672,  673,  674,
      675,  668,  678,  679,  682,  683,  684,  685,  686,  687,
      690,  691,  692,  693,  694,  695,  698,  699,  669,  700,
      670,  701,  702,  671,  672,  673,  674,  675,  703,  678,
      679,  682,  683,  684,  685,  686,  687,  690,  691,  692,
      693,  694,  695,  698,  699,  704,  700,  705,  701,  702,
      706,  707,  708,  709,  710,  703,  711,  712,  713,  718,
      719,  720,  721,  722,  723,  732,  733,  734,  736,  737,
      739,  742,  704,  743,  705,  744,  745,  706,  707,  708,
      709,  710,  746,  711,  712,  713,  718,  719,  720,  721,

      722,  723,  732,  733,  734,  736,  737,  739,  742,  747,
      743,  748,  744,  745,  749,  750,  751,  758,  761,  746,
      764,  765,  766,  767,  768,  769,  774,  775,  776,  778,
      780,  781,  784,  785,  790,  791,  747,  796,  748,  797,
      798,  749,  750,  751,  758,  761,  799,  764,  765,  766,
      767,  768,  769,  774,  775,  776,  778,  780,  781,  784,
      785,  790,  791,  800,  796,  801,  797,  798,  806,  807,
      808,  809,  812,  799,  813,  816,  817,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      800,    0,  801,    0,    0,  806,  807,  808,  809,  812,

        0,  813,  816,  817,  823,    0,  823,  825,  825,  825,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822
    } ;

static yyconst flex_int16_t yy_rule_linenum[100] =
    {   0,
       77,   80,   82,   84,   88,   89,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
      135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  155,
      156,  158,  159,  160,  161,  162,  163,  165,  166,  169,
      174,  175,  176,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  188,  194,  200,  206,  212,  218,  224

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/options/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached Scanner and Parser
 *
 *  Copyright (C) 2011 DataDifferental, http://datadifferential.com
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 38 "libmemcached/options/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM config_get_extra(yyscanner)

static void get_lex_chars(char* buffer, int& result, int max_size, Context *context)
{
  if (context->pos >= context->length)
  {
    result= YY_NULL;
  }
  else
  {
    result= context->length - context->pos;
    result > (int)max_size ? result = max_size : 0;
    memcpy(buffer, context->buf + context->pos, result);
    context->pos += result;
  }
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1368 "libmemcached/options/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * out_str ,yyscan_t yyscanner );

int config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int line_number ,yyscan_t yyscanner );

int config_get_column  (yyscan_t yyscanner );

void config_set_column (int column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 74 "libmemcached/options/scanner.l"



#line 1675 "libmemcached/options/scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 823 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2211 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 100 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 100 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 101 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 77 "libmemcached/options/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 80 "libmemcached/options/scanner.l"
{ yylval->number = atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 82 "libmemcached/options/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 84 "libmemcached/options/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 88 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS_OPTION; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 93 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 95 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 96 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 97 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 98 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 99 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CACHE_LOOKUPS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CACHE_LOOKUPS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _CORK; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return DISTRIBUTION; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 115 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_HASH; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_HASH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_WEIGHTED; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_WEIGHTED; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NOREPLY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 126 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 131 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 132 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 133 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 134 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 135 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 136 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 137 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 138 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 139 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 140 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 141 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 142 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 143 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 144 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 145 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 146 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 147 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 148 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 149 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 150 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 151 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 152 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 153 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 155 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 156 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 158 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return INCLUDE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 159 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RESET; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 160 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PARSER_DEBUG; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 162 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return END; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 163 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return ERROR; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 165 "libmemcached/options/scanner.l"
{ return TRUE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 166 "libmemcached/options/scanner.l"
{ return FALSE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 174 "libmemcached/options/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 175 "libmemcached/options/scanner.l"
{ return MODULA; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 176 "libmemcached/options/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 178 "libmemcached/options/scanner.l"
{ return MD5; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 179 "libmemcached/options/scanner.l"
{ return CRC; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 180 "libmemcached/options/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 181 "libmemcached/options/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 182 "libmemcached/options/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 183 "libmemcached/options/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 184 "libmemcached/options/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 185 "libmemcached/options/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 186 "libmemcached/options/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 188 "libmemcached/options/scanner.l"
{ 
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return HOSTNAME_WITH_PORT;
    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 194 "libmemcached/options/scanner.l"
{ 
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return HOSTNAME;
    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 200 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return IPADDRESS_WITH_PORT;
    }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 206 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 212 "libmemcached/options/scanner.l"
{ 
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return STRING;
    }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 218 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return QUOTED_STRING;
    }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 224 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 229 "libmemcached/options/scanner.l"
ECHO;
	YY_BREAK
#line 2328 "libmemcached/options/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of config_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 823 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 823 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 822);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void config__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
/* %if-c-only */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void config_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 229 "libmemcached/options/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  config_lex_destroy(scanner);
}


