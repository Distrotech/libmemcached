#line 2 "libmemcached/options/scanner.cc"
#line 22 "libmemcached/options/scanner.l"

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-parameter"

#include <libmemcached/options/context.h>
#include <libmemcached/options/parser.h>
#include <libmemcached/options/string.h>
#include <libmemcached/options/symbol.h>

#define YY_EXTRA_TYPE Context*




#line 19 "libmemcached/options/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 88
#define YY_END_OF_BUFFER 89
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[747] =
    {   0,
        0,    0,   89,   87,    5,    5,    1,   87,   87,   87,
        2,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,    0,   86,   71,    0,    0,
        0,    2,    3,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,    4,   85,   85,    2,    3,
       85,   76,   85,   67,   85,   85,   85,   85,   85,   85,
       75,   85,   85,   85,   85,   85,   85,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,    4,    0,   85,
        2,    3,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   69,   71,   71,   71,   71,
       71,    0,    0,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,    4,
       85,   85,    3,   85,   65,   68,   70,   85,    0,   81,
       85,   85,   85,   85,   85,   64,   85,   71,   71,   71,
       71,   71,   71,    0,    0,    0,    0,    0,    0,   71,
       71,   71,   71,   71,    0,    0,   71,   71,   71,    0,
        0,   71,   71,   71,    0,    0,    0,   71,    0,   71,

        4,    0,   85,    3,   85,    0,   85,   85,   85,   85,
       73,   82,   74,   85,   71,   71,   71,   71,   71,    0,
       19,    0,    0,    0,    0,    0,    0,    0,   71,   71,
        0,    0,   71,   71,    0,    0,   71,   71,   71,    0,
        0,   71,    0,    0,   71,    0,    0,    0,    0,    0,
        0,    0,    0,   71,    4,   84,   85,   85,   85,   85,
       79,   77,   63,   83,   66,   71,   71,   71,   71,   71,
        0,    0,    0,    0,    0,    0,    0,    0,   71,   71,
        0,    0,   71,   71,    0,    0,   71,    0,    0,   71,
        0,    0,   71,    0,    0,   71,    0,    0,    0,    0,

        0,    0,    0,    0,   71,   84,   85,   80,   78,    0,
        0,    0,    0,   71,   71,   71,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
        0,   71,    0,    0,    0,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,   71,    0,    0,    0,    0,
       60,    0,    0,   59,    0,    0,   84,   85,    0,    0,
        0,    0,   71,    0,    0,   71,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       71,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   72,    0,    0,    0,    0,
       71,    0,    0,   71,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   71,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   58,   57,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   71,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   48,   47,    0,    0,    0,    0,    0,    0,

        0,    0,    9,    8,    0,    0,    0,    0,    0,    0,
        0,    0,   71,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   61,   62,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   50,   49,    0,    0,   52,    0,    0,   51,    0,
        0,    0,    0,    0,    0,    0,    0,   71,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   36,   35,    0,    0,    0,    0,   40,   39,
        0,    0,    0,    0,    0,   56,    0,   55,    0,    0,
        0,    0,    0,    0,    0,    0,   18,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   32,   31,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,   37,    0,    0,    0,    0,   11,
       10,   13,   12,   15,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   17,   16,    0,    0,    0,
       25,    0,    0,   24,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   27,    0,

       26,    0,    0,    0,    0,    0,    0,   44,   46,   43,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   23,   22,   30,   29,    0,    0,    0,
        0,   21,   20,    0,    0,    0,    0,    0,    0,    0,
        0,   34,   33,   42,   41,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   11,   11,   11,   18,    1,    1,
       19,    1,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,    1,    1,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[751] =
    {   0,
        0,  722,  724, 2044, 2044, 2044, 2044,  716,  712,  693,
       65,   72,    0,   55,   50,   57,   71,   55,   62,   72,
       74,   78,   75,   63,  709,  701,  675,  132,  195,  103,
      208,  251,  215,  235,  228,  230,  237,  245,  265,  281,
      286,  294,  296,  311,  313,  327,  343,  354,  361,  370,
      672, 2044,  417,  305,   69,   77,   86,   75,  246,  291,
      362,  361,   90,   75,  127,  419,  416,  482,  525,  489,
      504,  502,  509,  511,  517,  539,  519,  560,  552,  566,
      554,  582,  584,  595,  601,  613,  627,  180,  223,  224,
      241,  272,  210,  275,  312,  317,  329,  321,  325,  404,

      333,  356,  377,  353,  355,  418,  409,  650,  678,  721,
      764,  685,  625,  700,  702,  714,  736,  743,  750,  777,
      755,  784,  791,  796,  804,  668,  427,  423,  428,  410,
      424,  786,  799,  436,  443,  476,  520,  529,  292,  519,
      517,  525,  568,  567,  574,  580,  580,  802,  591,  857,
      870,  709,  877,  856,  891,  893,  899,  901,  906,  916,
      921,  923,  928,  942,  934,  950,  957,  613,  632,  629,
      679,  678,  808,  743,  770,  768,  775,  798,  800,  891,
      909,  641,  915,  917,  916,  920,  922,  924,  948,  934,
      938,  957,  695,  950,  959,  968,  945,  795,  947,  966,

     1019, 1032, 1075, 2044, 1053, 1051, 1058, 1067, 1069, 1094,
     1099, 1101, 1110, 1119,  953,  973,  996, 1001,  998,  985,
     2044,  999, 1030, 1040, 1069, 1071, 1068, 1090, 1093, 1088,
     1089, 1092, 1090, 1102, 1107, 1108, 1117,  829, 1105, 1116,
     1118, 1109, 1122, 1123, 1116, 1130, 1130, 1142, 1133, 1147,
     1149, 1151, 1155, 1135, 2044, 1203, 1178, 1188, 1196, 1218,
     1223, 1229, 1236, 1243, 1248,  833,  850, 1162, 1182, 1214,
     1210, 1213, 1221,  663,  662, 1222,  622,  621, 1209,  869,
     1226, 1229,  969, 1230, 1227, 1228, 1006, 1222, 1224,  640,
     1234, 1238, 1010, 1237, 1240, 1237, 1253, 1255, 1255, 1260,

     1256, 1272, 1275, 1261, 1182, 1320, 1304, 1309, 1334, 1264,
     1267, 1283, 1284, 1288, 1293, 1300, 1304, 1305, 1307, 1311,
     1307, 1313, 1319, 1314,    0, 1323, 1324, 1327, 1328, 1331,
     1332, 1318, 1341, 1344, 1344, 1349, 1347, 1349, 2044, 1355,
     1358, 1356, 1360, 1353, 1361, 1307, 1365, 1379, 1370, 1383,
     2044, 1369, 1371, 2044, 1381, 1382, 1409, 1415, 1377, 1378,
     1405, 1407, 1409, 1397, 1401, 1404, 1417, 1418,  648, 1409,
     1427,  598, 1411, 1429, 1425, 1426, 1428, 1429, 1433, 1435,
     1438, 1430, 1431, 1446, 1448, 1437, 1450, 1449, 1451, 1463,
     1464, 1466, 1470, 1458, 1459, 1477, 1478, 1483, 1470, 1485,

     1471, 1484, 1486, 1483, 1484, 1512, 1484, 1488, 1487, 1500,
     1530, 1511, 1513, 1514,  632,  592, 1501, 1520, 1507, 1505,
     1524, 1512,  630,  590, 1518, 1519, 1510, 1511, 1549, 1517,
     1519, 1532, 1533, 1538, 1540, 1525, 1527, 1550, 1544, 1561,
     1552, 1552, 1555, 1576, 1577, 1567, 1577, 1581, 1571, 1580,
     1585, 2044, 2044, 1562, 1563, 1569, 1570, 1571, 1573, 1589,
     1590, 1584, 1586, 1585, 1586, 1587, 1606, 1606, 1613, 1619,
     1619, 1623, 1613, 1614, 1612, 1614,  609,  589, 1618, 1619,
     1618, 1620, 1629, 1630, 1628, 1629, 1626, 1628, 1627, 1646,
     1629, 1649, 2044, 2044, 1635, 1637, 1648, 1649, 1641, 1663,

     1662, 1654, 2044, 2044, 1667, 1670, 1681, 1682, 1680, 1681,
     1686, 1687, 1680, 1677, 1678, 1677, 1693, 1682, 1682, 1698,
     1686, 1700, 1702, 1688, 1690, 2044, 2044, 1706, 1710,  583,
      577, 1715, 1721, 1707, 1712,  576,  564,  537,  524,  476,
      474, 2044, 2044, 1714, 1734, 2044, 1718, 1736, 2044, 1740,
     1741, 1726, 1727, 1736, 1737, 1735, 1736,  496, 1747, 1749,
     1751, 1737, 1745, 1754, 1741, 1749, 1748, 1749,  450,  441,
     1753, 1758, 2044, 2044, 1776, 1778, 1767, 1770, 2044, 2044,
     1774, 1775, 1776, 1778, 1793, 2044, 1794, 2044, 1785, 1787,
     1783, 1784, 1800, 1801, 1787, 1789, 2044, 1805, 1806, 1795,

     1812, 1815, 1800, 1816, 1822, 1816, 1822, 2044, 2044, 1824,
     1829,  420,  372,  390,  387, 1835, 1838, 1839, 1840, 2044,
     2044, 1839, 1840, 1834, 1835,  386,  384, 1836, 1837, 1849,
     1850, 1847, 1854, 1846, 1852, 1858, 1849, 1860, 1861, 1863,
     1864, 1858, 1863, 2044, 2044, 1862, 1864, 1869, 1872, 2044,
     2044, 2044, 2044, 2044, 2044,  378,  369, 1877, 1878, 1902,
      365, 1894, 1905,  349, 1896, 1905, 1907, 1908, 1909, 1908,
     1909, 1911, 1913, 1914, 1915, 2044, 2044,  300,  284, 1903,
     2044,  306, 1905, 2044,  290, 1923, 1925, 1926, 1930, 1918,
     1924,  287,  274,  253,  252, 1933, 1938, 1941, 2044, 1944,

     2044, 1937, 1938,  240,  200, 1937, 1938, 2044, 2044, 2044,
     2044, 1956, 1957,  215,  196,  132,  120, 1946, 1947, 1961,
     1962, 1943, 1945, 2044, 2044, 2044, 2044, 1967, 1968, 1956,
     1957, 2044, 2044, 1976, 1977, 1961, 1962, 1981, 1986,  119,
      116, 2044, 2044, 2044, 2044, 2044, 2037,  126, 2040,  113
    } ;

static yyconst flex_int16_t yy_def[751] =
    {   0,
      746,    1,  746,  746,  746,  746,  746,  747,  746,  746,
      748,  746,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  749,  747,  747,  746,  746,  750,
      750,  750,  746,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      749,  746,   28,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  746,  750,  750,  750,  746,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,  746,  750,  750,
      750,  746,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,   53,   53,   53,   53,
       53,  746,  746,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,  746,
      750,  750,  746,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,   53,   53,   53,
       53,   53,   53,  746,  746,  746,  746,  746,  746,   53,
       53,   53,   53,   53,  746,  746,   53,   53,   53,  746,
      746,   53,   53,   53,  746,  746,  746,   53,  746,   53,

      746,  750,  750,  746,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,   53,   53,   53,   53,   53,  746,
      746,  746,  746,  746,  746,  746,  746,  746,   53,   53,
      746,  746,   53,   53,  746,  746,   53,   53,   53,  746,
      746,   53,  746,  746,   53,  746,  746,  746,  746,  746,
      746,  746,  746,   53,  746,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,   53,   53,   53,   53,   53,
      746,  746,  746,  746,  746,  746,  746,  746,   53,   53,
      746,  746,   53,   53,  746,  746,   53,  746,  746,   53,
      746,  746,   53,  746,  746,   53,  746,  746,  746,  746,

      746,  746,  746,  746,   53,  750,  750,  750,  750,  746,
      746,  746,  746,   53,   53,   53,  746,  746,  746,  746,
      746,  746,  746,  746,   53,  746,  746,  746,  746,  746,
      746,   53,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,   53,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  750,  750,  746,  746,
      746,  746,   53,  746,  746,   53,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
       53,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  750,  746,  746,  746,  746,
       53,  746,  746,   53,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,   53,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,   53,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,   53,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,   53,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,    0,  746,  746,  746,  746
    } ;

static yyconst flex_int16_t yy_nxt[2118] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       11,   11,   11,   11,   11,   11,   11,   12,    7,    4,
       13,   13,   14,   15,   16,   17,   13,   18,   19,   20,
       13,   13,   21,   13,   13,   13,   13,   22,   23,   24,
       13,   13,   13,   13,   13,   13,    4,   13,   13,   14,
       15,   16,   17,   13,   18,   19,   20,   13,   13,   21,
       13,   13,   13,   13,   22,   23,   24,   13,   13,   13,
       13,   13,   13,   31,   36,   32,   32,   32,   32,   32,
       32,   32,   33,   33,   33,   33,   33,   33,   33,   34,
       37,   39,   35,   41,   38,   42,   43,   44,   47,   49,

       50,   36,   48,   90,   40,   91,   92,   30,   45,   93,
       30,   30,  105,  106,   46,   67,   34,   37,   39,   35,
       41,   38,   42,   43,   44,   47,   49,   50,   30,   48,
       90,   40,   91,   92,  745,   45,   93,  744,  727,  105,
      106,   46,   53,   53,   53,   53,   53,   53,   53,   30,
      726,  107,   53,   54,   55,   56,   53,   53,   53,   57,
       58,   53,   53,   53,   53,   59,   53,   60,   53,   61,
       62,   63,   64,   65,   53,   53,   53,   53,  107,   53,
       54,   55,   56,   53,   53,   53,   57,   58,   53,   53,
       53,   53,   59,   53,   60,   53,   61,   62,   63,   64,

       65,   53,   53,   53,   53,   66,   66,   66,   66,   66,
       66,   66,   30,  127,  725,   30,   30,  132,   68,   68,
       68,   68,   68,   68,   68,   70,   70,   70,   70,   70,
       70,   70,   30,  724,   30,   30,   30,   30,   30,   30,
      127,   30,   30,   30,   30,   30,  719,  718,  128,   30,
       72,   73,   30,   30,   30,   30,  133,  129,   30,   31,
       74,   69,   69,   69,   69,   69,   69,   69,   71,   30,
      711,  710,   30,   30,   30,  128,   30,   72,   73,  130,
       94,   30,   75,   30,  129,   30,   95,   74,   30,   30,
       30,   30,  709,   30,   30,   71,   76,   30,   30,  185,

       30,   30,   30,   30,   30,  708,  130,   94,  701,   75,
      131,   30,  134,   95,   78,   30,   79,   30,   30,   30,
       30,   30,   77,   76,  699,   96,   81,   30,   97,   80,
      697,   30,   30,   88,   30,   30,   82,  131,  186,  134,
       30,   78,   30,   79,  135,   89,  696,   30,  136,   77,
       30,   30,   96,  137,  138,   97,   80,   30,   30,   30,
       88,   30,   30,   82,   83,   30,  139,  684,   30,   30,
      142,  135,   89,   30,   30,  136,   84,   30,   30,  143,
      137,  138,   98,  681,   99,  101,  100,  677,  146,   30,
      147,   83,   85,  139,  102,  103,  676,  142,   86,  144,

       30,  104,  655,   84,  654,  645,  143,   30,  644,   98,
       87,   99,  101,  100,  145,  146,   30,  147,  643,   85,
       30,  102,  103,   30,   30,   86,  144,  642,  104,  108,
      108,  108,  108,  108,  108,  108,  140,   87,   53,   53,
       53,  145,  148,  141,   53,   53,  149,  168,  169,  172,
       53,  173,   53,  170,   53,   53,   53,   53,   53,  609,
      180,  171,   30,  140,  181,   53,   53,   53,  608,  148,
      141,   53,   53,  149,  168,  169,  172,   53,  173,   53,
      170,   53,   53,   53,   53,   53,   30,  180,  171,   30,
      109,  181,  110,  110,  110,  110,  110,  110,  110,  112,

      112,  112,  112,  112,  112,  112,   30,  182,   30,   30,
       30,   30,   30,   30,  597,   30,   30,   30,   30,   30,
      584,   30,  583,   30,   30,   30,   30,   30,   30,   30,
      117,  582,   30,   31,  182,  111,  111,  111,  111,  111,
      111,  111,  113,   30,  581,  183,   30,   30,   30,  114,
       30,  115,  184,  187,  188,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  189,   30,   30,  113,
       30,   30,  183,   30,   30,  190,  114,  116,  115,  184,
      187,  188,  580,  119,  118,   30,   30,  195,   30,   30,
       30,   30,   30,  189,  579,  574,  120,  192,   30,   30,

       30,  573,   30,   30,  116,   30,   30,  527,   30,   30,
      119,  118,   30,  193,  191,  194,  122,   30,  123,  200,
       30,   30,  121,  120,  192,  124,  196,  526,   30,   30,
       30,   30,   30,   30,   30,   30,  474,  473,  466,  465,
      193,   30,  194,  122,  420,  123,  200,   30,  231,  121,
      215,  126,  124,  154,  125,  417,  216,  217,  339,   30,
      150,  150,  150,  150,  150,  150,  150,  324,  323,  321,
      320,   30,   30,   30,   52,   30,   30,  215,  126,   27,
      154,  125,   30,  216,  217,   30,   30,  232,  151,  151,
      151,  151,  151,  151,  151,  153,  153,  153,  153,  153,

      153,  153,  243,  218,   30,   27,   30,   30,   30,   30,
       30,   52,   29,   30,   30,  219,   30,  109,   30,   28,
       27,   30,   30,  746,   30,   30,  155,   25,   30,  109,
      218,  152,  152,  152,  152,  152,  152,  152,  157,  156,
       30,  244,  219,   30,   30,  746,   30,   30,   30,  746,
       30,   30,  746,  155,   30,   30,  158,   30,   30,   30,
       30,  746,   30,   30,  746,  157,  156,   30,   30,  746,
      160,   30,   30,  746,  111,  111,  111,  111,  111,  111,
      111,   30,  159,  158,   30,   30,  163,  223,   30,   30,
      161,   30,   30,  746,  224,   30,   30,  160,   30,   30,

       30,   30,  251,   30,   30,  162,  225,  174,   30,  197,
       30,   30,   30,  163,  223,  220,  175,  161,  176,  226,
      177,  224,  227,   30,  164,  165,  221,  746,  167,  178,
       30,  179,  162,  225,  174,  166,  288,   30,  228,  198,
      310,  252,   30,  175,  746,  176,  226,  177,  199,  227,
       30,  164,  165,  746,  222,  167,  178,  312,  179,  746,
       30,  746,  166,   30,   30,  228,  198,  201,  201,  201,
      201,  201,  201,  201,   30,  289,  326,   30,  202,  311,
      203,  203,  203,  203,  203,  203,  203,  204,  204,  204,
      204,  204,  204,  204,  205,   30,  313,   30,   30,   30,

       30,   30,   30,   30,  746,   30,   30,   30,   30,   30,
       30,  746,  746,   30,   30,  327,   30,  746,  746,  207,
       30,  205,  208,   30,   30,   30,  229,   30,   30,   30,
       30,   30,   30,  230,  746,   30,   30,   30,   30,   30,
      746,   30,   30,  233,  209,   30,   30,  206,  211,   30,
       30,  234,   30,  229,   30,  235,  210,   30,   30,  236,
      230,   30,   30,  237,   30,   30,  213,   30,  238,   30,
      233,  209,  239,  240,   30,  211,  330,  241,  234,  212,
       30,  242,  235,  210,  245,  250,  236,  253,   30,  246,
      237,  254,  247,  213,  214,  238,   30,  266,  248,  239,

      240,  249,  746,   30,  241,  746,  212,  746,  242,  746,
      267,  245,  250,  335,  253,  331,  246,  342,  254,  247,
      746,  214,  268,  269,  266,  248,  270,  271,  249,  255,
      255,  255,  255,  255,  255,  255,   30,  267,  746,   30,
       30,  272,  256,  256,  256,  256,  256,  256,  256,  268,
      269,  746,  336,  270,  271,   30,  343,   30,   30,   30,
       30,   30,   30,  746,  259,   30,   30,  260,  272,  273,
      261,   30,  746,   30,   30,   30,   30,   30,   30,   30,
      746,  262,   30,  202,  274,  257,  257,  257,  257,  257,
      257,  257,  258,  263,  746,  275,  273,   30,   30,   30,

      746,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      276,  274,  277,   30,   30,   30,  278,   30,   30,  258,
      263,   30,  275,   30,  279,  280,   30,   30,  281,  746,
      746,  282,  264,  283,  284,  285,  286,  276,  746,  277,
       30,  287,  290,  278,  291,   30,  292,   30,  293,  294,
      295,  279,  280,  296,  297,  281,   30,  265,  282,  264,
      283,  284,  285,  286,  298,   30,  299,  300,  287,  290,
      301,  291,  302,  292,  303,  293,  294,  295,  304,  305,
      296,  297,   30,  746,  265,   30,  202,  746,  746,  355,
      746,  298,   30,  299,  300,   30,   30,  301,  746,  302,

       30,  303,  314,   30,   30,  304,  305,   30,  308,  746,
       30,   30,  307,  306,  306,  306,  306,  306,  306,  306,
      746,  315,   30,  746,   30,   30,   30,   30,  356,  314,
       30,   30,  309,   30,   30,  316,   30,   30,  317,  307,
       30,  318,   30,   30,   30,  319,  322,   30,  315,   30,
       30,   30,   30,  325,  328,   30,   30,  329,  332,  333,
      334,  337,  316,  338,   30,  317,  340,  746,  318,   30,
      341,  344,  319,  322,  345,   30,  346,  347,  348,  349,
      325,  328,   30,  350,  329,  332,  333,  334,  337,   30,
      338,  351,  352,  340,   30,  353,  354,  341,  344,  359,

      364,  345,  360,  346,  347,  348,  349,  746,   30,  746,
      350,   30,   30,   30,  396,  746,   30,   30,  351,  352,
      361,  362,  353,  354,   30,  363,  359,   30,   30,  360,
      357,  357,  357,  357,  357,  357,  357,  358,   30,  365,
      366,   30,   30,  367,  368,  369,  370,  361,  362,  371,
       30,  372,  363,  397,  373,   30,  374,  375,  376,  377,
      378,  379,  380,  381,  358,  382,   30,  366,  383,  384,
      367,  368,  369,  370,  385,  386,  371,  387,  372,  388,
       30,  373,  389,  374,  375,  376,  377,  378,  379,  380,
      381,  394,  382,  390,  391,  383,  384,  392,  393,  395,

      398,  385,  386,  399,  387,  400,  388,  401,  402,  389,
      403,  404,  405,   30,  407,  408,   30,   30,  394,   30,
      390,  391,   30,   30,  392,  393,  395,  398,  746,  409,
      399,  410,  400,  411,  401,  402,  412,  403,  404,  405,
      413,  407,  408,  414,  415,  416,  418,  419,  421,  422,
      423,  424,  425,  426,  406,   30,  409,  427,  410,  428,
      411,   30,  429,  412,  430,  431,  432,  413,  433,  434,
      414,  415,  416,  418,  419,  421,  422,  423,  424,  425,
      426,  406,  435,  436,  427,  437,  428,  438,  439,  429,
      440,  430,  431,  432,  441,  433,  434,  442,  443,  444,

      445,  448,  451,  446,  452,  449,  453,  454,  455,  435,
      436,  447,  437,  450,  438,  439,   30,  440,  456,   30,
       30,  441,  457,  458,  442,  443,  444,  445,  448,  451,
      446,  452,  449,  453,  454,  455,  459,  460,  447,  462,
      450,  463,  464,  467,  468,  456,  469,  470,  471,  457,
      458,  472,  475,  476,  477,  478,  479,  481,   30,  482,
      483,  484,  485,  459,  486,  487,  462,  488,  463,  464,
      467,  468,  489,  469,  470,  471,  461,  490,  472,  475,
      476,  477,  478,  491,  481,  492,  482,  483,  484,  485,
      493,  486,  487,  494,  488,  480,  495,  496,  497,  489,

      498,  499,  500,  501,  490,  502,  503,  504,  505,  506,
      491,  507,  492,  508,  509,  510,  511,  493,  512,  513,
      494,  514,  515,  495,  496,  497,  516,  498,  499,  500,
      501,  517,  502,  503,  504,  505,  506,  518,  507,  519,
      508,  509,  510,  511,  520,  512,  513,  521,  514,  515,
      522,  523,  524,  516,  525,  528,  529,  530,  517,  531,
      532,  533,  534,  535,  518,  536,  519,  537,  538,  539,
      540,  520,  541,  542,  521,  543,  544,  522,  523,  524,
      545,  525,  528,  529,  530,  546,  531,  532,  533,  534,
      535,  547,  536,  548,  537,  538,  539,  540,  549,  541,

      542,  550,  543,  544,  551,  552,  553,  545,  554,  555,
      556,  557,  546,  558,  559,  560,  561,  562,  547,  563,
      548,  564,  565,  566,  567,  549,  568,  569,  550,  570,
      571,  551,  552,  553,  572,  554,  555,  556,  557,  575,
      558,  559,  560,  561,  562,  576,  563,  577,  564,  565,
      566,  567,  578,  568,  569,  585,  570,  571,  586,  587,
      588,  572,  589,  590,  591,  592,  575,  593,  594,  595,
      596,  598,  576,  599,  577,  600,  601,  602,  603,  578,
      604,  605,  585,  606,  607,  586,  587,  588,  610,  589,
      590,  591,  592,  611,  593,  594,  595,  596,  598,  612,

      599,  613,  600,  601,  602,  603,  614,  604,  605,  615,
      606,  607,  616,  617,  618,  610,  619,  620,  621,  622,
      611,  623,  624,  625,  626,  627,  612,  628,  613,  629,
      630,  631,  632,  614,  633,  634,  615,  635,  636,  616,
      617,  618,  637,  619,  620,  621,  622,  638,  623,  624,
      625,  626,  627,  639,  628,  640,  629,  630,  631,  632,
      641,  633,  634,  646,  635,  636,  647,  648,  649,  637,
      650,  651,  652,  653,  638,  656,  657,  658,  659,  660,
      639,  661,  640,  662,  663,  664,  665,  641,  666,  667,
      646,  668,  669,  647,  648,  649,  670,  650,  651,  652,

      653,  671,  656,  657,  658,  659,  660,  672,  661,  673,
      662,  663,  664,  665,  674,  666,  667,  675,  668,  669,
      678,  679,  680,  670,  682,  683,  685,  686,  671,  687,
      688,  689,  690,  691,  672,  692,  673,  693,  694,  695,
      698,  674,  700,  702,  675,  703,  704,  678,  679,  680,
      705,  682,  683,  685,  686,  706,  687,  688,  689,  690,
      691,  707,  692,  712,  693,  694,  695,  698,  713,  700,
      702,  714,  703,  704,  715,  716,  717,  705,  720,  721,
      722,  723,  706,  728,  729,  730,  731,  732,  707,  733,
      712,  734,  735,  736,  737,  713,  738,  739,  714,  740,

      741,  715,  716,  717,  742,  720,  721,  722,  723,  743,
      728,  729,  730,  731,  732,  746,  733,  746,  734,  735,
      736,  737,  746,  738,  739,  746,  740,  741,  746,  746,
      746,  742,  746,  746,  746,  746,  743,   26,  746,   26,
       51,   51,   51,    3,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746
    } ;

static yyconst flex_int16_t yy_chk[2118] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   11,   15,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   12,   12,   12,   14,
       16,   17,   14,   18,   16,   19,   20,   21,   22,   23,

       24,   15,   22,   55,   17,   56,   57,   30,   21,   58,
       30,   30,   63,   64,   21,  750,   14,   16,   17,   14,
       18,   16,   19,   20,   21,   22,   23,   24,  748,   22,
       55,   17,   56,   57,  741,   21,   58,  740,  717,   63,
       64,   21,   28,   28,   28,   28,   28,   28,   28,   30,
      716,   65,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   65,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   29,   29,   29,   29,   29,
       29,   29,   31,   88,  715,   31,   31,   93,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,
       33,   33,   35,  714,   36,   35,   35,   36,   36,   34,
       88,   37,   34,   34,   37,   37,  705,  704,   89,   38,
       35,   36,   38,   38,   31,   32,   93,   90,   32,   32,
       37,   32,   32,   32,   32,   32,   32,   32,   34,   39,
      695,  694,   39,   39,   35,   89,   36,   35,   36,   91,
       59,   34,   38,   37,   90,   40,   59,   37,   40,   40,
       41,   38,  693,   41,   41,   34,   39,   32,   42,  139,

       43,   42,   42,   43,   43,  692,   91,   59,  685,   38,
       92,   39,   94,   59,   41,   44,   42,   45,   44,   44,
       45,   45,   40,   39,  682,   60,   44,   40,   60,   43,
      679,   46,   41,   54,   46,   46,   45,   92,  139,   94,
       42,   41,   43,   42,   95,   54,  678,   47,   96,   40,
       47,   47,   60,   97,   98,   60,   43,   44,   48,   45,
       54,   48,   48,   45,   46,   49,   99,  664,   49,   49,
      101,   95,   54,   46,   50,   96,   47,   50,   50,  102,
       97,   98,   61,  661,   61,   62,   61,  657,  104,   47,
      105,   46,   48,   99,   62,   62,  656,  101,   49,  103,

       48,   62,  627,   47,  626,  615,  102,   49,  614,   61,
       50,   61,   62,   61,  103,  104,   50,  105,  613,   48,
       67,   62,   62,   67,   67,   49,  103,  612,   62,   66,
       66,   66,   66,   66,   66,   66,  100,   50,   53,   53,
       53,  103,  106,  100,   53,   53,  107,  127,  128,  130,
       53,  131,   53,  129,   53,   53,   53,   53,   53,  570,
      134,  129,   67,  100,  135,   53,   53,   53,  569,  106,
      100,   53,   53,  107,  127,  128,  130,   53,  131,   53,
      129,   53,   53,   53,   53,   53,   68,  134,  129,   68,
       68,  135,   68,   68,   68,   68,   68,   68,   68,   70,

       70,   70,   70,   70,   70,   70,   72,  136,   71,   72,
       72,   71,   71,   73,  558,   74,   73,   73,   74,   74,
      541,   75,  540,   77,   75,   75,   77,   77,   68,   69,
       77,  539,   69,   69,  136,   69,   69,   69,   69,   69,
       69,   69,   71,   76,  538,  137,   76,   76,   72,   73,
       71,   75,  138,  140,  141,   73,   79,   74,   81,   79,
       79,   81,   81,   75,   78,   77,  142,   78,   78,   71,
       80,   69,  137,   80,   80,  143,   73,   76,   75,  138,
      140,  141,  537,   79,   78,   76,   82,  147,   83,   82,
       82,   83,   83,  142,  536,  531,   80,  144,   79,   84,

       81,  530,   84,   84,   76,   85,   78,  478,   85,   85,
       79,   78,   80,  145,  143,  146,   83,   86,   84,  149,
       86,   86,   82,   80,  144,   85,  147,  477,   82,  113,
       83,   87,  113,  113,   87,   87,  424,  423,  416,  415,
      145,   84,  146,   83,  372,   84,  149,   85,  182,   82,
      168,   87,   85,  113,   86,  369,  169,  170,  290,   86,
      108,  108,  108,  108,  108,  108,  108,  278,  277,  275,
      274,  113,  126,   87,   51,  126,  126,  168,   87,   27,
      113,   86,  109,  169,  170,  109,  109,  182,  109,  109,
      109,  109,  109,  109,  109,  112,  112,  112,  112,  112,

      112,  112,  193,  171,  114,   26,  115,  114,  114,  115,
      115,   25,   10,  152,  126,  172,  152,  152,  116,    9,
        8,  116,  116,    3,  109,  110,  114,    2,  110,  110,
      171,  110,  110,  110,  110,  110,  110,  110,  116,  115,
      117,  193,  172,  117,  117,    0,  114,  118,  115,    0,
      118,  118,    0,  114,  119,  152,  117,  119,  119,  121,
      116,    0,  121,  121,    0,  116,  115,  110,  111,    0,
      118,  111,  111,    0,  111,  111,  111,  111,  111,  111,
      111,  120,  117,  117,  120,  120,  121,  174,  122,  118,
      119,  122,  122,    0,  175,  123,  119,  118,  123,  123,

      124,  121,  198,  124,  124,  120,  176,  132,  125,  148,
      111,  125,  125,  121,  174,  173,  132,  119,  132,  177,
      133,  175,  178,  120,  122,  123,  173,    0,  125,  133,
      122,  133,  120,  176,  132,  124,  238,  123,  179,  148,
      266,  198,  124,  132,    0,  132,  177,  133,  148,  178,
      125,  122,  123,    0,  173,  125,  133,  267,  133,    0,
      154,    0,  124,  154,  154,  179,  148,  150,  150,  150,
      150,  150,  150,  150,  151,  238,  280,  151,  151,  266,
      151,  151,  151,  151,  151,  151,  151,  153,  153,  153,
      153,  153,  153,  153,  154,  155,  267,  156,  155,  155,

      156,  156,  154,  157,    0,  158,  157,  157,  158,  158,
      159,    0,    0,  159,  159,  280,  151,    0,    0,  159,
      160,  154,  159,  160,  160,  161,  180,  162,  161,  161,
      162,  162,  163,  181,    0,  163,  163,  155,  165,  156,
        0,  165,  165,  183,  161,  157,  164,  158,  163,  164,
      164,  184,  159,  180,  166,  185,  162,  166,  166,  186,
      181,  167,  160,  187,  167,  167,  165,  161,  188,  162,
      183,  161,  189,  190,  163,  163,  283,  191,  184,  164,
      165,  192,  185,  162,  194,  197,  186,  199,  164,  195,
      187,  200,  195,  165,  167,  188,  166,  215,  196,  189,

      190,  196,    0,  167,  191,    0,  164,    0,  192,    0,
      216,  194,  197,  287,  199,  283,  195,  293,  200,  195,
        0,  167,  217,  218,  215,  196,  219,  220,  196,  201,
      201,  201,  201,  201,  201,  201,  202,  216,    0,  202,
      202,  222,  202,  202,  202,  202,  202,  202,  202,  217,
      218,    0,  287,  219,  220,  206,  293,  205,  206,  206,
      205,  205,  207,    0,  206,  207,  207,  206,  222,  223,
      207,  208,    0,  209,  208,  208,  209,  209,  202,  203,
        0,  208,  203,  203,  224,  203,  203,  203,  203,  203,
      203,  203,  205,  209,    0,  225,  223,  206,  210,  205,

        0,  210,  210,  211,  207,  212,  211,  211,  212,  212,
      226,  224,  227,  208,  213,  209,  228,  213,  213,  205,
      209,  203,  225,  214,  229,  230,  214,  214,  231,    0,
        0,  232,  210,  233,  234,  235,  236,  226,    0,  227,
      210,  237,  239,  228,  240,  211,  241,  212,  242,  243,
      244,  229,  230,  245,  246,  231,  213,  214,  232,  210,
      233,  234,  235,  236,  247,  214,  248,  249,  237,  239,
      250,  240,  251,  241,  252,  242,  243,  244,  253,  254,
      245,  246,  257,    0,  214,  257,  257,    0,    0,  305,
        0,  247,  258,  248,  249,  258,  258,  250,    0,  251,

      259,  252,  268,  259,  259,  253,  254,  256,  259,    0,
      256,  256,  258,  256,  256,  256,  256,  256,  256,  256,
        0,  269,  260,    0,  257,  260,  260,  261,  305,  268,
      261,  261,  260,  262,  258,  270,  262,  262,  271,  258,
      263,  272,  259,  263,  263,  273,  276,  264,  269,  256,
      264,  264,  265,  279,  281,  265,  265,  282,  284,  285,
      286,  288,  270,  289,  260,  271,  291,    0,  272,  261,
      292,  294,  273,  276,  295,  262,  296,  297,  298,  299,
      279,  281,  263,  300,  282,  284,  285,  286,  288,  264,
      289,  301,  302,  291,  265,  303,  304,  292,  294,  310,

      315,  295,  311,  296,  297,  298,  299,    0,  307,    0,
      300,  307,  307,  308,  346,    0,  308,  308,  301,  302,
      312,  313,  303,  304,  306,  314,  310,  306,  306,  311,
      306,  306,  306,  306,  306,  306,  306,  307,  309,  315,
      316,  309,  309,  317,  318,  319,  320,  312,  313,  321,
      307,  322,  314,  346,  323,  308,  324,  326,  327,  328,
      329,  330,  331,  332,  307,  333,  306,  316,  334,  335,
      317,  318,  319,  320,  336,  337,  321,  338,  322,  340,
      309,  323,  341,  324,  326,  327,  328,  329,  330,  331,
      332,  344,  333,  342,  342,  334,  335,  343,  343,  345,

      347,  336,  337,  348,  338,  349,  340,  350,  352,  341,
      353,  355,  356,  357,  359,  360,  357,  357,  344,  358,
      342,  342,  358,  358,  343,  343,  345,  347,    0,  361,
      348,  362,  349,  363,  350,  352,  364,  353,  355,  356,
      365,  359,  360,  366,  367,  368,  370,  371,  373,  374,
      375,  376,  377,  378,  358,  357,  361,  379,  362,  380,
      363,  358,  381,  364,  382,  383,  384,  365,  385,  386,
      366,  367,  368,  370,  371,  373,  374,  375,  376,  377,
      378,  358,  387,  388,  379,  389,  380,  390,  391,  381,
      392,  382,  383,  384,  393,  385,  386,  394,  395,  396,

      397,  399,  401,  398,  402,  400,  403,  404,  405,  387,
      388,  398,  389,  400,  390,  391,  406,  392,  407,  406,
      406,  393,  408,  409,  394,  395,  396,  397,  399,  401,
      398,  402,  400,  403,  404,  405,  410,  411,  398,  412,
      400,  413,  414,  417,  418,  407,  419,  420,  421,  408,
      409,  422,  425,  426,  427,  428,  429,  430,  406,  431,
      432,  433,  434,  410,  435,  436,  412,  437,  413,  414,
      417,  418,  438,  419,  420,  421,  411,  439,  422,  425,
      426,  427,  428,  440,  430,  441,  431,  432,  433,  434,
      442,  435,  436,  443,  437,  429,  444,  445,  446,  438,

      447,  448,  449,  450,  439,  451,  454,  455,  456,  457,
      440,  458,  441,  459,  460,  461,  462,  442,  463,  464,
      443,  465,  466,  444,  445,  446,  467,  447,  448,  449,
      450,  468,  451,  454,  455,  456,  457,  469,  458,  470,
      459,  460,  461,  462,  471,  463,  464,  472,  465,  466,
      473,  474,  475,  467,  476,  479,  480,  481,  468,  482,
      483,  484,  485,  486,  469,  487,  470,  488,  489,  490,
      491,  471,  492,  495,  472,  496,  497,  473,  474,  475,
      498,  476,  479,  480,  481,  499,  482,  483,  484,  485,
      486,  500,  487,  501,  488,  489,  490,  491,  502,  492,

      495,  505,  496,  497,  506,  507,  508,  498,  509,  510,
      511,  512,  499,  513,  514,  515,  516,  517,  500,  518,
      501,  519,  520,  521,  522,  502,  523,  524,  505,  525,
      528,  506,  507,  508,  529,  509,  510,  511,  512,  532,
      513,  514,  515,  516,  517,  533,  518,  534,  519,  520,
      521,  522,  535,  523,  524,  544,  525,  528,  545,  547,
      548,  529,  550,  551,  552,  553,  532,  554,  555,  556,
      557,  559,  533,  560,  534,  561,  562,  563,  564,  535,
      565,  566,  544,  567,  568,  545,  547,  548,  571,  550,
      551,  552,  553,  572,  554,  555,  556,  557,  559,  575,

      560,  576,  561,  562,  563,  564,  577,  565,  566,  578,
      567,  568,  581,  582,  583,  571,  584,  585,  587,  589,
      572,  590,  591,  592,  593,  594,  575,  595,  576,  596,
      598,  599,  600,  577,  601,  602,  578,  603,  604,  581,
      582,  583,  605,  584,  585,  587,  589,  606,  590,  591,
      592,  593,  594,  607,  595,  610,  596,  598,  599,  600,
      611,  601,  602,  616,  603,  604,  617,  618,  619,  605,
      622,  623,  624,  625,  606,  628,  629,  630,  631,  632,
      607,  633,  610,  634,  635,  636,  637,  611,  638,  639,
      616,  640,  641,  617,  618,  619,  642,  622,  623,  624,

      625,  643,  628,  629,  630,  631,  632,  646,  633,  647,
      634,  635,  636,  637,  648,  638,  639,  649,  640,  641,
      658,  659,  660,  642,  662,  663,  665,  666,  643,  667,
      668,  669,  670,  671,  646,  672,  647,  673,  674,  675,
      680,  648,  683,  686,  649,  687,  688,  658,  659,  660,
      689,  662,  663,  665,  666,  690,  667,  668,  669,  670,
      671,  691,  672,  696,  673,  674,  675,  680,  697,  683,
      686,  698,  687,  688,  700,  702,  703,  689,  706,  707,
      712,  713,  690,  718,  719,  720,  721,  722,  691,  723,
      696,  728,  729,  730,  731,  697,  734,  735,  698,  736,

      737,  700,  702,  703,  738,  706,  707,  712,  713,  739,
      718,  719,  720,  721,  722,    0,  723,    0,  728,  729,
      730,  731,    0,  734,  735,    0,  736,  737,    0,    0,
        0,  738,    0,    0,    0,    0,  739,  747,    0,  747,
      749,  749,  749,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746
    } ;

static yyconst flex_int16_t yy_rule_linenum[88] =
    {   0,
       77,   79,   81,   83,   85,   88,   92,   94,   95,   96,
       97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
      107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
      117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
      127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
      148,  149,  151,  152,  153,  154,  155,  156,  158,  159,
      162,  167,  168,  169,  171,  172,  173,  174,  175,  176,
      177,  178,  179,  181,  190,  208,  214
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/options/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached Scanner and Parser
 *
 *  Copyright (C) 2011 DataDifferental, http://datadifferential.com
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 * 
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 38 "libmemcached/options/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM config_get_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= (int)(context->length - context->pos); \
    (size_t)result > (size_t)max_size ? result= max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1303 "libmemcached/options/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * out_str ,yyscan_t yyscanner );

int config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int line_number ,yyscan_t yyscanner );

int config_get_column  (yyscan_t yyscanner );

void config_set_column (int column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 74 "libmemcached/options/scanner.l"



#line 1610 "libmemcached/options/scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 747 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2044 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 88 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 88 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 89 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 77 "libmemcached/options/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "libmemcached/options/scanner.l"
{ yylval->number = atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "libmemcached/options/scanner.l"
{ yylval->server.port = atoi(yytext +1); return PORT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 83 "libmemcached/options/scanner.l"
{ yylval->server.weight = atoi(yytext +2); return WEIGHT_START; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 85 "libmemcached/options/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 88 "libmemcached/options/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 92 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; yyextra->set_server(); return SERVER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 99 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 100 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 101 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 102 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 103 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 104 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return DISTRIBUTION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 105 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 106 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 107 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 108 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 109 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 110 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 111 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 112 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 113 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 114 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NOREPLY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 115 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 116 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 117 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 118 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 119 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 120 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 121 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 122 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 123 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 124 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 125 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 126 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 127 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return REMOVE_FAILED_SERVERS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 128 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return REMOVE_FAILED_SERVERS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 129 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 130 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 131 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 132 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 133 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 134 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 135 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 136 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 137 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 138 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 139 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 140 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 141 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 142 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 143 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 144 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 145 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 148 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 149 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 151 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return INCLUDE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 152 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RESET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 153 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PARSER_DEBUG; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 154 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 155 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return END; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 156 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return ERROR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 158 "libmemcached/options/scanner.l"
{ return TRUE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 159 "libmemcached/options/scanner.l"
{ return FALSE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 162 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 167 "libmemcached/options/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 168 "libmemcached/options/scanner.l"
{ return MODULA; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 169 "libmemcached/options/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 171 "libmemcached/options/scanner.l"
{ return MD5; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 172 "libmemcached/options/scanner.l"
{ return CRC; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 173 "libmemcached/options/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 174 "libmemcached/options/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 175 "libmemcached/options/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 176 "libmemcached/options/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 177 "libmemcached/options/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 178 "libmemcached/options/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 179 "libmemcached/options/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 181 "libmemcached/options/scanner.l"
{
      yylval->server.port= MEMCACHED_DEFAULT_PORT;
      yylval->server.weight= 1;
      yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
      if (yylval->server.c_str)
        yylval->server.length= yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 190 "libmemcached/options/scanner.l"
{
      if (yyextra->is_server())
      {
        yylval->server.port= MEMCACHED_DEFAULT_PORT;
        yylval->server.weight= 1;
        yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
        if (yylval->server.c_str)
          yylval->server.length= yyleng;

        return HOSTNAME;
      }

      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;

      return STRING;
    }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 208 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return QUOTED_STRING;
    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 214 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 219 "libmemcached/options/scanner.l"
ECHO;
	YY_BREAK
#line 2206 "libmemcached/options/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of config_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 747 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 747 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 746);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void config__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
/* %if-c-only */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void config_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 219 "libmemcached/options/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  config_lex_destroy(scanner);
}


