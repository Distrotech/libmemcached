#line 2 "libmemcached/options/scanner.cc"
#line 22 "libmemcached/options/scanner.l"

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wunused-parameter"

#include <libmemcached/options/context.h>
#include <libmemcached/options/parser.h>
#include <libmemcached/options/string.h>
#include <libmemcached/options/symbol.h>

#define YY_EXTRA_TYPE Context*




#line 18 "libmemcached/options/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 96
#define YY_END_OF_BUFFER 97
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[811] =
    {   0,
        0,    0,   97,   95,    3,    3,    1,   95,   95,    2,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   95,    0,   94,   76,    0,    2,   93,    0,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,    0,    4,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,    0,    0,    0,    2,   89,
        0,   93,   81,   93,   72,   93,   93,   93,   93,   93,
       93,   80,   93,   93,   93,   93,   93,   93,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   90,   90,    0,    0,    0,    2,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       74,   76,   76,   76,   76,   76,   76,   76,    0,    0,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,    0,    0,   93,   70,
       73,   75,   93,    0,   86,   93,   93,   93,   93,   93,
       69,   93,   76,   76,   76,   76,   76,   76,   76,   76,
        0,    0,    0,    0,    0,    0,   76,   76,   76,   76,
       76,   76,    0,    0,   76,   76,    0,    0,   76,   76,

       76,    0,    0,    0,   76,    0,   76,    0,    0,   93,
        0,    0,    0,   93,   93,   78,   87,   79,   93,    0,
        0,   76,   76,   76,   76,   76,   76,    0,   22,    0,
        0,    0,    0,    0,    0,    0,   76,   76,   76,    0,
        0,   76,   76,    0,    0,   76,   76,    0,    0,   76,
        0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
        0,   76,   92,    0,   93,    0,    0,   84,   82,   68,
       88,   71,    0,    0,   76,   76,    0,    0,   76,   76,
       76,    0,    0,    0,    0,    0,    0,    0,    0,   76,
       76,   76,    0,    0,   76,   76,    0,    0,    0,    0,

       76,    0,    0,   76,    0,    0,   76,    0,    0,    0,
        0,    0,    0,    0,    0,   76,   92,   91,   93,   85,
       83,    0,    0,    0,    0,    0,    0,    0,    0,   76,
       76,   76,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   33,    0,    0,    0,    0,    0,    0,   76,
        0,    0,    0,    0,    0,    5,   76,    0,    0,    0,
        0,    0,    0,    0,   76,    0,    0,    0,    0,   65,
        0,    0,   64,    0,    0,   92,   93,    0,    0,    0,
        0,    0,    0,    0,    0,   76,    0,    0,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   76,    0,    0,    0,    0,
        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   77,    0,    0,    0,    0,    0,    0,    0,    0,
       76,    0,    0,   76,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       76,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   63,   62,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   76,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       53,   52,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   76,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
       67,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   55,   54,    0,    0,   57,
        0,    0,   56,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   76,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   41,   40,    0,    0,    0,    0,   47,   46,
        0,    0,    0,    0,    0,   61,    0,   60,    0,    0,
        0,    0,    0,    0,   16,   15,    0,    0,    0,    0,
       21,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   37,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   59,   58,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   43,   42,    0,    0,    0,    0,    0,    0,    0,
        0,   12,   11,   14,   13,   18,   17,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   32,   31,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
        9,   20,   19,    0,    0,    0,   28,    0,    0,   27,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,    0,   29,    0,    0,    0,
        0,    0,    0,   49,   51,   48,   50,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
       25,   35,   34,    0,    0,    0,    0,   24,   23,    0,

        0,    0,    0,    0,    0,   45,   44,   39,   38,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   10,   10,   10,   17,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[817] =
    {   0,
        0,  949,  919, 2202, 2202, 2202, 2202,  906,  902,   63,
       71,   79,   73,   65,   81,   66,   72,  114,  112,  130,
      123,  119,  906,  900,  898,  184,  247,  255,  121,  263,
      129,  263,  264,  269,  265,  271,  273,  275,  320,  322,
      327,  331,  332,  333,  340,  371,  380,  381,  899, 2202,
      429,   77,  379,  382,  131,  141,  169,  260,  345,  258,
      441,  447,  272,  276,  329,  489,  505,  513,  522, 2202,
      530,  530,  421,  532,  536,  537,  541,  570,  585,  590,
      595,  376,  605,  596,  640,  644,  646,  652,  324,  343,
      386,  398,  393,  389,  395,  463,  510,  516,  524,  526,

      534,  527,  521,  524,  528,  587,  589,  581,  582,  596,
      603,  707,  715,  724,  732,  740,  749,  749,  750,  751,
      755,  645,  763,  762,  800,  802,  804,  812,  813,  833,
      822,  627,  651,  648,  648,  749,  645,  658,  848,  860,
      751,  754,  773,  777,  820,  825,  464,  821,  821,  465,
      852,  848,  853,  466,  884,  863,  912,  921,  921,  923,
      927,  928,  929,   94,  933,  977,  965,  983,  978,  987,
      998, 1000,  572,  876,  892,  918,  916,  925,  913, 1004,
      908,  929,  916,  960,  982,  971,  990,  993, 1016,  761,
     1015, 1011, 1013, 1014, 1010, 1032, 1018, 1019, 1036,  786,

     1029, 1035, 1036, 1031,  964, 1033, 1049, 1092, 1100, 1060,
      105,  889,  886, 1101, 1102, 1100, 1109, 1110, 1111, 1099,
     1106, 1087, 1095, 1132, 1107, 1120, 1125, 1112, 2202, 1113,
     1117, 1124, 1151, 1140, 1140, 1159, 1166, 1156, 1151, 1150,
     1151, 1148, 1160, 1165, 1166, 1187, 1160, 1170, 1171, 1161,
     1174, 1175, 1166, 1181, 1173, 1184, 1175, 1187, 1199, 1200,
     1208, 1194, 1229, 1256, 1256,  887,  884, 2202, 2202, 1241,
     1242, 1263, 1226, 1227, 1239, 1242, 1226, 1231, 1224, 1238,
     1265, 1259, 1264, 1270,  889,  886, 1271,  808,  807, 1252,
     1252, 1290, 1273, 1280, 1300, 1282, 1279, 1280, 1276, 1277,

     1321, 1286, 1293, 1317, 1295, 1297, 1294, 1310, 1318, 1320,
     1324, 1313, 1329, 1330, 1316, 1323, 1377, 2202, 1346, 2202,
     2202, 1330, 1331, 1322, 1335, 1335, 1336, 1351, 1362, 1361,
     1356, 1361, 1364, 1365, 1367, 1373, 1367, 1373, 1378, 1372,
     1373, 1374,    0, 1383, 1384, 1387, 1388, 1391, 1392, 1379,
     1402, 1403, 1401, 1405, 1409, 2202,  824, 1412, 1415, 1426,
     1420, 1425, 1414, 1417, 1450, 1430, 1443, 1433, 1446, 2202,
     1432, 1433, 2202, 1443, 1444, 1492, 1493, 1464, 1465, 1451,
     1454, 1469, 1488, 1482, 1483, 1495, 1482, 1483, 1484, 1497,
     1498,  833, 1489, 1508,  779, 1492, 1511, 1509, 1510, 1510,

     1511, 1513, 1514, 1516, 1517, 1518, 1511, 1513, 1534, 1538,
     1551, 2202, 1553, 1541, 1542, 1553, 1554, 1555, 1556, 1542,
     1543, 1561, 1562, 1566, 1554, 1567, 1557, 1569, 1570, 1567,
     1568, 1602, 1557, 1560, 1567, 1590, 1589, 1591, 1599, 1600,
     1622, 1604, 1605, 1606,  784,  745, 1593, 1613, 1599, 1598,
     1618, 1604, 1616, 1617,  766,  726, 1612, 1613, 1604, 1605,
     1632, 1610, 1613, 1631, 1634, 1651, 1653, 1643, 1644, 1664,
     1654, 1666, 1656, 1652, 1653, 1672, 1673, 1663, 1672, 1676,
     1666, 1675, 1679, 2202, 2202, 1656, 1657,  669,  653, 1663,
     1664, 1664, 1665, 1667, 1669, 1687, 1708, 1703, 1705, 1704,

     1705, 1706, 1722, 1718, 1720, 1725, 1721, 1723, 1722, 1723,
     1713, 1714, 1712, 1713,  678,  677, 1717, 1718, 1717, 1718,
     1724, 1725, 1730, 1732, 1727, 1748, 1748, 1768, 1751, 1771,
     2202, 2202, 1757, 1758, 1769, 1767, 1755, 1772, 1770, 1758,
     2202, 2202, 1776, 1777, 1771, 1772, 1783, 1784, 1774, 1775,
     1783, 1784, 1789, 1791, 1784, 1783, 1804, 1804, 1821, 1809,
     1809, 1825, 1813, 1824, 1825, 1829, 1830, 1816, 1817, 2202,
     2202, 1833, 1834,  675,  674, 1819, 1820, 1821, 1822,  631,
      622,  626,  606,  566,  540, 2202, 2202, 1822, 1840, 2202,
     1824, 1842, 2202, 1833, 1835, 1849, 1852, 1857, 1859, 1861,

     1862, 1871, 1872, 1870, 1871,  558, 1882, 1883, 1884, 1870,
     1878, 1887, 1873, 1881, 1875, 1876, 1881, 1882,  542,  533,
     1883, 1884, 2202, 2202, 1881, 1882, 1886, 1888, 2202, 2202,
     1890, 1911, 1913, 1915, 1930, 2202, 1932, 2202, 1919, 1920,
     1925, 1926, 1922, 1923, 2202, 2202, 1939, 1940, 1925, 1926,
     2202, 1942, 1943, 1932, 1948, 1951, 1935, 1951, 1954, 1951,
     1953, 1948, 1951, 2202, 2202, 1972, 1974,  532,  494, 1983,
     1984, 1982, 1983, 1984, 1985, 2202, 2202, 1975, 1976, 1985,
     1986, 1980, 1981,  412,  411, 1981, 1982, 1994, 1995, 1992,
     1998, 1989, 1995, 2001, 1992, 2008, 2010, 2008, 2029, 2031,

     2033, 2202, 2202,  419,  379, 2017, 2019, 2020, 2021, 2029,
     2030, 2202, 2202, 2202, 2202, 2202, 2202,  405,  404, 2026,
     2027, 2051,  403, 2042, 2053,  359, 2044, 2202, 2202, 2053,
     2054, 2055, 2056, 2048, 2049, 2057, 2058, 2059, 2061, 2202,
     2202, 2202, 2202,  326,  316, 2050, 2202,  333, 2053, 2202,
      327, 2091, 2093, 2095, 2096, 2090, 2091,  323,  301,  299,
      266, 2090, 2091, 2092, 2202, 2093, 2202, 2086, 2087,  193,
      146, 2094, 2095, 2202, 2202, 2202, 2202, 2104, 2105,  170,
      153,  152,  151, 2093, 2094, 2104, 2105, 2090, 2091, 2202,
     2202, 2202, 2202, 2112, 2113, 2100, 2102, 2202, 2202, 2124,

     2145,  150,  149, 2144, 2146, 2202, 2202, 2202, 2202, 2202,
     2195,  119, 2198,  117,  116,  108
    } ;

static yyconst flex_int16_t yy_def[817] =
    {   0,
      810,    1,  810,  810,  810,  810,  810,  811,  810,  812,
      812,  812,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,  813,  811,  811,  810,  814,  812,   12,  814,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,  813,  810,
       26,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  815,  816,  815,  812,  810,
      816,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  816,  815,  816,  816,  816,  812,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   51,   51,   51,   51,   51,   51,   51,  810,  810,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,  816,  816,   12,   12,
       12,   12,   12,  810,   12,   12,   12,   12,   12,   12,
       12,   12,   51,   51,   51,   51,   51,   51,   51,   51,
      810,  810,  810,  810,  810,  810,   51,   51,   51,   51,
       51,   51,  810,  810,   51,   51,  810,  810,   51,   51,

       51,  810,  810,  810,   51,  810,   51,  816,  816,   12,
      810,  810,  810,   12,   12,   12,   12,   12,   12,  810,
      810,   51,   51,   51,   51,   51,   51,  810,  810,  810,
      810,  810,  810,  810,  810,  810,   51,   51,   51,  810,
      810,   51,   51,  810,  810,   51,   51,  810,  810,   51,
      810,  810,   51,  810,  810,  810,  810,  810,  810,  810,
      810,   51,  816,  816,   12,  810,  810,  810,  810,   12,
       12,   12,  810,  810,   51,   51,  810,  810,   51,   51,
       51,  810,  810,  810,  810,  810,  810,  810,  810,   51,
       51,   51,  810,  810,   51,   51,  810,  810,  810,  810,

       51,  810,  810,   51,  810,  810,   51,  810,  810,  810,
      810,  810,  810,  810,  810,   51,  816,  810,   12,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,   51,
       51,   51,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,   51,  810,  810,  810,  810,  810,  810,   51,
      810,  810,  810,  810,  810,  810,   51,  810,  810,  810,
      810,  810,  810,  810,   51,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  816,   12,  810,  810,  810,
      810,  810,  810,  810,  810,   51,  810,  810,   51,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,   51,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,   12,  810,  810,  810,  810,  810,  810,  810,  810,
       51,  810,  810,   51,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
       51,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,   51,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,   51,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,   51,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  810,  810,  810,  810,  810,  810,  810,  810,    0,
      810,  810,  810,  810,  810,  810
    } ;

static yyconst flex_int16_t yy_nxt[2274] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       10,   10,   10,   10,   10,   10,    4,    7,   11,   11,
       12,   13,   14,   15,   11,   16,   17,   18,   11,   11,
       19,   11,   11,   11,   11,   20,   21,   22,   11,   11,
       11,   11,   11,   11,    4,   11,   11,   12,   13,   14,
       15,   11,   16,   17,   18,   11,   11,   19,   11,   11,
       11,   11,   20,   21,   22,   11,   11,   11,   11,   11,
       11,   27,   28,   28,   28,   28,   28,   28,   28,   30,
       31,   31,   31,   31,   31,   31,   31,   30,   31,   31,
       31,   31,   31,   31,   31,   34,   35,   29,   29,   37,

       36,   29,   39,   40,   29,   29,  212,   29,   29,  213,
      116,   32,   38,   29,   33,   89,   29,  266,  113,   68,
      267,   29,   34,   35,   29,   29,   37,   36,   29,   39,
       40,   29,   29,   42,   29,   29,   41,   70,   32,   38,
       29,   33,   89,   29,   43,   47,   29,   29,   45,   29,
       44,   29,   46,   29,   48,   29,   29,   94,   29,   95,
       42,   29,   29,   41,   29,   29,  807,  806,  793,  792,
      791,   43,   47,   29,   29,   45,   29,   44,   29,   46,
       29,   48,   29,   29,   94,   29,   95,  790,   29,   29,
      785,   29,   29,   51,   51,   51,   51,   51,   51,   51,

      784,   96,   52,   53,   54,   55,   51,   51,   51,   56,
       57,   51,   58,   51,   51,   59,   51,   60,   51,   61,
       62,   63,   64,   65,   51,   51,   51,   51,   96,   52,
       53,   54,   55,   51,   51,   51,   56,   57,   51,   58,
       51,   51,   59,   51,   60,   51,   61,   62,   63,   64,
       65,   51,   51,   51,   51,   66,   67,   67,   67,   67,
       67,   67,   67,   27,   69,   69,   69,   69,   69,   69,
       69,   66,   71,   71,   71,   71,   71,   71,   71,   70,
       70,   70,   97,  777,   73,   70,   75,   70,   74,   70,
      100,   70,  109,  101,   72,   29,   29,   29,   29,   29,

       29,   29,   77,   29,   29,   29,   76,   29,   29,   97,
       29,   73,  110,   75,   78,   74,  776,  100,  775,  109,
      101,   72,   29,   29,   29,   29,   29,   29,   29,   77,
       29,   29,   29,   76,   29,   29,   70,   29,   70,  110,
      774,   78,   80,   70,  767,   82,   79,   70,   70,   70,
      765,  111,   29,   83,   29,   29,   70,   29,   81,   29,
      763,  132,   29,   29,   29,   29,   29,   29,   84,   80,
      762,   85,   29,   79,  133,   29,  750,   98,  111,   29,
       83,   29,   29,   99,   29,   81,   29,   70,  132,   29,
       29,   29,   29,   29,   29,   84,   70,   70,   85,   29,

       92,  133,   29,   29,   98,   90,   29,   86,   29,  134,
       99,   29,   29,   29,   93,   87,   29,   91,  135,   88,
      747,  743,  742,  735,  136,  137,  734,   92,  717,  716,
       29,  138,   90,   29,   86,   29,  134,   70,   29,   29,
       29,   93,   87,   29,   91,  135,   88,   51,   51,   51,
       51,  136,  137,   29,   51,   51,   29,   51,  138,  102,
       51,  103,   51,  104,   51,   51,   51,   51,   51,  105,
      139,  193,  197,  202,   51,   51,   51,   51,  106,  107,
       29,   51,   51,   29,   51,  108,  102,   51,  103,   51,
      104,   51,   51,   51,   51,   51,  105,   66,  112,  112,

      112,  112,  112,  112,  112,  106,  107,  140,  194,  198,
      203,  703,  108,  114,  115,  115,  115,  115,  115,  115,
      115,   66,  112,  112,  112,  112,  112,  112,  112,   70,
       27,  117,  117,  117,  117,  117,  117,  117,   71,   71,
       71,   71,   71,   71,   71,   71,   70,  141,   70,  702,
      665,  142,   70,   70,  143,  144,  145,   70,  146,  664,
      147,  148,   29,  149,   29,   29,  118,   29,   29,  120,
      119,   29,   29,   29,  141,  651,   29,  121,  142,  220,
      122,  143,  144,  145,  634,  146,   70,  147,  148,   29,
      149,   29,   29,  118,   29,   29,  120,  119,   29,   29,

       29,   70,   29,   29,  121,   29,   70,  123,  150,  151,
      633,   70,   70,  632,  153,  154,  221,   29,  155,  124,
       29,   70,   29,  125,  152,   29,  127,   29,   29,   29,
       29,   29,   29,  631,  123,  150,  151,   29,  156,  630,
       29,  153,  154,  126,   29,  155,  124,   29,  629,   29,
      125,  152,   29,  127,   29,   29,   70,   29,   29,  173,
       70,  128,   70,  163,   29,  156,  129,   29,   70,  174,
      126,  175,   29,  176,  131,   29,   29,   29,   29,   29,
       29,   29,  179,  180,   29,  130,  173,   29,  128,  164,
      163,  624,  623,  129,  571,  570,  174,  544,  175,   29,

      176,  131,   29,   29,   29,   29,   29,   29,   29,  179,
      180,   29,  130,  543,   29,   71,   71,   71,   71,   71,
       71,   71,   71,   66,  112,  112,  112,  112,  112,  112,
      112,   70,   71,  157,  157,  157,  157,  157,  157,  157,
      114,  158,  158,  158,  158,  158,  158,  158,   71,   71,
       71,   71,   71,   71,   71,   71,   70,   30,  117,  117,
      117,  117,  117,  117,  117,   70,   70,   70,  240,  187,
      512,   70,  177,  511,  160,  159,  188,  162,   70,   70,
      178,   29,   29,   29,   29,   29,  161,   29,  165,  502,
       29,  501,  189,  251,   29,   29,  187,   29,   29,  177,

      166,  160,  159,  188,  162,  241,  190,  178,   29,   29,
       29,   29,   29,  161,   29,  165,   70,   29,   70,  189,
       70,   29,   29,  450,   29,   29,  167,  166,   70,   70,
      252,  168,   29,  190,   29,   29,   29,   29,   70,   29,
      447,  412,  169,  191,  170,   29,  192,   29,   29,   70,
      171,  340,  339,  167,   29,  172,  195,   29,  168,   29,
      196,   29,   29,   29,   29,   29,   29,  181,   29,  169,
      191,  170,   29,  192,   29,   29,  182,  171,  183,  184,
      199,   29,  172,  195,   29,  200,  201,  196,  185,  207,
      186,  204,   29,  337,  181,   29,  336,  321,  320,  269,

      268,   50,   25,  182,   25,  183,  184,  199,   50,   26,
       25,  222,  200,  201,  223,  185,  207,  186,  810,  205,
      208,  209,  209,  209,  209,  209,  209,  209,  206,  114,
       71,   71,   71,   71,   71,   71,   71,   70,  222,   70,
      224,  223,  225,   70,   70,   70,  205,  226,  227,   70,
      231,  232,  233,   29,   23,   29,   29,  210,   29,   29,
       29,   29,   29,   29,   29,   29,  810,  224,   29,  225,
      810,  259,  810,  211,  226,  227,  810,  231,  232,  233,
       29,   70,   29,   29,  210,   29,   29,   29,   29,   29,
       29,   29,   29,   70,   70,   29,  215,   29,  214,   70,

       29,  216,  234,   70,  235,  810,  810,  236,  260,   29,
       29,  228,   29,  217,   70,   29,   70,  218,   29,   29,
      237,  229,   29,  215,   29,  214,  238,   29,  216,  234,
       29,  235,   29,   29,  236,  219,   29,   29,  239,   29,
      217,  242,   29,  243,  218,   29,   29,  237,  230,   29,
      244,  245,  246,  238,  247,  248,  249,   29,  250,   29,
       29,  253,  219,  254,  256,  239,  255,  257,  242,  258,
      243,  261,  262,  810,  810,  810,   70,  244,  245,  246,
      810,  247,  248,  249,  810,  250,  810,  810,  253,  810,
      254,  256,   29,  255,  257,   29,  258,  265,  261,  262,

       71,  263,  263,  263,  263,  263,  263,  263,  208,  264,
      264,  264,  264,  264,  264,  264,   70,   70,   70,   29,
      810,  273,   29,  270,  265,   70,   70,   70,  274,  275,
      276,  279,   29,   29,   29,   29,   29,   29,  271,  277,
      280,   29,   29,   29,   29,   29,   29,  272,  273,  810,
      270,  281,  282,  283,  284,  274,  275,  276,  279,   29,
       29,   29,   29,   29,   29,  271,  285,  280,   29,   29,
       29,   29,   29,   29,  272,  286,  278,  287,  281,  282,
      283,  284,  288,  289,  290,  291,  292,  293,  294,  295,
      296,  297,  298,  285,  299,  301,  302,  303,  304,  305,

      306,  307,  286,  308,  287,  309,  310,  311,  312,  288,
      289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
      313,  314,  301,  302,  303,  304,  305,  306,  307,  315,
      308,  300,  309,  310,  311,  312,  316,   71,  317,  317,
      317,  317,  317,  317,  317,  318,  324,  313,  314,  326,
      810,  810,  810,  322,  323,  328,  315,   70,   70,  341,
      329,  810,  330,  316,  208,   71,   71,   71,   71,   71,
       71,   71,   70,   29,   29,  331,   29,   29,  319,   70,
      322,  323,  328,  325,  332,  333,  327,  329,   29,  330,
      334,   29,  335,  338,  343,   29,  342,  344,   29,  346,

       29,   29,  331,   29,   29,  319,  347,  348,  350,  351,
      352,  332,  333,  353,  354,   29,  359,  334,   29,  335,
      338,  343,   29,  360,  361,   29,  346,  363,  355,  364,
      374,  365,  366,  347,  345,  350,  351,  352,  356,  367,
      353,  354,  368,  359,  349,  369,  370,  371,  372,  373,
      360,  810,  378,  379,  363,  380,  364,  357,  365,  366,
      810,  362,   70,  387,  810,  358,  367,  375,  381,  368,
      382,  383,  369,  370,  371,  372,  373,  377,   29,  378,
      379,   29,  380,  384,  357,   71,  376,  376,  376,  376,
      376,  376,  376,  318,  385,  381,  386,  382,  383,  389,

      388,  390,  391,  392,  377,   29,  393,  394,   29,  395,
      384,  396,  397,  398,  399,  400,  401,  402,  403,  404,
      405,  385,  406,  386,  407,  408,  389,  409,  390,  391,
      392,  410,  411,  393,  394,  413,  395,  414,  396,  397,
      398,  399,  400,  401,  402,  403,  404,  405,  415,  406,
      420,  407,  408,  421,  409,  416,  417,  422,  410,  411,
      418,  419,  413,  424,  414,  425,  426,  810,  427,  428,
      429,  430,  431,  810,  810,  415,  810,  420,  810,  810,
      421,  810,  416,  417,  433,  434,  435,  418,  419,  436,
      424,  437,  425,  426,  423,  427,  428,  429,  430,  431,

       71,   71,   71,   71,   71,   71,   71,   71,  318,   70,
      438,  433,  434,  435,  439,  440,  436,  441,  437,  442,
      443,  444,  445,  446,  448,   29,  449,  451,   29,  452,
      432,  453,  454,  455,  456,  457,  458,  438,  459,  460,
      461,  439,  440,  462,  441,  463,  442,  443,  444,  445,
      446,  448,   29,  449,  451,   29,  452,  432,  453,  454,
      455,  456,  457,  458,  464,  459,  460,  461,  465,  466,
      462,  467,  463,  468,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  480,  478,  481,  483,  484,  485,  486,
      487,  464,  479,  482,  488,  465,  466,  489,  467,  490,

      468,  469,  470,  471,  472,  473,  474,  475,  476,  477,
      480,  478,  481,  483,  484,  485,  486,  487,   70,  479,
      482,  488,  491,  492,  489,  493,  490,  494,  495,  496,
      498,  499,  500,  503,   29,  504,  505,   29,  506,  517,
      507,  508,  509,  510,  513,  514,  515,  516,  519,  491,
      492,  520,  493,  521,  494,  495,  522,  498,  499,  500,
      503,   29,  504,  505,   29,  506,  497,  507,  508,  509,
      510,  513,  514,  515,  516,  519,  518,  523,  520,  524,
      521,  525,  526,  522,  527,  528,  529,  530,  531,  532,
      533,  534,  535,  536,  537,  538,  539,  540,  541,  542,

      545,  546,  547,  548,  523,  549,  524,  550,  525,  526,
      551,  527,  528,  529,  530,  531,  532,  533,  534,  535,
      536,  537,  538,  539,  540,  541,  542,  545,  546,  547,
      548,  552,  549,  553,  550,  554,  555,  551,  556,  557,
      558,  559,  560,  561,  562,  563,  564,  565,  566,  567,
      568,  569,  572,  573,  574,  575,  576,  577,  552,  578,
      553,  579,  554,  555,  580,  556,  557,  558,  559,  560,
      561,  562,  563,  564,  565,  566,  567,  568,  569,  572,
      573,  574,  575,  576,  577,  581,  578,  582,  579,  583,
      584,  580,  585,  586,  587,  588,  589,  590,  591,  592,

      593,  594,  595,  596,  597,  598,  599,  600,  601,  602,
      603,  604,  581,  605,  582,  606,  583,  584,  607,  585,
      586,  587,  588,  589,  590,  591,  592,  593,  594,  595,
      596,  597,  598,  599,  600,  601,  602,  603,  604,  608,
      605,  609,  606,  610,  611,  607,  612,  613,  614,  615,
      616,  617,  618,  619,  620,  621,  622,  625,  626,  627,
      628,  635,  636,  637,  638,  639,  608,  640,  609,  641,
      610,  611,  642,  612,  613,  614,  615,  616,  617,  618,
      619,  620,  621,  622,  625,  626,  627,  628,  635,  636,
      637,  638,  639,  643,  640,  644,  641,  645,  646,  642,

      647,  648,  649,  650,  652,  653,  654,  655,  656,  657,
      658,  659,  660,  661,  662,  663,  666,  667,  668,  669,
      643,  670,  644,  671,  645,  646,  672,  647,  648,  649,
      650,  652,  653,  654,  655,  656,  657,  658,  659,  660,
      661,  662,  663,  666,  667,  668,  669,  673,  670,  674,
      671,  675,  676,  672,  677,  678,  679,  680,  681,  682,
      683,  684,  685,  686,  687,  688,  689,  690,  691,  692,
      693,  694,  695,  696,  673,  697,  674,  698,  675,  676,
      699,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  689,  690,  691,  692,  693,  694,  695,

      696,  700,  697,  701,  698,  704,  705,  699,  706,  707,
      708,  709,  710,  711,  712,  713,  714,  715,  718,  719,
      720,  721,  722,  723,  724,  725,  726,  727,  700,  728,
      701,  729,  704,  705,  730,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  718,  719,  720,  721,  722,
      723,  724,  725,  726,  727,  731,  728,  732,  729,  733,
      736,  730,  737,  738,  739,  740,  741,  744,  745,  746,
      748,  749,  751,  752,  753,  754,  755,  756,  757,  758,
      759,  760,  731,  761,  732,  764,  733,  736,  766,  737,
      738,  739,  740,  741,  744,  745,  746,  748,  749,  751,

      752,  753,  754,  755,  756,  757,  758,  759,  760,  768,
      761,  769,  764,  770,  771,  766,  772,  773,  778,  779,
      780,  781,  782,  783,  786,  787,  788,  789,  794,  795,
      796,  797,  798,  799,  800,  801,  768,  802,  769,  803,
      770,  771,  804,  772,  773,  778,  779,  780,  781,  782,
      783,  786,  787,  788,  789,  794,  795,  796,  797,  798,
      799,  800,  801,  805,  802,  808,  803,  809,  810,  804,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      805,  810,  808,  810,  809,   24,  810,   24,   49,   49,

       49,    3,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810
    } ;

static yyconst flex_int16_t yy_chk[2274] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   14,   14,   16,   15,

       14,   16,   16,   17,   17,   13,  164,   17,   13,  164,
      816,   12,   15,   15,   12,   52,   15,  211,  815,  814,
      211,  812,   13,   14,   14,   16,   15,   14,   16,   16,
       17,   17,   13,   19,   17,   13,   18,   29,   12,   15,
       15,   12,   52,   15,   19,   21,   18,   19,   20,   18,
       19,   22,   20,   29,   22,   21,   29,   55,   21,   56,
       19,   31,   20,   18,   31,   20,  803,  802,  783,  782,
      781,   19,   21,   18,   19,   20,   18,   19,   22,   20,
       29,   22,   21,   29,   55,   21,   56,  780,   31,   20,
      771,   31,   20,   26,   26,   26,   26,   26,   26,   26,

      770,   57,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   57,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   27,   27,   27,   27,   27,
       27,   27,   27,   28,   28,   28,   28,   28,   28,   28,
       28,   30,   30,   30,   30,   30,   30,   30,   30,   32,
       33,   35,   58,  761,   33,   34,   35,   36,   34,   37,
       60,   38,   63,   60,   32,   32,   33,   35,   32,   33,

       35,   34,   37,   36,   34,   37,   36,   38,   37,   58,
       38,   33,   64,   35,   38,   34,  760,   60,  759,   63,
       60,   32,   32,   33,   35,   32,   33,   35,   34,   37,
       36,   34,   37,   36,   38,   37,   39,   38,   40,   64,
      758,   38,   40,   41,  751,   42,   39,   42,   43,   44,
      748,   65,   39,   43,   40,   39,   45,   40,   41,   41,
      745,   89,   41,   42,   43,   44,   42,   43,   44,   40,
      744,   45,   45,   39,   90,   45,  726,   59,   65,   39,
       43,   40,   39,   59,   40,   41,   41,   46,   89,   41,
       42,   43,   44,   42,   43,   44,   47,   48,   45,   45,

       54,   90,   45,   46,   59,   53,   46,   46,   82,   91,
       59,   82,   47,   48,   54,   47,   48,   53,   92,   48,
      723,  719,  718,  705,   93,   94,  704,   54,  685,  684,
       46,   95,   53,   46,   46,   82,   91,   73,   82,   47,
       48,   54,   47,   48,   53,   92,   48,   51,   51,   51,
       51,   93,   94,   73,   51,   51,   73,   51,   95,   61,
       51,   61,   51,   61,   51,   51,   51,   51,   51,   62,
       96,  147,  150,  154,   51,   51,   51,   51,   62,   62,
       73,   51,   51,   73,   51,   62,   61,   51,   61,   51,
       61,   51,   51,   51,   51,   51,   62,   66,   66,   66,

       66,   66,   66,   66,   66,   62,   62,   96,  147,  150,
      154,  669,   62,   67,   67,   67,   67,   67,   67,   67,
       67,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       69,   69,   69,   69,   69,   69,   69,   69,   71,   71,
       71,   71,   71,   71,   71,   71,   72,   97,   74,  668,
      620,   98,   75,   76,   99,  100,  101,   77,  102,  619,
      103,  104,   72,  105,   74,   72,   72,   74,   75,   76,
       74,   75,   76,   77,   97,  606,   77,   77,   98,  173,
       78,   99,  100,  101,  585,  102,   78,  103,  104,   72,
      105,   74,   72,   72,   74,   75,   76,   74,   75,   76,

       77,   79,   78,   77,   77,   78,   80,   79,  106,  107,
      584,   81,   84,  583,  108,  109,  173,   79,  110,   80,
       79,   83,   80,   81,  107,   80,   84,   81,   84,   78,
       81,   84,   78,  582,   79,  106,  107,   83,  111,  581,
       83,  108,  109,   83,   79,  110,   80,   79,  580,   80,
       81,  107,   80,   84,   81,   84,   85,   81,   84,  132,
       86,   85,   87,  122,   83,  111,   86,   83,   88,  133,
       83,  134,   85,  135,   88,   85,   86,  122,   87,   86,
      122,   87,  137,  138,   88,   87,  132,   88,   85,  122,
      122,  575,  574,   86,  516,  515,  133,  489,  134,   85,

      135,   88,   85,   86,  122,   87,   86,  122,   87,  137,
      138,   88,   87,  488,   88,  112,  112,  112,  112,  112,
      112,  112,  112,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  114,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  115,  115,  115,  115,  115,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  117,  117,  117,
      117,  117,  117,  117,  117,  118,  119,  120,  190,  141,
      456,  121,  136,  455,  119,  118,  142,  121,  124,  123,
      136,  118,  119,  120,  118,  119,  120,  121,  123,  446,
      121,  445,  143,  200,  124,  123,  141,  124,  123,  136,

      124,  119,  118,  142,  121,  190,  144,  136,  118,  119,
      120,  118,  119,  120,  121,  123,  125,  121,  126,  143,
      127,  124,  123,  395,  124,  123,  125,  124,  128,  129,
      200,  126,  125,  144,  126,  125,  127,  126,  131,  127,
      392,  357,  127,  145,  128,  129,  146,  128,  129,  130,
      129,  289,  288,  125,  131,  130,  148,  131,  126,  125,
      149,  126,  125,  127,  126,  130,  127,  139,  130,  127,
      145,  128,  129,  146,  128,  129,  139,  129,  139,  140,
      151,  131,  130,  148,  131,  152,  153,  149,  140,  156,
      140,  155,  130,  286,  139,  130,  285,  267,  266,  213,

      212,   49,   25,  139,   24,  139,  140,  151,   23,    9,
        8,  174,  152,  153,  175,  140,  156,  140,    3,  155,
      157,  157,  157,  157,  157,  157,  157,  157,  155,  158,
      158,  158,  158,  158,  158,  158,  158,  159,  174,  160,
      176,  175,  177,  161,  162,  163,  155,  178,  179,  165,
      181,  182,  183,  159,    2,  160,  159,  159,  160,  161,
      162,  163,  161,  162,  163,  165,    0,  176,  165,  177,
        0,  205,    0,  163,  178,  179,    0,  181,  182,  183,
      159,  167,  160,  159,  159,  160,  161,  162,  163,  161,
      162,  163,  165,  166,  169,  165,  167,  167,  166,  168,

      167,  168,  184,  170,  185,    0,    0,  186,  205,  166,
      169,  180,  166,  169,  171,  168,  172,  170,  168,  170,
      187,  180,  170,  167,  167,  166,  188,  167,  168,  184,
      171,  185,  172,  171,  186,  172,  166,  169,  189,  166,
      169,  191,  168,  192,  170,  168,  170,  187,  180,  170,
      193,  194,  195,  188,  196,  197,  198,  171,  199,  172,
      171,  201,  172,  202,  203,  189,  202,  203,  191,  204,
      192,  206,  207,    0,    0,    0,  210,  193,  194,  195,
        0,  196,  197,  198,    0,  199,    0,    0,  201,    0,
      202,  203,  210,  202,  203,  210,  204,  210,  206,  207,

      208,  208,  208,  208,  208,  208,  208,  208,  209,  209,
      209,  209,  209,  209,  209,  209,  216,  214,  215,  210,
        0,  220,  210,  214,  210,  217,  218,  219,  221,  222,
      223,  225,  216,  214,  215,  216,  214,  215,  215,  224,
      226,  217,  218,  219,  217,  218,  219,  219,  220,    0,
      214,  227,  228,  230,  231,  221,  222,  223,  225,  216,
      214,  215,  216,  214,  215,  215,  232,  226,  217,  218,
      219,  217,  218,  219,  219,  233,  224,  234,  227,  228,
      230,  231,  235,  236,  237,  238,  239,  240,  241,  242,
      243,  244,  245,  232,  246,  247,  248,  249,  250,  251,

      252,  253,  233,  254,  234,  255,  256,  257,  258,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      259,  260,  247,  248,  249,  250,  251,  252,  253,  261,
      254,  246,  255,  256,  257,  258,  262,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  275,  259,  260,  276,
        0,    0,    0,  273,  274,  277,  261,  270,  271,  290,
      278,    0,  279,  262,  264,  264,  264,  264,  264,  264,
      264,  264,  265,  270,  271,  280,  270,  271,  265,  272,
      273,  274,  277,  275,  281,  282,  276,  278,  265,  279,
      283,  265,  284,  287,  291,  272,  290,  292,  272,  293,

      270,  271,  280,  270,  271,  265,  294,  295,  296,  297,
      298,  281,  282,  299,  300,  265,  302,  283,  265,  284,
      287,  291,  272,  303,  304,  272,  293,  305,  301,  306,
      316,  307,  308,  294,  292,  296,  297,  298,  301,  309,
      299,  300,  310,  302,  295,  311,  312,  313,  314,  315,
      303,    0,  322,  323,  305,  324,  306,  301,  307,  308,
        0,  304,  319,  331,    0,  301,  309,  316,  325,  310,
      326,  327,  311,  312,  313,  314,  315,  319,  319,  322,
      323,  319,  324,  328,  301,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  329,  325,  330,  326,  327,  332,

      331,  333,  334,  335,  319,  319,  336,  337,  319,  338,
      328,  339,  340,  341,  342,  344,  345,  346,  347,  348,
      349,  329,  350,  330,  351,  352,  332,  353,  333,  334,
      335,  354,  355,  336,  337,  358,  338,  359,  339,  340,
      341,  342,  344,  345,  346,  347,  348,  349,  360,  350,
      363,  351,  352,  364,  353,  361,  361,  365,  354,  355,
      362,  362,  358,  366,  359,  367,  368,    0,  369,  371,
      372,  374,  375,    0,    0,  360,    0,  363,    0,    0,
      364,    0,  361,  361,  378,  379,  380,  362,  362,  381,
      366,  382,  367,  368,  365,  369,  371,  372,  374,  375,

      376,  376,  376,  376,  376,  376,  376,  376,  376,  377,
      383,  378,  379,  380,  384,  385,  381,  386,  382,  387,
      388,  389,  390,  391,  393,  377,  394,  396,  377,  397,
      377,  398,  399,  400,  401,  402,  403,  383,  404,  405,
      406,  384,  385,  407,  386,  408,  387,  388,  389,  390,
      391,  393,  377,  394,  396,  377,  397,  377,  398,  399,
      400,  401,  402,  403,  409,  404,  405,  406,  410,  411,
      407,  413,  408,  414,  415,  416,  417,  418,  419,  420,
      421,  422,  423,  425,  424,  426,  427,  428,  429,  430,
      431,  409,  424,  426,  433,  410,  411,  434,  413,  435,

      414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
      425,  424,  426,  427,  428,  429,  430,  431,  432,  424,
      426,  433,  436,  437,  434,  438,  435,  439,  440,  441,
      442,  443,  444,  447,  432,  448,  449,  432,  450,  461,
      451,  452,  453,  454,  457,  458,  459,  460,  462,  436,
      437,  463,  438,  464,  439,  440,  465,  442,  443,  444,
      447,  432,  448,  449,  432,  450,  441,  451,  452,  453,
      454,  457,  458,  459,  460,  462,  461,  466,  463,  467,
      464,  468,  469,  465,  470,  471,  472,  473,  474,  475,
      476,  477,  478,  479,  480,  481,  482,  483,  486,  487,

      490,  491,  492,  493,  466,  494,  467,  495,  468,  469,
      496,  470,  471,  472,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  486,  487,  490,  491,  492,
      493,  497,  494,  498,  495,  499,  500,  496,  501,  502,
      503,  504,  505,  506,  507,  508,  509,  510,  511,  512,
      513,  514,  517,  518,  519,  520,  521,  522,  497,  523,
      498,  524,  499,  500,  525,  501,  502,  503,  504,  505,
      506,  507,  508,  509,  510,  511,  512,  513,  514,  517,
      518,  519,  520,  521,  522,  526,  523,  527,  524,  528,
      529,  525,  530,  533,  534,  535,  536,  537,  538,  539,

      540,  543,  544,  545,  546,  547,  548,  549,  550,  551,
      552,  553,  526,  554,  527,  555,  528,  529,  556,  530,
      533,  534,  535,  536,  537,  538,  539,  540,  543,  544,
      545,  546,  547,  548,  549,  550,  551,  552,  553,  557,
      554,  558,  555,  559,  560,  556,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  572,  573,  576,  577,  578,
      579,  588,  589,  591,  592,  594,  557,  595,  558,  596,
      559,  560,  597,  561,  562,  563,  564,  565,  566,  567,
      568,  569,  572,  573,  576,  577,  578,  579,  588,  589,
      591,  592,  594,  598,  595,  599,  596,  600,  601,  597,

      602,  603,  604,  605,  607,  608,  609,  610,  611,  612,
      613,  614,  615,  616,  617,  618,  621,  622,  625,  626,
      598,  627,  599,  628,  600,  601,  631,  602,  603,  604,
      605,  607,  608,  609,  610,  611,  612,  613,  614,  615,
      616,  617,  618,  621,  622,  625,  626,  632,  627,  633,
      628,  634,  635,  631,  637,  639,  640,  641,  642,  643,
      644,  647,  648,  649,  650,  652,  653,  654,  655,  656,
      657,  658,  659,  660,  632,  661,  633,  662,  634,  635,
      663,  637,  639,  640,  641,  642,  643,  644,  647,  648,
      649,  650,  652,  653,  654,  655,  656,  657,  658,  659,

      660,  666,  661,  667,  662,  670,  671,  663,  672,  673,
      674,  675,  678,  679,  680,  681,  682,  683,  686,  687,
      688,  689,  690,  691,  692,  693,  694,  695,  666,  696,
      667,  697,  670,  671,  698,  672,  673,  674,  675,  678,
      679,  680,  681,  682,  683,  686,  687,  688,  689,  690,
      691,  692,  693,  694,  695,  699,  696,  700,  697,  701,
      706,  698,  707,  708,  709,  710,  711,  720,  721,  722,
      724,  725,  727,  730,  731,  732,  733,  734,  735,  736,
      737,  738,  699,  739,  700,  746,  701,  706,  749,  707,
      708,  709,  710,  711,  720,  721,  722,  724,  725,  727,

      730,  731,  732,  733,  734,  735,  736,  737,  738,  752,
      739,  753,  746,  754,  755,  749,  756,  757,  762,  763,
      764,  766,  768,  769,  772,  773,  778,  779,  784,  785,
      786,  787,  788,  789,  794,  795,  752,  796,  753,  797,
      754,  755,  800,  756,  757,  762,  763,  764,  766,  768,
      769,  772,  773,  778,  779,  784,  785,  786,  787,  788,
      789,  794,  795,  801,  796,  804,  797,  805,    0,  800,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      801,    0,  804,    0,  805,  811,    0,  811,  813,  813,

      813,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  810,  810
    } ;

static yyconst flex_int16_t yy_rule_linenum[96] =
    {   0,
       76,   79,   81,   83,   87,   88,   90,   91,   92,   93,
       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
      114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  148,  150,  151,  153,  154,  155,
      156,  157,  158,  160,  161,  164,  169,  170,  171,  173,
      174,  175,  176,  177,  178,  179,  180,  181,  183,  189,
      195,  201,  207,  213,  219

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/options/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached Scanner and Parser
 *
 *  Copyright (C) 2011 DataDifferental, http://datadifferential.com
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 * 
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 37 "libmemcached/options/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM config_get_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= context->length - context->pos; \
    result > max_size ? result = max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1361 "libmemcached/options/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * out_str ,yyscan_t yyscanner );

int config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int line_number ,yyscan_t yyscanner );

int config_get_column  (yyscan_t yyscanner );

void config_set_column (int column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 73 "libmemcached/options/scanner.l"



#line 1668 "libmemcached/options/scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 811 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2202 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 96 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 96 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 97 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "libmemcached/options/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "libmemcached/options/scanner.l"
{ yylval->number = atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 81 "libmemcached/options/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 83 "libmemcached/options/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS_OPTION; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 91 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 96 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CACHE_LOOKUPS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 99 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CACHE_LOOKUPS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 100 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 101 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 102 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 103 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 104 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return DISTRIBUTION; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 105 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 106 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 107 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 108 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 109 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 110 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 111 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 112 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 113 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 114 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_WEIGHTED; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 115 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_WEIGHTED; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 116 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NOREPLY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 117 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 118 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 119 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 121 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 122 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 123 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 126 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 127 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 128 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 129 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 130 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 131 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 132 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 133 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 134 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 135 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 136 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 137 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 138 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 139 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 140 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 141 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 142 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 143 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 144 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 145 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 146 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 147 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 148 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 150 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 151 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 153 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return INCLUDE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 154 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RESET; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 155 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PARSER_DEBUG; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 156 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 157 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return END; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 158 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return ERROR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 160 "libmemcached/options/scanner.l"
{ return TRUE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 161 "libmemcached/options/scanner.l"
{ return FALSE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 164 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 169 "libmemcached/options/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 170 "libmemcached/options/scanner.l"
{ return MODULA; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 171 "libmemcached/options/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 173 "libmemcached/options/scanner.l"
{ return MD5; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 174 "libmemcached/options/scanner.l"
{ return CRC; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 175 "libmemcached/options/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 176 "libmemcached/options/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 177 "libmemcached/options/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 178 "libmemcached/options/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 179 "libmemcached/options/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 180 "libmemcached/options/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 181 "libmemcached/options/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 183 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return HOSTNAME_WITH_PORT;
    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return HOSTNAME;
    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 195 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return IPADDRESS_WITH_PORT;
    }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 201 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 207 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return STRING;
    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 213 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return QUOTED_STRING;
    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 219 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 224 "libmemcached/options/scanner.l"
ECHO;
	YY_BREAK
#line 2301 "libmemcached/options/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of config_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 811 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 811 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 810);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void config__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
/* %if-c-only */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void config_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 224 "libmemcached/options/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  config_lex_destroy(scanner);
}


