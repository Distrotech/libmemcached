#line 2 "libmemcached/options/scanner.cc"
#line 22 "libmemcached/options/scanner.l"

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wunused-parameter"

#include <libmemcached/options/context.h>
#include <libmemcached/options/parser.h>
#include <libmemcached/options/string.h>
#include <libmemcached/options/symbol.h>

#define YY_EXTRA_TYPE Context*




#line 18 "libmemcached/options/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 90
#define YY_END_OF_BUFFER 91
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[769] =
    {   0,
        0,    0,   91,   89,    5,    5,    1,   89,   89,   89,
        2,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,    0,   88,   73,    0,    0,
        0,    2,    3,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    6,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,    4,   87,   87,    2,
        3,   87,   78,   87,   69,   87,   87,   87,   87,   87,
       87,   77,   87,   87,   87,   87,   87,   87,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,    4,
        0,   87,    2,    3,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   71,   73,   73,
       73,   73,   73,   73,    0,    0,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,    4,   87,   87,    3,   87,   67,   70,   72,   87,
        0,   83,   87,   87,   87,   87,   87,   66,   87,   73,
       73,   73,   73,   73,   73,   73,    0,    0,    0,    0,
        0,    0,   73,   73,   73,   73,   73,    0,    0,   73,
       73,    0,    0,   73,   73,   73,    0,    0,    0,   73,

        0,   73,    4,    0,   87,    3,   87,    0,   87,   87,
       87,   87,   75,   84,   76,   87,    0,    0,   73,   73,
       73,   73,   73,    0,   21,    0,    0,    0,    0,    0,
        0,    0,   73,   73,    0,    0,   73,   73,    0,    0,
       73,   73,    0,    0,   73,    0,    0,   73,    0,    0,
        0,    0,    0,    0,    0,    0,   73,    4,   86,   87,
       87,   87,   87,   81,   79,   65,   85,   68,    0,    0,
       73,   73,   73,   73,   73,    0,    0,    0,    0,    0,
        0,    0,    0,   73,   73,    0,    0,   73,   73,    0,
        0,    0,    0,   73,    0,    0,   73,    0,    0,   73,

        0,    0,    0,    0,    0,    0,    0,    0,   73,   86,
       87,   82,   80,    0,    0,    0,    0,    0,    0,   73,
       73,   73,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,    0,    0,    0,    0,    0,   73,    0,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,   73,    0,    0,    0,    0,   62,    0,    0,   61,
        0,    0,   86,   87,    0,    0,    0,    0,    0,    0,
       73,    0,    0,   73,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   74,    0,    0,    0,    0,    0,    0,
       73,    0,    0,   73,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   60,   59,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   50,   49,    0,    0,    0,    0,
        0,    0,    0,    0,    9,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   73,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
       64,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   52,   51,    0,    0,   54,
        0,    0,   53,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   38,   37,
        0,    0,    0,    0,   44,   43,    0,    0,    0,    0,

        0,   58,    0,   57,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   34,   33,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   56,   55,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   40,   39,    0,    0,    0,    0,    0,    0,    0,
        0,   13,   12,   15,   14,   17,   16,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   11,   10,   19,

       18,    0,    0,    0,   27,    0,    0,   26,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   29,    0,   28,    0,    0,    0,    0,    0,
        0,   46,   48,   45,   47,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   24,   32,
       31,    0,    0,    0,    0,   23,   22,    0,    0,    0,
        0,    0,    0,   42,   41,   36,   35,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   11,   11,   11,   18,    1,    1,
       19,    1,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,    1,    1,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    3,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[773] =
    {   0,
        0,  798,  802, 2094, 2094, 2094, 2094,  778,  760,  726,
       65,   72,    0,   55,   50,   57,   71,   55,   62,   72,
       74,   78,   75,   63,  733,  716,  701,  132,  195,  103,
      208,  251,  215,  235,  228,  230,  237,  245,  265,  281,
      286,  294,  296,  311,  313,  327,  343,  354,  361,  370,
      702, 2094,  418,   63,  305,   71,   78,   89,   78,  246,
      291,  362,  361,   91,  113,  189,  419,  398,  483,  526,
      490,  416,  467,  503,  508,  510,  515,  517,  543,  551,
      558,  570,  577,  579,  591,  622,  599,  624,  209,  224,
      254,  277,  274,  306,  210,  311,  321,  323,  342,  337,

      346,  349,  353,  376,  571,  401,  407,  419,  412,  639,
      672,  715,  758,  646,  635,  687,  670,  693,  695,  748,
      739,  704,  750,  776,  702,  782,  791,  784,  416,  432,
      436,  567,  469,  519,  779,  793,  524,  531,  533,  544,
      642,  292,  629,  628,  372,  641,  685,  702,  401,  780,
      721,  843,  856,  827,  864,  877,  879,  884,  886,  891,
      893,  900,  906,  912,  914,  920,  936,  943,  955,  485,
      741,  769,  769,  788,  776,  800,  818,  887,  888,  904,
      925,  916,  929,  943,  626,  941,  936,  932,  934,  933,
      954,  940,  941,  959,  707,  951,  957,  969,  946,  714,

      948,  968, 1020, 1033, 1076, 2094, 1054, 1052, 1059, 1068,
     1070, 1095, 1100, 1102, 1111, 1120,  987,  999,  980,  988,
     1001, 1006, 1014, 1028, 2094, 1043, 1057, 1067, 1087, 1078,
     1081, 1100, 1098, 1095, 1095, 1096, 1093, 1105, 1114, 1115,
      731, 1108, 1119, 1121, 1111, 1124, 1127, 1118, 1141, 1133,
     1144, 1137, 1150, 1152, 1156, 1157, 1139, 2094, 1207, 1180,
     1189, 1197, 1220, 1225, 1234, 1240, 1242, 1247, 1160, 1174,
      803,  889, 1172, 1186, 1210, 1208, 1209, 1221,  682,  657,
     1232,  601,  590, 1213, 1011, 1232, 1234, 1252, 1237, 1235,
     1236, 1230, 1231, 1267, 1241, 1243, 1269, 1243, 1244, 1240,

     1257, 1259, 1266, 1268, 1264, 1281, 1283, 1272, 1303, 1346,
     1331, 1317, 1325, 1290, 1292, 1284, 1285, 1303, 1305, 1308,
     1305, 1308, 1313, 1316, 1328, 1333, 1328, 1335, 1339, 1334,
        0, 1344, 1346, 1349, 1351, 1354, 1355, 1341, 1363, 1364,
     1361, 1362, 1369, 2094, 1371, 1374, 1375, 1381, 1390, 1364,
     1366, 1402, 1371, 1396, 1387, 1400, 2094, 1391, 1393, 2094,
     1404, 1405, 1432, 1434, 1415, 1421, 1407, 1413, 1428, 1432,
     1434, 1421, 1424, 1426, 1439, 1440,  627, 1431, 1449,  578,
     1435, 1454, 1450, 1451, 1457, 1458, 1460, 1462, 1464, 1455,
     1457, 1465, 1466, 1484, 1485, 1472, 1473, 1486, 1488, 1490,

     1493, 1480, 1481, 1499, 1500, 1507, 1492, 1508, 1495, 1509,
     1510, 1514, 1516, 1562, 1506, 1512, 1518, 1524, 1523, 1524,
     1535, 1533, 1536, 1540,  615,  575, 1529, 1549, 1535, 1533,
     1552, 1538,  611,  567, 1546, 1548, 1539, 1540, 1582, 1550,
     1552, 1569, 1570, 1568, 1569, 1559, 1565, 1584, 1579, 1591,
     1581, 1577, 1578, 1598, 1602, 1594, 1604, 1609, 1599, 1608,
     1614, 2094, 2094, 1591, 1592,  566,  564, 1598, 1599, 1604,
     1606, 1622, 1623, 1618, 1619, 1619, 1620, 1624, 1640, 1641,
     1643, 1648, 1644, 1646, 1635, 1639, 1639, 1641,  587,  584,
     1646, 1647, 1646, 1649, 1655, 1656, 1660, 1661, 1659, 1661,

     1660, 1679, 1663, 1682, 2094, 2094, 1669, 1671, 1685, 1683,
     1676, 1693, 1691, 1679, 2094, 2094, 1697, 1699, 1696, 1699,
     1711, 1713, 1710, 1711, 1718, 1719, 1711, 1708, 1709, 1713,
     1730, 1718, 1717, 1734, 1722, 1737, 1739, 1728, 1729, 2094,
     2094, 1750, 1751,  583,  572, 1736, 1737, 1738, 1740,  558,
      550,  553,  550,  499,  486, 2094, 2094, 1743, 1763, 2094,
     1748, 1767, 2094, 1758, 1759, 1774, 1775, 1760, 1761, 1769,
     1775, 1774, 1775,  509, 1786, 1788, 1789, 1776, 1785, 1797,
     1783, 1796, 1794, 1795,  508,  502, 1796, 1797, 2094, 2094,
     1795, 1799, 1804, 1806, 2094, 2094, 1807, 1808, 1809, 1812,

     1827, 2094, 1828, 2094, 1815, 1816, 1826, 1828, 1824, 1825,
     1842, 1843, 1829, 1831, 2094, 1850, 1851, 1845, 1861, 1864,
     1848, 1864, 1868, 1861, 1864, 2094, 2094, 1866, 1868,  491,
      471, 1876, 1877, 1876, 1877, 1878, 1879, 2094, 2094, 1869,
     1875, 1885, 1886, 1880, 1882,  446,  442, 1882, 1884, 1897,
     1901, 1898, 1909, 1900, 1906, 1912, 1903, 1914, 1918, 1921,
     1923, 2094, 2094,  441,  381, 1908, 1909, 1910, 1913, 1921,
     1922, 2094, 2094, 2094, 2094, 2094, 2094,  386,  378, 1918,
     1919, 1948,  365, 1940, 1951,  349, 1942, 1952, 1953, 1955,
     1957, 1952, 1953, 1966, 1967, 1968, 1969, 2094, 2094, 2094,

     2094,  300,  284, 1957, 2094,  306, 1959, 2094,  290, 1980,
     1983, 1985, 1987, 1980, 1981,  287,  274,  253,  252, 1982,
     1983, 1984, 2094, 1985, 2094, 1978, 1984,  240,  200, 1992,
     1993, 2094, 2094, 2094, 2094, 2002, 2004,  215,  196,  132,
      120, 1992, 1994, 2005, 2009, 1994, 2000, 2094, 2094, 2094,
     2094, 2021, 2022, 2008, 2009, 2094, 2094, 2030, 2034,  119,
      116, 2034, 2036, 2094, 2094, 2094, 2094, 2094, 2087,  126,
     2090,  113
    } ;

static yyconst flex_int16_t yy_def[773] =
    {   0,
      768,    1,  768,  768,  768,  768,  768,  769,  768,  768,
      770,  768,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  771,  769,  769,  768,  768,  772,
      772,  772,  768,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      771,  768,   28,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  768,  772,  772,  772,
      768,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,  768,
      772,  772,  772,  768,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,   53,   53,
       53,   53,   53,   53,  768,  768,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,  768,  772,  772,  768,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,   53,
       53,   53,   53,   53,   53,   53,  768,  768,  768,  768,
      768,  768,   53,   53,   53,   53,   53,  768,  768,   53,
       53,  768,  768,   53,   53,   53,  768,  768,  768,   53,

      768,   53,  768,  772,  772,  768,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  768,  768,   53,   53,
       53,   53,   53,  768,  768,  768,  768,  768,  768,  768,
      768,  768,   53,   53,  768,  768,   53,   53,  768,  768,
       53,   53,  768,  768,   53,  768,  768,   53,  768,  768,
      768,  768,  768,  768,  768,  768,   53,  768,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  768,  768,
       53,   53,   53,   53,   53,  768,  768,  768,  768,  768,
      768,  768,  768,   53,   53,  768,  768,   53,   53,  768,
      768,  768,  768,   53,  768,  768,   53,  768,  768,   53,

      768,  768,  768,  768,  768,  768,  768,  768,   53,  772,
      772,  772,  772,  768,  768,  768,  768,  768,  768,   53,
       53,   53,  768,  768,  768,  768,  768,  768,  768,  768,
       53,  768,  768,  768,  768,  768,  768,   53,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,   53,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  772,  772,  768,  768,  768,  768,  768,  768,
       53,  768,  768,   53,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,   53,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  772,  768,  768,  768,  768,  768,  768,
       53,  768,  768,   53,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,   53,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,   53,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,   53,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,   53,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,    0,  768,  768,
      768,  768
    } ;

static yyconst flex_int16_t yy_nxt[2168] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       11,   11,   11,   11,   11,   11,   11,   12,    7,    4,
       13,   13,   14,   15,   16,   17,   13,   18,   19,   20,
       13,   13,   21,   13,   13,   13,   13,   22,   23,   24,
       13,   13,   13,   13,   13,   13,    4,   13,   13,   14,
       15,   16,   17,   13,   18,   19,   20,   13,   13,   21,
       13,   13,   13,   13,   22,   23,   24,   13,   13,   13,
       13,   13,   13,   31,   36,   32,   32,   32,   32,   32,
       32,   32,   33,   33,   33,   33,   33,   33,   33,   34,
       37,   39,   35,   41,   38,   42,   43,   44,   47,   49,

       50,   36,   48,   89,   40,   92,   93,   30,   45,   94,
       30,   30,   95,  107,   46,   68,   34,   37,   39,   35,
       41,   38,   42,   43,   44,   47,   49,   50,   30,   48,
       89,   40,   92,   93,  765,   45,   94,  764,  751,   95,
      107,   46,   53,   53,   53,   53,   53,   53,   53,   30,
      750,  108,   54,   55,   56,   57,   53,   53,   53,   58,
       59,   53,   53,   53,   53,   60,   53,   61,   53,   62,
       63,   64,   65,   66,   53,   53,   53,   53,  108,   54,
       55,   56,   57,   53,   53,   53,   58,   59,   53,   53,
       53,   53,   60,   53,   61,   53,   62,   63,   64,   65,

       66,   53,   53,   53,   53,   67,   67,   67,   67,   67,
       67,   67,   30,  109,  749,   30,   30,  135,   69,   69,
       69,   69,   69,   69,   69,   71,   71,   71,   71,   71,
       71,   71,   30,  748,   30,   30,   30,   30,   30,   30,
      109,   30,   30,   30,   30,   30,  743,  742,  129,   30,
       73,   74,   30,   30,   30,   30,  136,  130,   30,   31,
       75,   70,   70,   70,   70,   70,   70,   70,   72,   30,
      735,  734,   30,   30,   30,  129,   30,   73,   74,  131,
       96,   30,   76,   30,  130,   30,   97,   75,   30,   30,
       30,   30,  733,   30,   30,   72,   77,   30,   30,  188,

       30,   30,   30,   30,   30,  732,  131,   96,  725,   76,
      132,   30,  133,   97,   79,   30,   80,   30,   30,   30,
       30,   30,   78,   77,  723,   98,   82,   30,   99,   81,
      721,   30,   30,   90,   30,   30,   83,  132,  189,  133,
       30,   79,   30,   80,  134,   91,  720,   30,  137,   78,
       30,   30,   98,  138,  139,   99,   81,   30,   30,   30,
       90,   30,   30,   83,   84,   30,  140,  708,   30,   30,
      141,  134,   91,   30,   30,  137,   85,   30,   30,  192,
      138,  139,  100,  705,  101,  103,  102,  142,  143,   30,
      144,   84,   86,  140,  104,  105,  701,  141,   87,  145,

       30,  106,   30,   85,  700,   30,   30,   30,  197,  100,
       88,  101,  103,  102,  142,  143,   30,  144,  193,   86,
       30,  104,  105,   30,   30,   87,  145,  693,  106,  110,
      110,  110,  110,  110,  110,  110,  148,   88,   53,   53,
       53,   53,  149,  150,   30,   53,   53,  198,  692,  151,
      170,   53,  171,   53,  115,   53,   53,   53,   53,   53,
      677,  172,   30,  148,  676,   53,   53,   53,   53,  149,
      150,   30,   53,   53,   30,   30,  151,  170,   53,  171,
       53,  115,   53,   53,   53,   53,   53,   30,  172,  663,
       30,  111,  217,  112,  112,  112,  112,  112,  112,  112,

      114,  114,  114,  114,  114,  114,  114,   30,  175,  662,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
      627,   30,   30,   30,   30,   30,  626,  615,  119,   30,
       30,  218,  600,   30,   31,  175,  113,  113,  113,  113,
      113,  113,  113,  116,  117,  599,  176,   30,  183,   30,
       30,   30,  184,  118,   30,   30,   30,  598,   30,   30,
      597,   30,   30,   30,  185,   30,   30,  120,  596,  186,
      116,  117,   30,  176,   30,  183,  595,   30,   30,  184,
      118,   30,  121,   30,   30,   30,   30,   30,  122,   30,
      590,  185,  173,  146,  120,   30,  186,   30,   30,   30,

      174,  589,  541,   30,   30,  540,   30,   30,  147,  121,
      518,  124,  517,  486,  125,  122,   30,  123,  485,  173,
      146,  478,  477,   30,  430,   30,   30,  174,   30,   30,
       30,   30,   30,  235,  427,  147,  330,   30,  124,   30,
      127,  125,   30,   30,  123,   30,  126,  329,  128,  152,
      152,  152,  152,  152,  152,  152,  155,  155,  155,  155,
      155,  155,  155,  156,  327,  187,  190,  127,   30,  191,
       30,  194,  236,  126,   30,  128,   30,   30,   30,   30,
       30,   30,  153,  153,  153,  153,  153,  153,  153,  326,
      156,   30,  187,  190,   30,   30,  191,   30,  194,   30,

       30,   30,   30,   30,   52,   27,   30,  158,   30,   30,
       30,   30,   30,  157,  246,  160,   30,  159,   30,   30,
       27,  254,   30,  111,  195,  154,  154,  154,  154,  154,
      154,  154,  164,   30,  158,   52,  167,  196,  292,   30,
      157,  161,  160,   30,  159,   29,   30,   30,   30,  202,
       30,  195,   30,  247,   30,   30,   30,   30,   30,  164,
      255,   30,   30,  167,  196,   30,   30,   28,  113,  113,
      113,  113,  113,  113,  113,  162,  202,  293,  219,  163,
       30,  165,   27,   30,   30,   30,   30,  199,   30,   30,
       30,   30,   30,  220,   30,   30,   30,  221,   30,   30,

      177,  768,  162,   25,   30,  219,  163,  224,  165,  178,
      316,  179,  222,  223,  180,  169,  166,  200,  225,  768,
      220,  168,   30,  181,  221,  182,  201,  177,   30,  768,
       30,   30,  768,  768,   30,  111,  178,   30,  179,  222,
      223,  180,  169,  166,  200,  768,  226,  768,  168,  317,
      181,  768,  182,  203,  203,  203,  203,  203,  203,  203,
       30,  768,  227,   30,  204,  768,  205,  205,  205,  205,
      205,  205,  205,   30,  206,  206,  206,  206,  206,  206,
      206,   30,  768,   30,   30,   30,   30,   30,   30,  227,
       30,   30,   30,   30,   30,   30,  318,   30,   30,   30,

       30,   30,   30,  768,   30,  768,  209,   30,   30,  210,
       30,  228,  768,   30,   30,  207,   30,  768,   30,   30,
       30,   30,   30,   30,   30,   30,  229,   30,   30,  211,
       30,  768,   30,  768,  213,  319,  768,  208,  228,   30,
       30,  768,  207,   30,   30,  212,   30,   30,  230,  231,
       30,   30,   30,  229,  232,  768,  211,  214,   30,   30,
       30,  213,   30,   30,  233,  768,   30,  234,  215,  237,
      238,  239,  212,  240,  768,  230,  231,  241,  242,  243,
      244,  232,   30,  245,  214,  248,  253,  249,  256,   30,
      250,  233,  216,  257,  234,  215,  237,  238,  239,  251,

      240,   30,  252,  768,  241,  242,  243,  244,  768,  768,
      245,  269,  248,  253,  249,  256,  768,  250,  332,  216,
      257,  768,  768,  270,  271,  272,  251,  273,  274,  252,
      258,  258,  258,  258,  258,  258,  258,   30,  269,  768,
       30,   30,  275,  259,  259,  259,  259,  259,  259,  259,
      270,  271,  272,  768,  273,  274,   30,  333,   30,   30,
       30,   30,   30,   30,  768,  262,   30,   30,  263,  275,
      276,  264,   30,  768,   30,   30,   30,   30,   30,   30,
       30,  768,  265,   30,  204,  277,  260,  260,  260,  260,
      260,  260,  260,  261,  266,  768,  278,  276,   30,   30,

       30,  768,   30,   30,   30,   30,   30,   30,   30,   30,
       30,  279,  277,  280,   30,   30,   30,  281,   30,   30,
      261,  266,   30,  278,   30,  282,  283,   30,   30,  284,
      768,  768,  285,  267,  286,  287,  288,  289,  279,  768,
      280,   30,  290,  291,  281,  294,   30,  295,   30,  296,
      297,  298,  282,  283,  299,  300,  284,   30,  268,  285,
      267,  286,  287,  288,  289,  301,   30,  302,  303,  290,
      291,  304,  294,  305,  295,  306,  296,  297,  298,  307,
      308,  299,  300,  309,   30,  268,  768,   30,  204,  314,
      768,  768,  301,   30,  302,  303,   30,   30,  304,  768,

      305,   30,  306,  315,   30,   30,  307,  308,  768,  312,
      309,   30,  320,  311,   30,   30,  314,  310,  310,  310,
      310,  310,  310,  310,   30,  321,   30,   30,   30,   30,
      315,  322,   30,   30,  313,   30,  323,  324,   30,  320,
      311,   30,   30,   30,   30,  325,   30,   30,   30,   30,
       30,   30,  321,   30,   30,   30,  328,  331,  322,  336,
      334,  768,  335,  323,  324,  338,   30,  339,  340,  341,
      342,   30,  325,  346,  343,  347,  348,  350,  351,  352,
       30,  353,  354,  328,  331,  344,   30,  334,   30,  335,
      355,  356,  338,   30,  339,  340,  341,  342,  337,  357,

      346,  358,  347,  359,  350,  351,  352,  360,  353,  354,
      361,  768,  372,  345,  365,  349,  366,  355,  356,  367,
      368,   30,  768,  768,   30,   30,  357,  768,  358,   30,
      359,  768,   30,   30,  360,   30,  768,  768,   30,   30,
      369,  365,  370,  366,  768,  371,  367,  368,  374,  362,
       30,  373,  375,   30,   30,  376,  363,  363,  363,  363,
      363,  363,  363,   30,  364,  768,  377,  369,  378,  370,
      379,   30,  371,  380,  381,  374,  382,   30,  383,  375,
      384,  385,  376,  386,  387,  388,  389,  390,  391,  392,
      393,  364,   30,  377,  394,  378,  395,  379,  396,  397,

      380,  381,  402,  382,  403,  383,  406,  384,  385,  404,
      386,  387,  388,  389,  390,  391,  392,  393,  398,  399,
      407,  394,  408,  395,  409,  396,  397,  400,  401,  402,
      410,  403,  411,  406,  412,  413,   30,  415,   30,   30,
       30,   30,   30,  416,  417,  398,  399,  407,  405,  408,
      418,  409,  419,  768,  400,  401,  420,  410,  421,  411,
      422,  412,  413,  423,  415,  424,  425,  426,  428,  429,
      416,  417,  431,  414,  432,  433,  434,  418,   30,  419,
       30,  435,  436,  420,  437,  421,  438,  422,  439,  440,
      423,  441,  424,  425,  426,  428,  429,  442,  443,  431,

      414,  432,  433,  434,  444,  445,  446,  447,  435,  436,
      448,  437,  449,  438,  450,  439,  440,  451,  441,  452,
      453,  454,  455,  458,  442,  443,  461,  456,  459,  462,
      463,  444,  445,  446,  447,  457,  460,  448,  464,  449,
      465,  450,  472,  768,  451,  466,  452,  453,  454,  455,
      458,  467,  468,  461,  456,  459,  462,  463,  469,  470,
      471,  474,  457,  460,  475,  464,   30,  465,  476,   30,
       30,  479,  466,  480,  481,  482,  483,  484,  467,  468,
      487,  473,  488,  489,  490,  469,  470,  471,  474,  491,
      493,  475,  494,  495,  496,  476,  497,  498,  479,  499,

      480,  481,  482,  483,  484,  500,  501,  487,   30,  488,
      489,  490,  502,  503,  504,  505,  506,  493,  507,  494,
      495,  496,  508,  497,  498,  509,  499,  510,  492,  511,
      512,  513,  500,  501,  514,  515,  516,  519,  520,  502,
      503,  504,  505,  506,  521,  507,  522,  523,  524,  508,
      525,  526,  509,  527,  510,  528,  511,  512,  513,  529,
      530,  514,  515,  516,  519,  520,  531,  532,  533,  534,
      535,  521,  536,  522,  523,  524,  537,  525,  526,  538,
      527,  539,  528,  542,  543,  544,  529,  530,  545,  546,
      547,  548,  549,  531,  532,  533,  534,  535,  550,  536,

      551,  552,  553,  537,  554,  555,  538,  556,  539,  557,
      542,  543,  544,  558,  559,  545,  546,  547,  548,  549,
      560,  561,  562,  563,  564,  550,  565,  551,  552,  553,
      566,  554,  555,  567,  556,  568,  557,  569,  570,  571,
      558,  559,  572,  573,  574,  575,  576,  560,  561,  562,
      563,  564,  577,  565,  578,  579,  580,  566,  581,  582,
      567,  583,  568,  584,  569,  570,  571,  585,  586,  572,
      573,  574,  575,  576,  587,  588,  591,  592,  593,  577,
      594,  578,  579,  580,  601,  581,  582,  602,  583,  603,
      584,  604,  605,  606,  585,  586,  607,  608,  609,  610,

      611,  587,  588,  591,  592,  593,  612,  594,  613,  614,
      616,  601,  617,  618,  602,  619,  603,  620,  604,  605,
      606,  621,  622,  607,  608,  609,  610,  611,  623,  624,
      625,  628,  629,  612,  630,  613,  614,  616,  631,  617,
      618,  632,  619,  633,  620,  634,  635,  636,  621,  622,
      637,  638,  639,  640,  641,  623,  624,  625,  628,  629,
      642,  630,  643,  644,  645,  631,  646,  647,  632,  648,
      633,  649,  634,  635,  636,  650,  651,  637,  638,  639,
      640,  641,  652,  653,  654,  655,  656,  642,  657,  643,
      644,  645,  658,  646,  647,  659,  648,  660,  649,  661,

      664,  665,  650,  651,  666,  667,  668,  669,  670,  652,
      653,  654,  655,  656,  671,  657,  672,  673,  674,  658,
      675,  678,  659,  679,  660,  680,  661,  664,  665,  681,
      682,  666,  667,  668,  669,  670,  683,  684,  685,  686,
      687,  671,  688,  672,  673,  674,  689,  675,  678,  690,
      679,  691,  680,  694,  695,  696,  681,  682,  697,  698,
      699,  702,  703,  683,  684,  685,  686,  687,  704,  688,
      706,  707,  709,  689,  710,  711,  690,  712,  691,  713,
      694,  695,  696,  714,  715,  697,  698,  699,  702,  703,
      716,  717,  718,  719,  722,  704,  724,  706,  707,  709,

      726,  710,  711,  727,  712,  728,  713,  729,  730,  731,
      714,  715,  736,  737,  738,  739,  740,  716,  717,  718,
      719,  722,  741,  724,  744,  745,  746,  726,  747,  752,
      727,  753,  728,  754,  729,  730,  731,  755,  756,  736,
      737,  738,  739,  740,  757,  758,  759,  760,  761,  741,
      762,  744,  745,  746,  763,  747,  752,  766,  753,  767,
      754,  768,  768,  768,  755,  756,  768,  768,  768,  768,
      768,  757,  758,  759,  760,  761,  768,  762,  768,  768,
      768,  763,  768,  768,  766,  768,  767,   26,  768,   26,
       51,   51,   51,    3,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768
    } ;

static yyconst flex_int16_t yy_chk[2168] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   11,   15,   11,   11,   11,   11,   11,
       11,   11,   12,   12,   12,   12,   12,   12,   12,   14,
       16,   17,   14,   18,   16,   19,   20,   21,   22,   23,

       24,   15,   22,   54,   17,   56,   57,   30,   21,   58,
       30,   30,   59,   64,   21,  772,   14,   16,   17,   14,
       18,   16,   19,   20,   21,   22,   23,   24,  770,   22,
       54,   17,   56,   57,  761,   21,   58,  760,  741,   59,
       64,   21,   28,   28,   28,   28,   28,   28,   28,   30,
      740,   65,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   65,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   29,   29,   29,   29,   29,
       29,   29,   31,   66,  739,   31,   31,   95,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,
       33,   33,   35,  738,   36,   35,   35,   36,   36,   34,
       66,   37,   34,   34,   37,   37,  729,  728,   89,   38,
       35,   36,   38,   38,   31,   32,   95,   90,   32,   32,
       37,   32,   32,   32,   32,   32,   32,   32,   34,   39,
      719,  718,   39,   39,   35,   89,   36,   35,   36,   91,
       60,   34,   38,   37,   90,   40,   60,   37,   40,   40,
       41,   38,  717,   41,   41,   34,   39,   32,   42,  142,

       43,   42,   42,   43,   43,  716,   91,   60,  709,   38,
       92,   39,   93,   60,   41,   44,   42,   45,   44,   44,
       45,   45,   40,   39,  706,   61,   44,   40,   61,   43,
      703,   46,   41,   55,   46,   46,   45,   92,  142,   93,
       42,   41,   43,   42,   94,   55,  702,   47,   96,   40,
       47,   47,   61,   97,   98,   61,   43,   44,   48,   45,
       55,   48,   48,   45,   46,   49,   99,  686,   49,   49,
      100,   94,   55,   46,   50,   96,   47,   50,   50,  145,
       97,   98,   62,  683,   62,   63,   62,  101,  102,   47,
      103,   46,   48,   99,   63,   63,  679,  100,   49,  104,

       48,   63,   68,   47,  678,   68,   68,   49,  149,   62,
       50,   62,   63,   62,  101,  102,   50,  103,  145,   48,
       72,   63,   63,   72,   72,   49,  104,  665,   63,   67,
       67,   67,   67,   67,   67,   67,  106,   50,   53,   53,
       53,   53,  107,  108,   68,   53,   53,  149,  664,  109,
      129,   53,  130,   53,   72,   53,   53,   53,   53,   53,
      647,  131,   72,  106,  646,   53,   53,   53,   53,  107,
      108,   73,   53,   53,   73,   73,  109,  129,   53,  130,
       53,   72,   53,   53,   53,   53,   53,   69,  131,  631,
       69,   69,  170,   69,   69,   69,   69,   69,   69,   69,

       71,   71,   71,   71,   71,   71,   71,   74,  133,  630,
       74,   74,   75,   73,   76,   75,   75,   76,   76,   77,
      586,   78,   77,   77,   78,   78,  585,  574,   78,   69,
       70,  170,  555,   70,   70,  133,   70,   70,   70,   70,
       70,   70,   70,   74,   76,  554,  134,   79,  137,   74,
       79,   79,  138,   77,   75,   80,   76,  553,   80,   80,
      552,   77,   81,   78,  139,   81,   81,   79,  551,  140,
       74,   76,   70,  134,   82,  137,  550,   82,   82,  138,
       77,   83,   80,   84,   83,   83,   84,   84,   81,   79,
      545,  139,  132,  105,   79,   85,  140,   80,   85,   85,

      132,  544,  490,   87,   81,  489,   87,   87,  105,   80,
      467,   84,  466,  434,   85,   81,   82,   83,  433,  132,
      105,  426,  425,   83,  380,   84,   86,  132,   88,   86,
       86,   88,   88,  185,  377,  105,  283,   85,   84,  115,
       87,   85,  115,  115,   83,   87,   86,  282,   88,  110,
      110,  110,  110,  110,  110,  110,  114,  114,  114,  114,
      114,  114,  114,  115,  280,  141,  143,   87,   86,  144,
       88,  146,  185,   86,  117,   88,  111,  117,  117,  111,
      111,  115,  111,  111,  111,  111,  111,  111,  111,  279,
      115,  116,  141,  143,  116,  116,  144,  118,  146,  119,

      118,  118,  119,  119,   51,   27,  125,  117,  122,  125,
      125,  122,  122,  116,  195,  119,  117,  118,  111,  112,
       26,  200,  112,  112,  147,  112,  112,  112,  112,  112,
      112,  112,  122,  116,  117,   25,  125,  148,  241,  118,
      116,  119,  119,  121,  118,   10,  121,  121,  125,  151,
      122,  147,  120,  195,  123,  120,  120,  123,  123,  122,
      200,  112,  113,  125,  148,  113,  113,    9,  113,  113,
      113,  113,  113,  113,  113,  120,  151,  241,  171,  121,
      124,  123,    8,  124,  124,  121,  126,  150,  128,  126,
      126,  128,  128,  172,  120,  127,  123,  173,  127,  127,

      135,    3,  120,    2,  113,  171,  121,  176,  123,  135,
      271,  135,  174,  175,  136,  127,  124,  150,  176,    0,
      172,  126,  124,  136,  173,  136,  150,  135,  126,    0,
      128,  154,    0,    0,  154,  154,  135,  127,  135,  174,
      175,  136,  127,  124,  150,    0,  176,    0,  126,  271,
      136,    0,  136,  152,  152,  152,  152,  152,  152,  152,
      153,    0,  177,  153,  153,    0,  153,  153,  153,  153,
      153,  153,  153,  154,  155,  155,  155,  155,  155,  155,
      155,  156,    0,  157,  156,  156,  157,  157,  158,  177,
      159,  158,  158,  159,  159,  160,  272,  161,  160,  160,

      161,  161,  153,    0,  162,    0,  161,  162,  162,  161,
      163,  178,    0,  163,  163,  156,  164,    0,  165,  164,
      164,  165,  165,  156,  166,  157,  179,  166,  166,  163,
      158,    0,  159,    0,  165,  272,    0,  160,  178,  161,
      167,    0,  156,  167,  167,  164,  162,  168,  180,  181,
      168,  168,  163,  179,  182,    0,  163,  166,  164,  169,
      165,  165,  169,  169,  183,    0,  166,  184,  167,  186,
      187,  188,  164,  189,    0,  180,  181,  190,  191,  192,
      193,  182,  167,  194,  166,  196,  199,  197,  201,  168,
      197,  183,  169,  202,  184,  167,  186,  187,  188,  198,

      189,  169,  198,    0,  190,  191,  192,  193,    0,    0,
      194,  217,  196,  199,  197,  201,    0,  197,  285,  169,
      202,    0,    0,  218,  219,  220,  198,  221,  222,  198,
      203,  203,  203,  203,  203,  203,  203,  204,  217,    0,
      204,  204,  223,  204,  204,  204,  204,  204,  204,  204,
      218,  219,  220,    0,  221,  222,  208,  285,  207,  208,
      208,  207,  207,  209,    0,  208,  209,  209,  208,  223,
      224,  209,  210,    0,  211,  210,  210,  211,  211,  204,
      205,    0,  210,  205,  205,  226,  205,  205,  205,  205,
      205,  205,  205,  207,  211,    0,  227,  224,  208,  212,

      207,    0,  212,  212,  213,  209,  214,  213,  213,  214,
      214,  228,  226,  229,  210,  215,  211,  230,  215,  215,
      207,  211,  205,  227,  216,  231,  232,  216,  216,  233,
        0,    0,  234,  212,  235,  236,  237,  238,  228,    0,
      229,  212,  239,  240,  230,  242,  213,  243,  214,  244,
      245,  246,  231,  232,  247,  248,  233,  215,  216,  234,
      212,  235,  236,  237,  238,  249,  216,  250,  251,  239,
      240,  252,  242,  253,  243,  254,  244,  245,  246,  255,
      256,  247,  248,  257,  260,  216,    0,  260,  260,  269,
        0,    0,  249,  261,  250,  251,  261,  261,  252,    0,

      253,  262,  254,  270,  262,  262,  255,  256,    0,  262,
      257,  259,  273,  261,  259,  259,  269,  259,  259,  259,
      259,  259,  259,  259,  263,  274,  260,  263,  263,  264,
      270,  275,  264,  264,  263,  261,  276,  277,  265,  273,
      261,  265,  265,  262,  266,  278,  267,  266,  266,  267,
      267,  268,  274,  259,  268,  268,  281,  284,  275,  288,
      286,    0,  287,  276,  277,  289,  263,  290,  291,  292,
      293,  264,  278,  295,  294,  296,  297,  298,  299,  300,
      265,  301,  302,  281,  284,  294,  266,  286,  267,  287,
      303,  304,  289,  268,  290,  291,  292,  293,  288,  305,

      295,  306,  296,  307,  298,  299,  300,  308,  301,  302,
      309,    0,  321,  294,  314,  297,  315,  303,  304,  316,
      317,  312,    0,    0,  312,  312,  305,    0,  306,  313,
      307,    0,  313,  313,  308,  311,    0,    0,  311,  311,
      318,  314,  319,  315,    0,  320,  316,  317,  322,  309,
      310,  321,  323,  310,  310,  324,  310,  310,  310,  310,
      310,  310,  310,  312,  311,    0,  325,  318,  326,  319,
      327,  313,  320,  328,  329,  322,  330,  311,  332,  323,
      333,  334,  324,  335,  336,  337,  338,  339,  340,  341,
      342,  311,  310,  325,  343,  326,  345,  327,  346,  347,

      328,  329,  350,  330,  351,  332,  353,  333,  334,  352,
      335,  336,  337,  338,  339,  340,  341,  342,  348,  348,
      354,  343,  355,  345,  356,  346,  347,  349,  349,  350,
      358,  351,  359,  353,  361,  362,  363,  365,  364,  363,
      363,  364,  364,  366,  367,  348,  348,  354,  352,  355,
      368,  356,  369,    0,  349,  349,  370,  358,  371,  359,
      372,  361,  362,  373,  365,  374,  375,  376,  378,  379,
      366,  367,  381,  364,  382,  383,  384,  368,  363,  369,
      364,  385,  386,  370,  387,  371,  388,  372,  389,  390,
      373,  391,  374,  375,  376,  378,  379,  392,  393,  381,

      364,  382,  383,  384,  394,  395,  396,  397,  385,  386,
      398,  387,  399,  388,  400,  389,  390,  401,  391,  402,
      403,  404,  405,  407,  392,  393,  409,  406,  408,  410,
      411,  394,  395,  396,  397,  406,  408,  398,  412,  399,
      413,  400,  421,    0,  401,  415,  402,  403,  404,  405,
      407,  416,  417,  409,  406,  408,  410,  411,  418,  419,
      420,  422,  406,  408,  423,  412,  414,  413,  424,  414,
      414,  427,  415,  428,  429,  430,  431,  432,  416,  417,
      435,  421,  436,  437,  438,  418,  419,  420,  422,  439,
      440,  423,  441,  442,  443,  424,  444,  445,  427,  446,

      428,  429,  430,  431,  432,  447,  448,  435,  414,  436,
      437,  438,  449,  450,  451,  452,  453,  440,  454,  441,
      442,  443,  455,  444,  445,  456,  446,  457,  439,  458,
      459,  460,  447,  448,  461,  464,  465,  468,  469,  449,
      450,  451,  452,  453,  470,  454,  471,  472,  473,  455,
      474,  475,  456,  476,  457,  477,  458,  459,  460,  478,
      479,  461,  464,  465,  468,  469,  480,  481,  482,  483,
      484,  470,  485,  471,  472,  473,  486,  474,  475,  487,
      476,  488,  477,  491,  492,  493,  478,  479,  494,  495,
      496,  497,  498,  480,  481,  482,  483,  484,  499,  485,

      500,  501,  502,  486,  503,  504,  487,  507,  488,  508,
      491,  492,  493,  509,  510,  494,  495,  496,  497,  498,
      511,  512,  513,  514,  517,  499,  518,  500,  501,  502,
      519,  503,  504,  520,  507,  521,  508,  522,  523,  524,
      509,  510,  525,  526,  527,  528,  529,  511,  512,  513,
      514,  517,  530,  518,  531,  532,  533,  519,  534,  535,
      520,  536,  521,  537,  522,  523,  524,  538,  539,  525,
      526,  527,  528,  529,  542,  543,  546,  547,  548,  530,
      549,  531,  532,  533,  558,  534,  535,  559,  536,  561,
      537,  562,  564,  565,  538,  539,  566,  567,  568,  569,

      570,  542,  543,  546,  547,  548,  571,  549,  572,  573,
      575,  558,  576,  577,  559,  578,  561,  579,  562,  564,
      565,  580,  581,  566,  567,  568,  569,  570,  582,  583,
      584,  587,  588,  571,  591,  572,  573,  575,  592,  576,
      577,  593,  578,  594,  579,  597,  598,  599,  580,  581,
      600,  601,  603,  605,  606,  582,  583,  584,  587,  588,
      607,  591,  608,  609,  610,  592,  611,  612,  593,  613,
      594,  614,  597,  598,  599,  616,  617,  600,  601,  603,
      605,  606,  618,  619,  620,  621,  622,  607,  623,  608,
      609,  610,  624,  611,  612,  625,  613,  628,  614,  629,

      632,  633,  616,  617,  634,  635,  636,  637,  640,  618,
      619,  620,  621,  622,  641,  623,  642,  643,  644,  624,
      645,  648,  625,  649,  628,  650,  629,  632,  633,  651,
      652,  634,  635,  636,  637,  640,  653,  654,  655,  656,
      657,  641,  658,  642,  643,  644,  659,  645,  648,  660,
      649,  661,  650,  666,  667,  668,  651,  652,  669,  670,
      671,  680,  681,  653,  654,  655,  656,  657,  682,  658,
      684,  685,  687,  659,  688,  689,  660,  690,  661,  691,
      666,  667,  668,  692,  693,  669,  670,  671,  680,  681,
      694,  695,  696,  697,  704,  682,  707,  684,  685,  687,

      710,  688,  689,  711,  690,  712,  691,  713,  714,  715,
      692,  693,  720,  721,  722,  724,  726,  694,  695,  696,
      697,  704,  727,  707,  730,  731,  736,  710,  737,  742,
      711,  743,  712,  744,  713,  714,  715,  745,  746,  720,
      721,  722,  724,  726,  747,  752,  753,  754,  755,  727,
      758,  730,  731,  736,  759,  737,  742,  762,  743,  763,
      744,    0,    0,    0,  745,  746,    0,    0,    0,    0,
        0,  747,  752,  753,  754,  755,    0,  758,    0,    0,
        0,  759,    0,    0,  762,    0,  763,  769,    0,  769,
      771,  771,  771,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768
    } ;

static yyconst flex_int16_t yy_rule_linenum[90] =
    {   0,
       76,   78,   80,   82,   84,   87,   91,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  147,  149,  150,  152,  153,  154,  155,  156,  157,
      159,  160,  163,  168,  169,  170,  172,  173,  174,  175,
      176,  177,  178,  179,  180,  182,  191,  209,  215
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/options/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached Scanner and Parser
 *
 *  Copyright (C) 2011 DataDifferental, http://datadifferential.com
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 * 
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 37 "libmemcached/options/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM config_get_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= context->length - context->pos; \
    result > max_size ? result = max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1320 "libmemcached/options/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * out_str ,yyscan_t yyscanner );

int config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int line_number ,yyscan_t yyscanner );

int config_get_column  (yyscan_t yyscanner );

void config_set_column (int column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 73 "libmemcached/options/scanner.l"



#line 1627 "libmemcached/options/scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 769 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2094 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 90 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 90 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 91 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "libmemcached/options/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 78 "libmemcached/options/scanner.l"
{ yylval->number = atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 80 "libmemcached/options/scanner.l"
{ yylval->server.port = atoi(yytext +1); return PORT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 82 "libmemcached/options/scanner.l"
{ yylval->server.weight = atoi(yytext +2); return WEIGHT_START; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 84 "libmemcached/options/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 87 "libmemcached/options/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; yyextra->set_server(); return SERVER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 95 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 97 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 99 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 100 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 101 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 102 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 103 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 104 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 105 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return DISTRIBUTION; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 106 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 107 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 108 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 109 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 110 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 111 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 112 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 113 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 114 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 115 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NOREPLY; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 116 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 117 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 118 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 119 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 120 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 121 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 122 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 123 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 124 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 125 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 126 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 127 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 128 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 129 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 130 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 132 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 133 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 134 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 135 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 136 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 137 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 138 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 139 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 140 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 141 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 142 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 143 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 144 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 145 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 146 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 147 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 152 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return INCLUDE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 153 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RESET; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 154 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PARSER_DEBUG; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 155 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 156 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return END; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 157 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return ERROR; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 159 "libmemcached/options/scanner.l"
{ return TRUE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 160 "libmemcached/options/scanner.l"
{ return FALSE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 163 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 168 "libmemcached/options/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 169 "libmemcached/options/scanner.l"
{ return MODULA; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 170 "libmemcached/options/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 172 "libmemcached/options/scanner.l"
{ return MD5; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 173 "libmemcached/options/scanner.l"
{ return CRC; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 174 "libmemcached/options/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 175 "libmemcached/options/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 176 "libmemcached/options/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 177 "libmemcached/options/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 178 "libmemcached/options/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 179 "libmemcached/options/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 180 "libmemcached/options/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 182 "libmemcached/options/scanner.l"
{
      yylval->server.port= MEMCACHED_DEFAULT_PORT;
      yylval->server.weight= 1;
      yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
      if (yylval->server.c_str)
        yylval->server.length= yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 191 "libmemcached/options/scanner.l"
{
      if (yyextra->is_server())
      {
        yylval->server.port= MEMCACHED_DEFAULT_PORT;
        yylval->server.weight= 1;
        yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
        if (yylval->server.c_str)
          yylval->server.length= yyleng;

        return HOSTNAME;
      }

      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;

      return STRING;
    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 209 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return QUOTED_STRING;
    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 215 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 220 "libmemcached/options/scanner.l"
ECHO;
	YY_BREAK
#line 2233 "libmemcached/options/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of config_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 769 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 769 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 768);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void config__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
/* %if-c-only */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void config_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 220 "libmemcached/options/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  config_lex_destroy(scanner);
}


