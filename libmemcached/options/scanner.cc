#line 2 "libmemcached/options/scanner.cc"
#line 22 "libmemcached/options/scanner.l"

#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wunused-parameter"

#include <libmemcached/options/context.h>
#include <libmemcached/options/parser.h>
#include <libmemcached/options/string.h>
#include <libmemcached/options/symbol.h>

#define YY_EXTRA_TYPE Context*




#line 18 "libmemcached/options/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE config_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via config_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void config_restart (FILE *input_file ,yyscan_t yyscanner );
void config__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE config__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void config__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void config_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void config_pop_buffer_state (yyscan_t yyscanner );

static void config_ensure_buffer_stack (yyscan_t yyscanner );
static void config__load_buffer_state (yyscan_t yyscanner );
static void config__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER config__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE config__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE config__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *config_alloc (yy_size_t ,yyscan_t yyscanner );
void *config_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void config_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer config__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        config_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[791] =
    {   0,
        0,    0,   95,   93,    3,    3,    1,   93,   93,    2,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   93,    0,   92,   74,    0,    2,   91,    0,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,    0,    4,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,    0,    0,    0,    2,   87,
        0,   91,   79,   91,   70,   91,   91,   91,   91,   91,
       91,   78,   91,   91,   91,   91,   91,   91,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       88,   88,    0,    0,    0,    2,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   72,
       74,   74,   74,   74,   74,   74,    0,    0,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,    0,    0,   91,   68,   71,   73,
       91,    0,   84,   91,   91,   91,   91,   91,   67,   91,
       74,   74,   74,   74,   74,   74,   74,    0,    0,    0,
        0,    0,    0,   74,   74,   74,   74,   74,   74,    0,
        0,   74,   74,    0,    0,   74,   74,   74,    0,    0,

        0,   74,    0,   74,    0,    0,   91,    0,    0,    0,
       91,   91,   76,   85,   77,   91,    0,    0,   74,   74,
       74,   74,   74,    0,   20,    0,    0,    0,    0,    0,
        0,    0,   74,   74,   74,    0,    0,   74,   74,    0,
        0,   74,   74,    0,    0,   74,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,   74,   90,    0,
       91,    0,    0,   82,   80,   66,   86,   69,    0,    0,
       74,   74,   74,   74,   74,    0,    0,    0,    0,    0,
        0,    0,    0,   74,   74,   74,    0,    0,   74,   74,
        0,    0,    0,    0,   74,    0,    0,   74,    0,    0,

       74,    0,    0,    0,    0,    0,    0,    0,    0,   74,
       90,   89,   91,   83,   81,    0,    0,    0,    0,    0,
        0,   74,   74,   74,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   31,    0,    0,    0,    0,    0,
        0,   74,    0,    0,    0,    0,    0,    5,   74,    0,
        0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
        0,   63,    0,    0,   62,    0,    0,   90,   91,    0,
        0,    0,    0,    0,    0,   74,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,    0,    0,    0,

        0,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   75,    0,    0,    0,    0,    0,    0,   74,    0,
        0,   74,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   61,   60,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   74,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   51,   50,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    7,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   64,   65,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
       52,    0,    0,   55,    0,    0,   54,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   74,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   39,   38,    0,    0,    0,    0,
       45,   44,    0,    0,    0,    0,    0,   59,    0,   58,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   35,   34,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   57,   56,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,   40,    0,    0,    0,    0,    0,    0,    0,
        0,   12,   11,   14,   13,   16,   15,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   30,   29,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   10,
        9,   18,   17,    0,    0,    0,   26,    0,    0,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   28,    0,   27,    0,    0,    0,
        0,    0,    0,   47,   49,   46,   48,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
       23,   33,   32,    0,    0,    0,    0,   22,   21,    0,
        0,    0,    0,    0,    0,   43,   42,   37,   36,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   10,   10,   10,   17,    1,    1,
       18,    1,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,    1,    1,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3
    } ;

static yyconst flex_int16_t yy_base[797] =
    {   0,
        0,  957,  959, 2145, 2145, 2145, 2145,  942,  903,   63,
       71,   79,   73,   65,   81,   66,   72,  114,  112,  130,
      123,  119,  900,  897,  896,  184,  247,  255,  121,  263,
      129,  263,  264,  269,  265,  271,  273,  275,  320,  322,
      327,  331,  332,  333,  340,  371,  380,  381,  894, 2145,
      429,   77,  379,  125,  133,  183,  250,  268,  345,  376,
      441,  447,  272,  257,  290,  412,  489,  505,  514, 2145,
      522,  522,  421,  524,  528,  529,  533,  562,  577,  582,
      587,  511,  597,  588,  632,  636,  638,  644,  314,  330,
      351,  378,  378,  382,  463,  394,  504,  517,  519,  528,

      521,  514,  518,  565,  580,  637,  573,  574,  588,  581,
      699,  707,  716,  724,  732,  741,  741,  742,  743,  747,
      643,  755,  754,  792,  794,  796,  804,  805,  825,  814,
      623,  645,  642,  741,  632,  649,  840,  852,  743,  746,
      765,  769,  812,  817,  464,  813,  813,  465,  844,  840,
      845,  466,  876,  855,  904,  913,  913,  915,  919,  920,
      921,   94,  925,  969,  957,  975,  970,  979,  990,  992,
      564,  868,  884,  906,  912,  904,  996,  898,  920,  907,
      902,  972,  960,  969,  979,  996,  753, 1004, 1001,  998,
     1005, 1001, 1022, 1009, 1010, 1026,  778, 1018, 1025, 1027,

     1021,  956, 1023, 1040, 1083, 1091, 1052,  105,  883,  880,
     1091, 1092, 1099, 1101, 1103, 1109, 1088, 1090, 1078, 1086,
     1098, 1109, 1104, 1092, 2145, 1102, 1106, 1104, 1128, 1127,
     1124, 1143, 1156, 1146, 1141, 1140, 1141, 1139, 1151, 1156,
     1157, 1065, 1149, 1159, 1160, 1150, 1163, 1164, 1155, 1170,
     1163, 1174, 1165, 1177, 1178, 1179, 1185, 1176, 1226, 1238,
     1238,  881,  878, 2145, 2145, 1227, 1239, 1240, 1203, 1204,
     1074, 1221, 1223, 1226, 1245, 1240, 1241, 1246,  883,  882,
     1247,  844,  841, 1237, 1234, 1270, 1252, 1253, 1273, 1256,
     1253, 1254, 1248, 1255, 1301, 1274, 1277, 1306, 1283, 1284,

     1283, 1299, 1301, 1302, 1304, 1293, 1309, 1310, 1296, 1316,
     1357, 2145, 1343, 2145, 2145, 1308, 1313, 1303, 1325, 1326,
     1341, 1342, 1337, 1341, 1343, 1345, 1347, 1351, 1346, 1351,
     1356, 1350, 1351, 1352,    0, 1361, 1362, 1365, 1366, 1369,
     1370, 1356, 1378, 1386, 1386, 1389, 1405, 2145,  827, 1406,
     1408, 1409, 1397, 1401, 1398, 1402, 1433, 1408, 1421, 1411,
     1423, 2145, 1409, 1410, 2145, 1420, 1421, 1470, 1471, 1442,
     1446, 1432, 1434, 1466, 1468, 1469, 1455, 1458, 1460, 1473,
     1474,  836, 1465, 1483,  789, 1467, 1486, 1483, 1485, 1486,
     1487, 1489, 1490, 1491, 1492, 1494, 1488, 1489, 1493, 1512,

     1526, 2145, 1527, 1514, 1517, 1529, 1530, 1531, 1532, 1518,
     1519, 1537, 1538, 1541, 1531, 1544, 1532, 1545, 1546, 1543,
     1544, 1579, 1537, 1538, 1545, 1564, 1564, 1565, 1561, 1574,
     1577, 1580,  825,  771, 1567, 1586, 1572, 1570, 1590, 1576,
     1589, 1590,  776,  737, 1585, 1586, 1577, 1578, 1614, 1584,
     1586, 1606, 1607, 1606, 1622, 1612, 1614, 1633, 1623, 1637,
     1629, 1625, 1626, 1645, 1646, 1636, 1645, 1649, 1639, 1648,
     1652, 2145, 2145, 1629, 1630,  721,  718, 1636, 1637, 1638,
     1640, 1659, 1660, 1655, 1656, 1670, 1671, 1673, 1689, 1685,
     1689, 1696, 1692, 1694, 1693, 1694, 1684, 1685, 1683, 1684,

      672,  669, 1688, 1689, 1688, 1689, 1695, 1696, 1701, 1703,
     1699, 1700, 1700, 1719, 1717, 1737, 2145, 2145, 1724, 1725,
     1736, 1736, 1726, 1743, 1741, 1729, 2145, 2145, 1747, 1748,
     1742, 1743, 1754, 1755, 1752, 1753, 1758, 1759, 1751, 1749,
     1751, 1753, 1769, 1758, 1757, 1788, 1777, 1789, 1790, 1794,
     1797, 1785, 1786, 2145, 2145, 1802, 1803,  666,  664, 1788,
     1789, 1790, 1791,  634,  623,  624,  623,  581,  561, 2145,
     2145, 1791, 1809, 2145, 1793, 1811, 2145, 1802, 1803, 1816,
     1818, 1804, 1808, 1816, 1818, 1816, 1832,  585, 1844, 1846,
     1847, 1833, 1843, 1854, 1840, 1848, 1842, 1843, 1848, 1849,

      559,  550, 1850, 1851, 2145, 2145, 1848, 1849, 1852, 1853,
     2145, 2145, 1853, 1854, 1856, 1858, 1876, 2145, 1877, 2145,
     1865, 1866, 1886, 1888, 1885, 1886, 1902, 1905, 1892, 1893,
     2145, 1909, 1910, 1899, 1915, 1918, 1902, 1918, 1921, 1918,
     1919, 1913, 1914, 2145, 2145, 1915, 1917,  534,  525, 1926,
     1930, 1927, 1929, 1930, 1946, 2145, 2145, 1937, 1939, 1948,
     1949, 1945, 1948,  524,  494, 1948, 1949, 1961, 1962, 1959,
     1965, 1956, 1962, 1968, 1959, 1974, 1975, 1971, 1972, 1974,
     1976, 2145, 2145,  445,  407, 1963, 1964, 1966, 1967, 1990,
     1992, 2145, 2145, 2145, 2145, 2145, 2145,  412,  411, 1989,

     1990, 2014,  383, 2007, 2020,  359, 2011, 2145, 2145, 2020,
     2021, 2022, 2023, 2015, 2016, 2024, 2025, 2026, 2027, 2145,
     2145, 2145, 2145,  326,  316, 2015, 2145,  333, 2016, 2145,
      327, 2034, 2036, 2038, 2042, 2035, 2037,  323,  301,  299,
      266, 2036, 2052, 2054, 2145, 2056, 2145, 2049, 2050,  193,
      146, 2059, 2062, 2145, 2145, 2145, 2145, 2071, 2072,  170,
      153,  152,  151, 2060, 2061, 2071, 2072, 2057, 2058, 2145,
     2145, 2145, 2145, 2079, 2080, 2066, 2067, 2145, 2145, 2087,
     2088,  150,  149, 2087, 2089, 2145, 2145, 2145, 2145, 2145,
     2138,  119, 2141,  117,  116,  108

    } ;

static yyconst flex_int16_t yy_def[797] =
    {   0,
      790,    1,  790,  790,  790,  790,  790,  791,  790,  792,
      792,  792,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,  793,  791,  791,  790,  794,  792,   12,  794,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,  793,  790,
       26,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,  795,  796,  795,  792,  790,
      796,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
      796,  795,  796,  796,  796,  792,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       51,   51,   51,   51,   51,   51,  790,  790,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,  796,  796,   12,   12,   12,   12,
       12,  790,   12,   12,   12,   12,   12,   12,   12,   12,
       51,   51,   51,   51,   51,   51,   51,  790,  790,  790,
      790,  790,  790,   51,   51,   51,   51,   51,   51,  790,
      790,   51,   51,  790,  790,   51,   51,   51,  790,  790,

      790,   51,  790,   51,  796,  796,   12,  790,  790,  790,
       12,   12,   12,   12,   12,   12,  790,  790,   51,   51,
       51,   51,   51,  790,  790,  790,  790,  790,  790,  790,
      790,  790,   51,   51,   51,  790,  790,   51,   51,  790,
      790,   51,   51,  790,  790,   51,  790,  790,   51,  790,
      790,  790,  790,  790,  790,  790,  790,   51,  796,  796,
       12,  790,  790,  790,  790,   12,   12,   12,  790,  790,
       51,   51,   51,   51,   51,  790,  790,  790,  790,  790,
      790,  790,  790,   51,   51,   51,  790,  790,   51,   51,
      790,  790,  790,  790,   51,  790,  790,   51,  790,  790,

       51,  790,  790,  790,  790,  790,  790,  790,  790,   51,
      796,  790,   12,  790,  790,  790,  790,  790,  790,  790,
      790,   51,   51,   51,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,   51,  790,  790,  790,  790,  790,
      790,   51,  790,  790,  790,  790,  790,  790,   51,  790,
      790,  790,  790,  790,  790,  790,   51,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  796,   12,  790,
      790,  790,  790,  790,  790,   51,  790,  790,   51,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,   51,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,   12,  790,  790,  790,  790,  790,  790,   51,  790,
      790,   51,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,   51,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,   51,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,   51,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,   51,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,    0,
      790,  790,  790,  790,  790,  790

    } ;

static yyconst flex_int16_t yy_nxt[2217] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       10,   10,   10,   10,   10,   10,    4,    7,   11,   11,
       12,   13,   14,   15,   11,   16,   17,   18,   11,   11,
       19,   11,   11,   11,   11,   20,   21,   22,   11,   11,
       11,   11,   11,   11,    4,   11,   11,   12,   13,   14,
       15,   11,   16,   17,   18,   11,   11,   19,   11,   11,
       11,   11,   20,   21,   22,   11,   11,   11,   11,   11,
       11,   27,   28,   28,   28,   28,   28,   28,   28,   30,
       31,   31,   31,   31,   31,   31,   31,   30,   31,   31,
       31,   31,   31,   31,   31,   34,   35,   29,   29,   37,

       36,   29,   39,   40,   29,   29,  209,   29,   29,  210,
      115,   32,   38,   29,   33,   89,   29,  262,  112,   68,
      263,   29,   34,   35,   29,   29,   37,   36,   29,   39,
       40,   29,   29,   42,   29,   29,   41,   70,   32,   38,
       29,   33,   89,   29,   43,   47,   29,   29,   45,   29,
       44,   29,   46,   29,   48,   29,   29,   92,   29,   93,
       42,   29,   29,   41,   29,   29,  787,  786,  773,  772,
      771,   43,   47,   29,   29,   45,   29,   44,   29,   46,
       29,   48,   29,   29,   92,   29,   93,  770,   29,   29,
      765,   29,   29,   51,   51,   51,   51,   51,   51,   51,

      764,   94,   52,   53,   54,   55,   51,   51,   51,   56,
       57,   51,   58,   51,   51,   59,   51,   60,   51,   61,
       62,   63,   64,   65,   51,   51,   51,   51,   94,   52,
       53,   54,   55,   51,   51,   51,   56,   57,   51,   58,
       51,   51,   59,   51,   60,   51,   61,   62,   63,   64,
       65,   51,   51,   51,   51,   66,   67,   67,   67,   67,
       67,   67,   67,   27,   69,   69,   69,   69,   69,   69,
       69,   66,   71,   71,   71,   71,   71,   71,   71,   70,
       70,   70,   95,  757,   73,   70,   75,   70,   74,   70,
       96,   70,  108,  109,   72,   29,   29,   29,   29,   29,

       29,   29,   77,   29,   29,   29,   76,   29,   29,   95,
       29,   73,  110,   75,   78,   74,  756,   96,  755,  108,
      109,   72,   29,   29,   29,   29,   29,   29,   29,   77,
       29,   29,   29,   76,   29,   29,   70,   29,   70,  110,
      754,   78,   80,   70,  747,   82,   79,   70,   70,   70,
      745,  131,   29,   83,   29,   29,   70,   29,   81,   29,
      743,  132,   29,   29,   29,   29,   29,   29,   84,   80,
      742,   85,   29,   79,  133,   29,  730,   97,  131,   29,
       83,   29,   29,   98,   29,   81,   29,   70,  132,   29,
       29,   29,   29,   29,   29,   84,   70,   70,   85,   29,

      727,  133,   29,   29,   97,   90,   29,   86,   99,  134,
       98,  100,   29,   29,  135,   87,   29,   91,  136,   88,
       66,  111,  111,  111,  111,  111,  111,  111,  723,  722,
       29,  139,   90,   29,   86,   99,  134,   70,  100,   29,
       29,  135,   87,   29,   91,  136,   88,   51,   51,   51,
       51,  715,  714,   29,   51,   51,   29,   51,  139,  101,
       51,  102,   51,  103,   51,   51,   51,   51,   51,  104,
      137,  190,  194,  199,   51,   51,   51,   51,  105,  106,
       29,   51,   51,   29,   51,  107,  101,   51,  102,   51,
      103,   51,   51,   51,   51,   51,  104,  113,  114,  114,

      114,  114,  114,  114,  114,  105,  106,  138,  191,  195,
      200,  697,  107,   66,  111,  111,  111,  111,  111,  111,
      111,   70,   27,  116,  116,  116,  116,  116,  116,  116,
       71,   71,   71,   71,   71,   71,   71,   71,   70,  140,
       70,  696,  683,   29,   70,   70,   29,  141,  142,   70,
      143,  682,  144,  145,   29,  146,   29,   29,  117,   29,
       29,  119,  118,   29,   29,   29,  140,  645,   29,  120,
       29,  217,  121,   29,  141,  142,  644,  143,   70,  144,
      145,   29,  146,   29,   29,  117,   29,   29,  119,  118,
       29,   29,   29,   70,   29,   29,  120,   29,   70,  122,

      147,  148,  631,   70,   70,  616,  151,  152,  218,   29,
      153,  123,   29,   70,   29,  124,  154,   29,  126,   29,
       29,   29,   29,   29,   29,  615,  122,  147,  148,   29,
      614,  613,   29,  151,  152,  125,   29,  153,  123,   29,
      612,   29,  124,  154,   29,  126,   29,   29,   70,   29,
       29,  611,   70,  127,   70,  171,   29,  149,  128,   29,
       70,  161,  125,  172,   29,  173,  130,   29,   29,  176,
       29,   29,  150,   29,  177,   29,   29,  129,   29,   29,
      127,  606,  171,  605,  149,  128,  555,  162,  161,  554,
      172,   29,  173,  130,   29,   29,  176,   29,   29,  150,

       29,  177,   29,   29,  129,   29,   29,   71,   71,   71,
       71,   71,   71,   71,   71,   66,  111,  111,  111,  111,
      111,  111,  111,   70,   71,  155,  155,  155,  155,  155,
      155,  155,  113,  156,  156,  156,  156,  156,  156,  156,
       71,   71,   71,   71,   71,   71,   71,   71,   70,   30,
      116,  116,  116,  116,  116,  116,  116,   70,   70,   70,
      236,  184,  530,   70,  174,  529,  158,  157,  185,  160,
       70,   70,  175,   29,   29,   29,   29,   29,  159,   29,
      163,  498,   29,  497,  186,  247,   29,   29,  184,   29,
       29,  174,  164,  158,  157,  185,  160,  237,  187,  175,

       29,   29,   29,   29,   29,  159,   29,  163,   70,   29,
       70,  186,   70,   29,   29,  488,   29,   29,  165,  164,
       70,   70,  248,  166,   29,  187,   29,   29,   29,   29,
       70,   29,  487,  438,  167,  188,  168,   29,  189,   29,
       29,   70,  169,  435,  402,  165,   29,  170,  192,   29,
      166,   29,  193,   29,   29,   29,   29,   29,   29,  178,
       29,  167,  188,  168,   29,  189,   29,   29,  179,  169,
      180,  181,  196,   29,  170,  192,   29,  197,  198,  193,
      182,  204,  183,  201,   29,  332,  178,   29,  331,  329,
      328,  315,  314,  265,  264,  179,   50,  180,  181,  196,

       25,   25,   50,  219,  197,  198,  220,  182,  204,  183,
       26,  202,  205,  206,  206,  206,  206,  206,  206,  206,
      203,  113,   71,   71,   71,   71,   71,   71,   71,   70,
      219,   70,  221,  220,  222,   70,   70,   70,  202,  223,
      227,   70,  228,  229,  230,   29,   25,   29,   29,  207,
       29,   29,   29,   29,   29,   29,   29,   29,  790,  221,
       29,  222,   23,  255,  790,  208,  223,  227,  790,  228,
      229,  230,   29,   70,   29,   29,  207,   29,   29,   29,
       29,   29,   29,   29,   29,   70,   70,   29,  212,   29,
      211,   70,   29,  213,  231,   70,  232,  790,  790,  233,

      256,   29,   29,  224,   29,  214,   70,   29,   70,  215,
       29,   29,  234,  225,   29,  212,   29,  211,  235,   29,
      213,  231,   29,  232,   29,   29,  233,  216,   29,   29,
      238,   29,  214,  239,   29,  240,  215,   29,   29,  234,
      226,   29,  241,  242,  243,  235,  244,  245,  246,   29,
      249,   29,   29,  250,  216,  252,  251,  238,  253,  254,
      239,  257,  240,  258,  790,  790,  790,  790,   70,  241,
      242,  243,  293,  244,  245,  246,  790,  249,  790,  790,
      250,  318,  252,  251,   29,  253,  254,   29,  257,  261,
      258,   71,  259,  259,  259,  259,  259,  259,  259,  205,

      260,  260,  260,  260,  260,  260,  260,   70,   70,  294,
      269,   29,  270,  266,   29,   70,  261,   70,  319,   70,
      271,  272,  273,   29,   29,   70,   29,   29,  267,  274,
      275,   29,  276,   29,   29,   29,   29,  269,   29,  270,
      266,   29,  277,  278,   29,  268,  279,  271,  272,  273,
       29,   29,  280,   29,   29,  267,  274,  275,   29,  276,
       29,   29,   29,   29,  281,   29,  282,  283,   29,  277,
      278,   29,  268,  279,  284,  285,  286,  287,  288,  280,
      289,  290,  291,  292,  295,  296,  297,  298,  299,  300,
      301,  281,  302,  282,  283,  303,  304,  305,  306,  307,

      308,  284,  285,  286,  287,  288,  309,  289,  290,  291,
      292,  295,  296,  297,  298,  299,  300,  301,  310,  302,
      790,  790,  303,  304,  305,  306,  307,  308,  320,  790,
      316,  317,  790,  309,   71,  311,  311,  311,  311,  311,
      311,  311,  312,   70,  333,  310,  205,   71,   71,   71,
       71,   71,   71,   71,   70,   70,   70,  316,  317,   29,
      313,  322,   29,  323,  324,  321,  325,  326,  327,  330,
       29,   29,   29,   29,   29,   29,  335,  336,  338,  339,
      340,  334,  342,  343,  344,  345,   29,  313,  322,   29,
      323,  324,  346,  325,  326,  327,  330,   29,   29,   29,

       29,   29,   29,  335,  351,  338,  339,  352,  347,  342,
      343,  344,  345,  353,  337,  355,  356,  341,  348,  346,
      357,  358,  359,  366,  360,  361,  362,  363,  364,  365,
      370,  351,  790,  790,  352,  371,  372,  349,  790,  790,
      790,  790,  355,  356,  377,  350,  790,  357,  358,  359,
      354,  360,  361,  362,  363,  364,  365,  370,  373,   70,
      367,  374,  371,  372,  349,   71,  368,  368,  368,  368,
      368,  368,  368,  312,  369,   29,  375,  376,   29,  379,
      380,  378,  381,  382,  383,  373,  384,  385,  374,  386,
      387,  388,  389,  390,  391,  392,  393,  394,  395,  396,

      397,  369,   29,  375,  376,   29,  379,  380,  398,  381,
      382,  383,  399,  384,  385,  400,  386,  387,  388,  389,
      390,  391,  392,  393,  394,  395,  396,  397,  401,  403,
      404,  405,  406,  407,  410,  398,  408,  409,  411,  399,
      412,  414,  400,  415,  416,  417,  418,  419,  420,  421,
      790,  790,  790,  790,  790,  401,  403,  404,  405,  406,
      407,  410,  423,  408,  409,  411,  424,  425,  414,  426,
      415,  416,  417,  418,  419,  420,  421,  413,   71,   71,
       71,   71,   71,   71,   71,   71,  312,   70,  427,  423,
      428,  429,  430,  424,  425,  431,  426,  432,  433,  434,

      436,  437,  439,   29,  440,  441,   29,  442,  422,  443,
      444,  445,  446,  447,  448,  427,  449,  428,  429,  430,
      450,  451,  431,  452,  432,  433,  434,  436,  437,  439,
       29,  440,  441,   29,  442,  422,  443,  444,  445,  446,
      447,  448,  453,  449,  454,  455,  456,  450,  451,  457,
      452,  458,  459,  460,  461,  462,  463,  464,  465,  466,
      468,  471,  469,  472,  473,  474,  475,  467,  482,  453,
      470,  454,  455,  456,  476,  477,  457,  478,  458,  459,
      460,  461,  462,  463,  464,  465,  466,  468,  471,  469,
      472,  473,  474,  475,  467,   70,  479,  470,  480,  481,

      484,  476,  477,  485,  478,  483,  486,  489,  490,  491,
      492,   29,  493,  494,   29,  495,  496,  499,  500,  501,
      502,  503,  505,  479,  506,  480,  481,  484,  507,  508,
      485,  790,  509,  486,  489,  490,  491,  492,   29,  493,
      494,   29,  495,  496,  499,  500,  501,  502,  510,  505,
      511,  506,  512,  513,  514,  507,  508,  515,  504,  509,
      516,  517,  518,  519,  520,  521,  522,  523,  524,  525,
      526,  527,  528,  531,  532,  510,  533,  511,  534,  512,
      513,  514,  535,  536,  515,  537,  538,  516,  517,  518,
      519,  520,  521,  522,  523,  524,  525,  526,  527,  528,

      531,  532,  539,  533,  540,  534,  541,  542,  543,  535,
      536,  544,  537,  538,  545,  546,  547,  548,  549,  550,
      551,  552,  553,  556,  557,  558,  559,  560,  561,  539,
      562,  540,  563,  541,  542,  543,  564,  565,  544,  566,
      567,  545,  546,  547,  548,  549,  550,  551,  552,  553,
      556,  557,  558,  559,  560,  561,  568,  562,  569,  563,
      570,  571,  572,  564,  565,  573,  566,  567,  574,  575,
      576,  577,  578,  579,  580,  581,  582,  583,  584,  585,
      586,  587,  588,  568,  589,  569,  590,  570,  571,  572,
      591,  592,  573,  593,  594,  574,  575,  576,  577,  578,

      579,  580,  581,  582,  583,  584,  585,  586,  587,  588,
      595,  589,  596,  590,  597,  598,  599,  591,  592,  600,
      593,  594,  601,  602,  603,  604,  607,  608,  609,  610,
      617,  618,  619,  620,  621,  622,  623,  595,  624,  596,
      625,  597,  598,  599,  626,  627,  600,  628,  629,  601,
      602,  603,  604,  607,  608,  609,  610,  617,  618,  619,
      620,  621,  622,  623,  630,  624,  632,  625,  633,  634,
      635,  626,  627,  636,  628,  629,  637,  638,  639,  640,
      641,  642,  643,  646,  647,  648,  649,  650,  651,  652,
      653,  630,  654,  632,  655,  633,  634,  635,  656,  657,

      636,  658,  659,  637,  638,  639,  640,  641,  642,  643,
      646,  647,  648,  649,  650,  651,  652,  653,  660,  654,
      661,  655,  662,  663,  664,  656,  657,  665,  658,  659,
      666,  667,  668,  669,  670,  671,  672,  673,  674,  675,
      676,  677,  678,  679,  680,  660,  681,  661,  684,  662,
      663,  664,  685,  686,  665,  687,  688,  666,  667,  668,
      669,  670,  671,  672,  673,  674,  675,  676,  677,  678,
      679,  680,  689,  681,  690,  684,  691,  692,  693,  685,
      686,  694,  687,  688,  695,  698,  699,  700,  701,  702,
      703,  704,  705,  706,  707,  708,  709,  710,  711,  689,

      712,  690,  713,  691,  692,  693,  716,  717,  694,  718,
      719,  695,  698,  699,  700,  701,  702,  703,  704,  705,
      706,  707,  708,  709,  710,  711,  720,  712,  721,  713,
      724,  725,  726,  716,  717,  728,  718,  719,  729,  731,
      732,  733,  734,  735,  736,  737,  738,  739,  740,  741,
      744,  746,  748,  720,  749,  721,  750,  724,  725,  726,
      751,  752,  728,  753,  758,  729,  731,  732,  733,  734,
      735,  736,  737,  738,  739,  740,  741,  744,  746,  748,
      759,  749,  760,  750,  761,  762,  763,  751,  752,  766,
      753,  758,  767,  768,  769,  774,  775,  776,  777,  778,

      779,  780,  781,  782,  783,  784,  785,  759,  788,  760,
      789,  761,  762,  763,  790,  790,  766,  790,  790,  767,
      768,  769,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  784,  785,  790,  788,  790,  789,   24,  790,
       24,   49,   49,   49,    3,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790
    } ;

static yyconst flex_int16_t yy_chk[2217] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,   11,   11,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   14,   14,   16,   15,

       14,   16,   16,   17,   17,   13,  162,   17,   13,  162,
      796,   12,   15,   15,   12,   52,   15,  208,  795,  794,
      208,  792,   13,   14,   14,   16,   15,   14,   16,   16,
       17,   17,   13,   19,   17,   13,   18,   29,   12,   15,
       15,   12,   52,   15,   19,   21,   18,   19,   20,   18,
       19,   22,   20,   29,   22,   21,   29,   54,   21,   55,
       19,   31,   20,   18,   31,   20,  783,  782,  763,  762,
      761,   19,   21,   18,   19,   20,   18,   19,   22,   20,
       29,   22,   21,   29,   54,   21,   55,  760,   31,   20,
      751,   31,   20,   26,   26,   26,   26,   26,   26,   26,

      750,   56,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   56,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   27,   27,   27,   27,   27,
       27,   27,   27,   28,   28,   28,   28,   28,   28,   28,
       28,   30,   30,   30,   30,   30,   30,   30,   30,   32,
       33,   35,   57,  741,   33,   34,   35,   36,   34,   37,
       58,   38,   63,   64,   32,   32,   33,   35,   32,   33,

       35,   34,   37,   36,   34,   37,   36,   38,   37,   57,
       38,   33,   65,   35,   38,   34,  740,   58,  739,   63,
       64,   32,   32,   33,   35,   32,   33,   35,   34,   37,
       36,   34,   37,   36,   38,   37,   39,   38,   40,   65,
      738,   38,   40,   41,  731,   42,   39,   42,   43,   44,
      728,   89,   39,   43,   40,   39,   45,   40,   41,   41,
      725,   90,   41,   42,   43,   44,   42,   43,   44,   40,
      724,   45,   45,   39,   91,   45,  706,   59,   89,   39,
       43,   40,   39,   59,   40,   41,   41,   46,   90,   41,
       42,   43,   44,   42,   43,   44,   47,   48,   45,   45,

      703,   91,   45,   46,   59,   53,   46,   46,   60,   92,
       59,   60,   47,   48,   93,   47,   48,   53,   94,   48,
       66,   66,   66,   66,   66,   66,   66,   66,  699,  698,
       46,   96,   53,   46,   46,   60,   92,   73,   60,   47,
       48,   93,   47,   48,   53,   94,   48,   51,   51,   51,
       51,  685,  684,   73,   51,   51,   73,   51,   96,   61,
       51,   61,   51,   61,   51,   51,   51,   51,   51,   62,
       95,  145,  148,  152,   51,   51,   51,   51,   62,   62,
       73,   51,   51,   73,   51,   62,   61,   51,   61,   51,
       61,   51,   51,   51,   51,   51,   62,   67,   67,   67,

       67,   67,   67,   67,   67,   62,   62,   95,  145,  148,
      152,  665,   62,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   69,   69,   69,   69,   69,   69,   69,   69,
       71,   71,   71,   71,   71,   71,   71,   71,   72,   97,
       74,  664,  649,   82,   75,   76,   82,   98,   99,   77,
      100,  648,  101,  102,   72,  103,   74,   72,   72,   74,
       75,   76,   74,   75,   76,   77,   97,  602,   77,   77,
       82,  171,   78,   82,   98,   99,  601,  100,   78,  101,
      102,   72,  103,   74,   72,   72,   74,   75,   76,   74,
       75,   76,   77,   79,   78,   77,   77,   78,   80,   79,

      104,  105,  588,   81,   84,  569,  107,  108,  171,   79,
      109,   80,   79,   83,   80,   81,  110,   80,   84,   81,
       84,   78,   81,   84,   78,  568,   79,  104,  105,   83,
      567,  566,   83,  107,  108,   83,   79,  109,   80,   79,
      565,   80,   81,  110,   80,   84,   81,   84,   85,   81,
       84,  564,   86,   85,   87,  131,   83,  106,   86,   83,
       88,  121,   83,  132,   85,  133,   88,   85,   86,  135,
       87,   86,  106,   87,  136,  121,   88,   87,  121,   88,
       85,  559,  131,  558,  106,   86,  502,  121,  121,  501,
      132,   85,  133,   88,   85,   86,  135,   87,   86,  106,

       87,  136,  121,   88,   87,  121,   88,  111,  111,  111,
      111,  111,  111,  111,  111,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  113,  113,  113,  113,  113,  113,
      113,  113,  114,  114,  114,  114,  114,  114,  114,  114,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  116,
      116,  116,  116,  116,  116,  116,  116,  117,  118,  119,
      187,  139,  477,  120,  134,  476,  118,  117,  140,  120,
      123,  122,  134,  117,  118,  119,  117,  118,  119,  120,
      122,  444,  120,  443,  141,  197,  123,  122,  139,  123,
      122,  134,  123,  118,  117,  140,  120,  187,  142,  134,

      117,  118,  119,  117,  118,  119,  120,  122,  124,  120,
      125,  141,  126,  123,  122,  434,  123,  122,  124,  123,
      127,  128,  197,  125,  124,  142,  125,  124,  126,  125,
      130,  126,  433,  385,  126,  143,  127,  128,  144,  127,
      128,  129,  128,  382,  349,  124,  130,  129,  146,  130,
      125,  124,  147,  125,  124,  126,  125,  129,  126,  137,
      129,  126,  143,  127,  128,  144,  127,  128,  137,  128,
      137,  138,  149,  130,  129,  146,  130,  150,  151,  147,
      138,  154,  138,  153,  129,  283,  137,  129,  282,  280,
      279,  263,  262,  210,  209,  137,   49,  137,  138,  149,

       25,   24,   23,  172,  150,  151,  173,  138,  154,  138,
        9,  153,  155,  155,  155,  155,  155,  155,  155,  155,
      153,  156,  156,  156,  156,  156,  156,  156,  156,  157,
      172,  158,  174,  173,  175,  159,  160,  161,  153,  176,
      178,  163,  179,  180,  181,  157,    8,  158,  157,  157,
      158,  159,  160,  161,  159,  160,  161,  163,    3,  174,
      163,  175,    2,  202,    0,  161,  176,  178,    0,  179,
      180,  181,  157,  165,  158,  157,  157,  158,  159,  160,
      161,  159,  160,  161,  163,  164,  167,  163,  165,  165,
      164,  166,  165,  166,  182,  168,  183,    0,    0,  184,

      202,  164,  167,  177,  164,  167,  169,  166,  170,  168,
      166,  168,  185,  177,  168,  165,  165,  164,  186,  165,
      166,  182,  169,  183,  170,  169,  184,  170,  164,  167,
      188,  164,  167,  189,  166,  190,  168,  166,  168,  185,
      177,  168,  191,  192,  193,  186,  194,  195,  196,  169,
      198,  170,  169,  199,  170,  200,  199,  188,  200,  201,
      189,  203,  190,  204,    0,    0,    0,    0,  207,  191,
      192,  193,  242,  194,  195,  196,    0,  198,    0,    0,
      199,  271,  200,  199,  207,  200,  201,  207,  203,  207,
      204,  205,  205,  205,  205,  205,  205,  205,  205,  206,

      206,  206,  206,  206,  206,  206,  206,  211,  212,  242,
      217,  207,  218,  211,  207,  213,  207,  214,  271,  215,
      219,  220,  221,  211,  212,  216,  211,  212,  212,  222,
      223,  213,  224,  214,  213,  215,  214,  217,  215,  218,
      211,  216,  226,  227,  216,  216,  228,  219,  220,  221,
      211,  212,  229,  211,  212,  212,  222,  223,  213,  224,
      214,  213,  215,  214,  230,  215,  231,  232,  216,  226,
      227,  216,  216,  228,  233,  234,  235,  236,  237,  229,
      238,  239,  240,  241,  243,  244,  245,  246,  247,  248,
      249,  230,  250,  231,  232,  251,  252,  253,  254,  255,

      256,  233,  234,  235,  236,  237,  257,  238,  239,  240,
      241,  243,  244,  245,  246,  247,  248,  249,  258,  250,
        0,    0,  251,  252,  253,  254,  255,  256,  272,    0,
      269,  270,    0,  257,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  266,  284,  258,  260,  260,  260,  260,
      260,  260,  260,  260,  261,  267,  268,  269,  270,  266,
      261,  273,  266,  274,  275,  272,  276,  277,  278,  281,
      261,  267,  268,  261,  267,  268,  285,  286,  287,  288,
      289,  284,  290,  291,  292,  293,  266,  261,  273,  266,
      274,  275,  294,  276,  277,  278,  281,  261,  267,  268,

      261,  267,  268,  285,  296,  287,  288,  297,  295,  290,
      291,  292,  293,  298,  286,  299,  300,  289,  295,  294,
      301,  302,  303,  310,  304,  305,  306,  307,  308,  309,
      316,  296,    0,    0,  297,  317,  318,  295,    0,    0,
        0,    0,  299,  300,  323,  295,    0,  301,  302,  303,
      298,  304,  305,  306,  307,  308,  309,  316,  319,  313,
      310,  320,  317,  318,  295,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  313,  313,  321,  322,  313,  324,
      325,  323,  326,  327,  328,  319,  329,  330,  320,  331,
      332,  333,  334,  336,  337,  338,  339,  340,  341,  342,

      343,  313,  313,  321,  322,  313,  324,  325,  344,  326,
      327,  328,  345,  329,  330,  346,  331,  332,  333,  334,
      336,  337,  338,  339,  340,  341,  342,  343,  347,  350,
      351,  352,  353,  353,  355,  344,  354,  354,  356,  345,
      357,  358,  346,  359,  360,  361,  363,  364,  366,  367,
        0,    0,    0,    0,    0,  347,  350,  351,  352,  353,
      353,  355,  370,  354,  354,  356,  371,  372,  358,  373,
      359,  360,  361,  363,  364,  366,  367,  357,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  369,  374,  370,
      375,  376,  377,  371,  372,  378,  373,  379,  380,  381,

      383,  384,  386,  369,  387,  388,  369,  389,  369,  390,
      391,  392,  393,  394,  395,  374,  396,  375,  376,  377,
      397,  398,  378,  399,  379,  380,  381,  383,  384,  386,
      369,  387,  388,  369,  389,  369,  390,  391,  392,  393,
      394,  395,  400,  396,  401,  403,  404,  397,  398,  405,
      399,  406,  407,  408,  409,  410,  411,  412,  413,  414,
      415,  417,  416,  418,  419,  420,  421,  414,  429,  400,
      416,  401,  403,  404,  423,  424,  405,  425,  406,  407,
      408,  409,  410,  411,  412,  413,  414,  415,  417,  416,
      418,  419,  420,  421,  414,  422,  426,  416,  427,  428,

      430,  423,  424,  431,  425,  429,  432,  435,  436,  437,
      438,  422,  439,  440,  422,  441,  442,  445,  446,  447,
      448,  449,  450,  426,  451,  427,  428,  430,  452,  453,
      431,    0,  454,  432,  435,  436,  437,  438,  422,  439,
      440,  422,  441,  442,  445,  446,  447,  448,  455,  450,
      456,  451,  457,  458,  459,  452,  453,  460,  449,  454,
      461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
      471,  474,  475,  478,  479,  455,  480,  456,  481,  457,
      458,  459,  482,  483,  460,  484,  485,  461,  462,  463,
      464,  465,  466,  467,  468,  469,  470,  471,  474,  475,

      478,  479,  486,  480,  487,  481,  488,  489,  490,  482,
      483,  491,  484,  485,  492,  493,  494,  495,  496,  497,
      498,  499,  500,  503,  504,  505,  506,  507,  508,  486,
      509,  487,  510,  488,  489,  490,  511,  512,  491,  513,
      514,  492,  493,  494,  495,  496,  497,  498,  499,  500,
      503,  504,  505,  506,  507,  508,  515,  509,  516,  510,
      519,  520,  521,  511,  512,  522,  513,  514,  523,  524,
      525,  526,  529,  530,  531,  532,  533,  534,  535,  536,
      537,  538,  539,  515,  540,  516,  541,  519,  520,  521,
      542,  543,  522,  544,  545,  523,  524,  525,  526,  529,

      530,  531,  532,  533,  534,  535,  536,  537,  538,  539,
      546,  540,  547,  541,  548,  549,  550,  542,  543,  551,
      544,  545,  552,  553,  556,  557,  560,  561,  562,  563,
      572,  573,  575,  576,  578,  579,  580,  546,  581,  547,
      582,  548,  549,  550,  583,  584,  551,  585,  586,  552,
      553,  556,  557,  560,  561,  562,  563,  572,  573,  575,
      576,  578,  579,  580,  587,  581,  589,  582,  590,  591,
      592,  583,  584,  593,  585,  586,  594,  595,  596,  597,
      598,  599,  600,  603,  604,  607,  608,  609,  610,  613,
      614,  587,  615,  589,  616,  590,  591,  592,  617,  619,

      593,  621,  622,  594,  595,  596,  597,  598,  599,  600,
      603,  604,  607,  608,  609,  610,  613,  614,  623,  615,
      624,  616,  625,  626,  627,  617,  619,  628,  621,  622,
      629,  630,  632,  633,  634,  635,  636,  637,  638,  639,
      640,  641,  642,  643,  646,  623,  647,  624,  650,  625,
      626,  627,  651,  652,  628,  653,  654,  629,  630,  632,
      633,  634,  635,  636,  637,  638,  639,  640,  641,  642,
      643,  646,  655,  647,  658,  650,  659,  660,  661,  651,
      652,  662,  653,  654,  663,  666,  667,  668,  669,  670,
      671,  672,  673,  674,  675,  676,  677,  678,  679,  655,

      680,  658,  681,  659,  660,  661,  686,  687,  662,  688,
      689,  663,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  690,  680,  691,  681,
      700,  701,  702,  686,  687,  704,  688,  689,  705,  707,
      710,  711,  712,  713,  714,  715,  716,  717,  718,  719,
      726,  729,  732,  690,  733,  691,  734,  700,  701,  702,
      735,  736,  704,  737,  742,  705,  707,  710,  711,  712,
      713,  714,  715,  716,  717,  718,  719,  726,  729,  732,
      743,  733,  744,  734,  746,  748,  749,  735,  736,  752,
      737,  742,  753,  758,  759,  764,  765,  766,  767,  768,

      769,  774,  775,  776,  777,  780,  781,  743,  784,  744,
      785,  746,  748,  749,    0,    0,  752,    0,    0,  753,
      758,  759,  764,  765,  766,  767,  768,  769,  774,  775,
      776,  777,  780,  781,    0,  784,    0,  785,  791,    0,
      791,  793,  793,  793,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790
    } ;

static yyconst flex_int16_t yy_rule_linenum[94] =
    {   0,
       76,   79,   81,   83,   87,   88,   90,   91,   92,   93,
       94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
      114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  148,  149,  151,  152,  153,  154,  155,
      156,  158,  159,  162,  167,  168,  169,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  181,  187,  193,  199,
      205,  211,  217

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/options/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Libmemcached Scanner and Parser
 *
 *  Copyright (C) 2011 DataDifferental, http://datadifferential.com
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 * 
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 37 "libmemcached/options/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM config_get_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= context->length - context->pos; \
    result > max_size ? result = max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1342 "libmemcached/options/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals (yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int config_lex_init (yyscan_t* scanner);

int config_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int config_lex_destroy (yyscan_t yyscanner );

int config_get_debug (yyscan_t yyscanner );

void config_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE config_get_extra (yyscan_t yyscanner );

void config_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *config_get_in (yyscan_t yyscanner );

void config_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *config_get_out (yyscan_t yyscanner );

void config_set_out  (FILE * out_str ,yyscan_t yyscanner );

int config_get_leng (yyscan_t yyscanner );

char *config_get_text (yyscan_t yyscanner );

int config_get_lineno (yyscan_t yyscanner );

void config_set_lineno (int line_number ,yyscan_t yyscanner );

int config_get_column  (yyscan_t yyscanner );

void config_set_column (int column_no ,yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * config_get_lval (yyscan_t yyscanner );

void config_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int config_wrap (yyscan_t yyscanner );
#else
extern int config_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int config_lex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int config_lex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 73 "libmemcached/options/scanner.l"



#line 1649 "libmemcached/options/scanner.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			config_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		config__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 791 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2145 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 94 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 94 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 95 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "libmemcached/options/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "libmemcached/options/scanner.l"
{ yylval->number = atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 81 "libmemcached/options/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 4:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 83 "libmemcached/options/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS_OPTION; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 91 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return VERIFY_KEY; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 92 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 93 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return AUTO_EJECT_HOSTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BINARY_PROTOCOL; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 96 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return BUFFER_REQUESTS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 99 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONFIGURE_FILE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 100 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 101 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return CONNECT_TIMEOUT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 102 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return DISTRIBUTION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 103 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 104 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 105 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return HASH_WITH_PREFIX_KEY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 106 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 107 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_BYTES_WATERMARK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 108 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 109 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_KEY_PREFETCH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 110 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 111 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return IO_MSG_WATERMARK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 112 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_WEIGHTED; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 113 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return KETAMA_WEIGHTED; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 114 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NOREPLY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 115 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 116 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return NUMBER_OF_REPLICAS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 117 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 118 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return POLL_TIMEOUT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 119 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 121 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 122 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RCV_TIMEOUT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 123 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 124 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RETRY_TIMEOUT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 125 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 126 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVER_FAILURE_LIMIT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 127 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 128 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SND_TIMEOUT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 129 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 130 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_RECV_SIZE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 131 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 132 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SOCKET_SEND_SIZE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 133 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 134 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SORT_HOSTS; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 135 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 136 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SUPPORT_CAS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 137 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 138 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_NODELAY; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 139 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 140 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPALIVE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 141 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 142 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return _TCP_KEEPIDLE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 143 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 144 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USER_DATA; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 145 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 146 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return USE_UDP; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 148 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 149 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PREFIX_KEY; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 151 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return INCLUDE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 152 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return RESET; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 153 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return PARSER_DEBUG; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 154 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return SERVERS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 155 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return END; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 156 "libmemcached/options/scanner.l"
{ yyextra->begin= yytext; return ERROR; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 158 "libmemcached/options/scanner.l"
{ return TRUE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 159 "libmemcached/options/scanner.l"
{ return FALSE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 162 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 167 "libmemcached/options/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 168 "libmemcached/options/scanner.l"
{ return MODULA; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 169 "libmemcached/options/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 171 "libmemcached/options/scanner.l"
{ return MD5; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 172 "libmemcached/options/scanner.l"
{ return CRC; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 173 "libmemcached/options/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 174 "libmemcached/options/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 175 "libmemcached/options/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 176 "libmemcached/options/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 177 "libmemcached/options/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 178 "libmemcached/options/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 179 "libmemcached/options/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 181 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return HOSTNAME_WITH_PORT;
    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return HOSTNAME;
    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 193 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return IPADDRESS_WITH_PORT;
    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 199 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 205 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return STRING;
    }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 211 "libmemcached/options/scanner.l"
{
      yylval->string.c_str = yytext;
      yylval->string.length = yyleng;
      return QUOTED_STRING;
    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 217 "libmemcached/options/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 222 "libmemcached/options/scanner.l"
ECHO;
	YY_BREAK
#line 2272 "libmemcached/options/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * config_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( config_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of config_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					config_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			config_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) config_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 791 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 791 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 790);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					config_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( config_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void config_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        config_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            config__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	config__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	config__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		config_pop_buffer_state();
	 *		config_push_buffer_state(new_buffer);
     */
	config_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	config__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (config_wrap()) processing, but the only time this flag
	 * is looked at is after config_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void config__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE config__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) config_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__create_buffer()" );

	b->yy_is_our_buffer = 1;

	config__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with config__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		config_free((void *) b->yy_ch_buf ,yyscanner );

	config_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a config_restart() or at EOF.
 */
/* %if-c-only */
    static void config__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	config__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then config__init_buffer was _probably_
     * called from config_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void config__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		config__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	config_ensure_buffer_stack(yyscanner);

	/* This block is copied from config__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from config__switch_to_buffer. */
	config__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void config_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		config__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void config_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)config_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in config_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE config__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) config_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	config__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to config_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       config__scan_bytes() instead.
 */
YY_BUFFER_STATE config__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return config__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to config_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE config__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) config_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in config__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = config__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in config__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE config_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int config_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int config_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *config_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int config_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *config_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void config_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void config_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "config_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see config__switch_to_buffer
 */
void config_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void config_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int config_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void config_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * config_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void config_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* config_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int config_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* config_lex_init_extra has the same functionality as config_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to config_alloc in
 * the yyextra field.
 */

int config_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    config_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) config_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    config_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from config_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * config_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* config_lex_destroy is for both reentrant and non-reentrant scanners. */
int config_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		config__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		config_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	config_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        config_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * config_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    config_free ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *config_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *config_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void config_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see config_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 222 "libmemcached/options/scanner.l"



void Context::init_scanner()
{
  config_lex_init(&scanner);
  config_set_extra(this,scanner);
}

void Context::destroy_scanner()
{
  config_lex_destroy(scanner);
}


